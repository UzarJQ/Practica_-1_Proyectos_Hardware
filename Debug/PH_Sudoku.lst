
PH_Sudoku.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b38  0c000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  0c000b40  0c000b40  00008b40  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  2 .ARM.attributes 0000002e  00000000  00000000  00008c60  2**0
                  CONTENTS, READONLY
  3 .comment      0000002a  00000000  00000000  00008c8e  2**0
                  CONTENTS, READONLY
  4 .debug_line   0000051a  00000000  00000000  00008cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000051f  00000000  00000000  000091d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000126  00000000  00000000  000096f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000040  00000000  00000000  00009818  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_macinfo 00006574  00000000  00000000  00009858  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000018c  00000000  00000000  0000fdcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 0000006b  00000000  00000000  0000ff58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000035  00000000  00000000  0000ffc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000222  00000000  00000000  0000fff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000130  00000000  00000000  0001021c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c000000 <sudoku_candidatos_init_arm>:
.global sudoku_candidatos_init_arm

################################################################################
.arm
sudoku_candidatos_init_arm:
	push {r11, r12, lr}
 c000000:	e92d5800 	push	{fp, ip, lr}
    @ r4 = desplazamiento fila
    @ r5 = desplazamiento columna
    @ r6 = 0x1FF0 lista de candidatos
    @ r7 = desplazamiento total

    mov r1, #0
 c000004:	e3a01000 	mov	r1, #0
    mov r6, #0x1F00               	@ Cargar parte alta de (0x1F00)
 c000008:	e3a06c1f 	mov	r6, #7936	; 0x1f00
    orr r6, r6, #0x00F0           	@ Combinar parte baja (0x00F0) para obtener 0x1FF0
 c00000c:	e38660f0 	orr	r6, r6, #240	; 0xf0

0c000010 <init_fila>:

init_fila:
    cmp r1, #9
 c000010:	e3510009 	cmp	r1, #9
    bge fin_init_fila
 c000014:	aa00000f 	bge	c000058 <fin_init_fila>

    lsl r4, r1, #5					@ Desplazamiento a siguiente fila (r1 * 32 bytes)
 c000018:	e1a04281 	lsl	r4, r1, #5

    mov r2, #0
 c00001c:	e3a02000 	mov	r2, #0

0c000020 <init_columna>:
init_columna:
    cmp r2, #9
 c000020:	e3520009 	cmp	r2, #9
    bge fin_init_columna
 c000024:	aa000009 	bge	c000050 <fin_init_columna>

    lsl r5, r2, #1					@ Desplazamiento a siguiente columna (r2 * 2 bytes)
 c000028:	e1a05082 	lsl	r5, r2, #1

    add r7, r4, r5        			@ Desplazamiento total (fila + columna)
 c00002c:	e0847005 	add	r7, r4, r5

    ldrh r3, [r0, r7]
 c000030:	e19030b7 	ldrh	r3, [r0, r7]

   	and r8, r3, #0x8000				@ Objeter valor de la pista
 c000034:	e2038902 	and	r8, r3, #32768	; 0x8000
	cmp r8, #0x8000					@ Si pista == 1 se omite la inicializacion de candidatos
 c000038:	e3580902 	cmp	r8, #32768	; 0x8000
    bge skip_init
 c00003c:	aa000001 	bge	c000048 <skip_init>

    orr r3, r3, r6        			@ celda |= 0x1FF0 - Activar todos los candidatos
 c000040:	e1833006 	orr	r3, r3, r6
    strh r3, [r0, r7]
 c000044:	e18030b7 	strh	r3, [r0, r7]

0c000048 <skip_init>:

skip_init:
    add r2, r2, #1
 c000048:	e2822001 	add	r2, r2, #1
    b init_columna
 c00004c:	eafffff3 	b	c000020 <init_columna>

0c000050 <fin_init_columna>:

fin_init_columna:
    add r1, r1, #1
 c000050:	e2811001 	add	r1, r1, #1
    b init_fila
 c000054:	eaffffed 	b	c000010 <init_fila>

0c000058 <fin_init_fila>:

fin_init_fila:
	mov r1, #0
 c000058:	e3a01000 	mov	r1, #0
	mov r2, #0
 c00005c:	e3a02000 	mov	r2, #0

	bl sudoku_candidatos_propagar_arm
 c000060:	eb000002 	bl	c000070 <sudoku_candidatos_propagar_arm>
	b fin_init
 c000064:	eaffffff 	b	c000068 <fin_init>

0c000068 <fin_init>:
fin_init:
	pop {r11, r12, lr}
 c000068:	e8bd5800 	pop	{fp, ip, lr}
    bx lr
 c00006c:	e12fff1e 	bx	lr

0c000070 <sudoku_candidatos_propagar_arm>:


@ Recorre la cuadricula llamando a las funciones de propagacion (fila, columna y region) SI la celda tiene un valor distinto a 0
sudoku_candidatos_propagar_arm:
	push {r0, r5, r11, r12, lr}
 c000070:	e92d5821 	push	{r0, r5, fp, ip, lr}
	@ r5 = desplazamiento de la columna
	@ r6 = bit desplazado (se usara para desactivar los candidatos)
	@ r7 = desplazamiento total (r4 + r5)
	@ r10 = contador de celdas vacias
	@ r8-r12 = registros de trabajo
	mov r10, #0
 c000074:	e3a0a000 	mov	sl, #0

0c000078 <loop_i>:
loop_i:
	cmp r1, #9
 c000078:	e3510009 	cmp	r1, #9
	bge loop_i_end
 c00007c:	aa000019 	bge	c0000e8 <loop_i_end>

	lsl r4, r1, #5						@ Desplazamiento a siguiente fila (r1 * 32 bytes)
 c000080:	e1a04281 	lsl	r4, r1, #5

	mov r2, #0
 c000084:	e3a02000 	mov	r2, #0

0c000088 <loop_j>:
loop_j:
	cmp r2, #9
 c000088:	e3520009 	cmp	r2, #9
	bge loop_j_end						@ Comprobar si se ha llegado a la ultima columna
 c00008c:	aa000013 	bge	c0000e0 <loop_j_end>

	lsl r5, r2, #1						@ Desplazamiento a siguiente columna (r2 * 2 bytes)
 c000090:	e1a05082 	lsl	r5, r2, #1

	add r7, r4, r5						@ Desplazamiento total (fila + columna)
 c000094:	e0847005 	add	r7, r4, r5
	ldrh r3, [r0, r7]
 c000098:	e19030b7 	ldrh	r3, [r0, r7]

	and r3, r3, #0xF					@ Objeter valor actual de la celda (celda_leer_valor)
 c00009c:	e203300f 	and	r3, r3, #15
	cmp r3, #0							@ Si valor == 0 se aumentan las celdas vacias y se omite la propagacion
 c0000a0:	e3530000 	cmp	r3, #0
	beq empty_cell
 c0000a4:	0a000009 	beq	c0000d0 <empty_cell>

	add r8, r3, #3						@ r8 = displace = (3 + r3)
 c0000a8:	e2838003 	add	r8, r3, #3
	mov r6, #1
 c0000ac:	e3a06001 	mov	r6, #1
	lsl r6, r6, r8						@ desplazar bit a la izquierda r8 posiciones
 c0000b0:	e1a06816 	lsl	r6, r6, r8

	push {r1, r2, r10, lr}				@ Backup de indices de fila y columna, y el contador de celdas vacias
 c0000b4:	e92d4406 	push	{r1, r2, sl, lr}

	bl arm_update_row_candidates		@ Actualizar filas
 c0000b8:	eb00000d 	bl	c0000f4 <arm_update_row_candidates>

	bl arm_update_column_candidates		@ Actualizar columnas
 c0000bc:	eb000017 	bl	c000120 <arm_update_column_candidates>

	bl arm_calc_region_indexes				@ Calcular indices de la region
 c0000c0:	eb000021 	bl	c00014c <arm_calc_region_indexes>
	bl arm_update_region_candidates		@ Actualizar region
 c0000c4:	eb000033 	bl	c000198 <arm_update_region_candidates>
	pop {r1, r2, r10, lr}				@ Restaurar valor de los indices y las celdas vacias
 c0000c8:	e8bd4406 	pop	{r1, r2, sl, lr}

	b next_column
 c0000cc:	ea000001 	b	c0000d8 <next_column>

0c0000d0 <empty_cell>:

empty_cell:
	add r10, r10, #1
 c0000d0:	e28aa001 	add	sl, sl, #1
	b next_column
 c0000d4:	eaffffff 	b	c0000d8 <next_column>

0c0000d8 <next_column>:

next_column:
	add r2, r2, #1
 c0000d8:	e2822001 	add	r2, r2, #1
	b loop_j
 c0000dc:	eaffffe9 	b	c000088 <loop_j>

0c0000e0 <loop_j_end>:
loop_j_end:
	add r1, r1, #1
 c0000e0:	e2811001 	add	r1, r1, #1
	b loop_i
 c0000e4:	eaffffe3 	b	c000078 <loop_i>

0c0000e8 <loop_i_end>:
loop_i_end:
	pop {r0, r5, r11, r12, lr}			@ Restaurar valor de los punteros a funciones y cuadricula
 c0000e8:	e8bd5821 	pop	{r0, r5, fp, ip, lr}
	mov r0, r10							@ Almacenar el contador de celdas vacias en r0 para devolverse como resultado de la funcion
 c0000ec:	e1a0000a 	mov	r0, sl
	bx lr								@ Devolver el control a la funcion en C
 c0000f0:	e12fff1e 	bx	lr

0c0000f4 <arm_update_row_candidates>:


arm_update_row_candidates:
    mov r8, #0
 c0000f4:	e3a08000 	mov	r8, #0

0c0000f8 <fila_loop>:
fila_loop:
    cmp r8, #9
 c0000f8:	e3580009 	cmp	r8, #9
    bge fin_fila
 c0000fc:	aa000006 	bge	c00011c <fin_fila>

    lsl r9, r8, #5               		@ Desplazar la fila (r8 * 32)
 c000100:	e1a09288 	lsl	r9, r8, #5
    add r10, r9, r5               		@ r10 = desplazamiento total = fila + columna (columna fija para r5)
 c000104:	e089a005 	add	sl, r9, r5

    ldrh r3, [r0, r10]
 c000108:	e19030ba 	ldrh	r3, [r0, sl]

    bic r3, r3, r6               		@ celda &= ~(1 << displace) - Actualizar el bit candidato
 c00010c:	e1c33006 	bic	r3, r3, r6
    strh r3, [r0, r10]
 c000110:	e18030ba 	strh	r3, [r0, sl]

    add r8, r8, #1
 c000114:	e2888001 	add	r8, r8, #1
    b fila_loop
 c000118:	eafffff6 	b	c0000f8 <fila_loop>

0c00011c <fin_fila>:

fin_fila:
    bx lr
 c00011c:	e12fff1e 	bx	lr

0c000120 <arm_update_column_candidates>:

arm_update_column_candidates:
    mov r8, #0
 c000120:	e3a08000 	mov	r8, #0

0c000124 <col_loop>:
col_loop:
    cmp r8, #9
 c000124:	e3580009 	cmp	r8, #9
    bge fin_col
 c000128:	aa000006 	bge	c000148 <fin_col>

    lsl r9, r8, #1               		@ Desplazar la columna (r8 * 2)
 c00012c:	e1a09088 	lsl	r9, r8, #1
    add r10, r4, r9               		@ r10 = desplazamiento total = fila + columna (fila fija para r4)
 c000130:	e084a009 	add	sl, r4, r9

    ldrh r3, [r0, r10]
 c000134:	e19030ba 	ldrh	r3, [r0, sl]

    bic r3, r3, r6               		@ celda &= ~(1 << displace) - Actualizar bit candidato
 c000138:	e1c33006 	bic	r3, r3, r6
    strh r3, [r0, r10]
 c00013c:	e18030ba 	strh	r3, [r0, sl]

    add r8, r8, #1
 c000140:	e2888001 	add	r8, r8, #1
    b col_loop
 c000144:	eafffff6 	b	c000124 <col_loop>

0c000148 <fin_col>:

fin_col:
    bx lr
 c000148:	e12fff1e 	bx	lr

0c00014c <arm_calc_region_indexes>:


arm_calc_region_indexes:
	mov r8, r2
 c00014c:	e1a08002 	mov	r8, r2
	mov r9, #0
 c000150:	e3a09000 	mov	r9, #0

0c000154 <col_index>:
col_index:
	cmp r8, #3
 c000154:	e3580003 	cmp	r8, #3
	blt col_index_end					@ Si es menor a 3, termina el calculo de columna
 c000158:	ba000002 	blt	c000168 <col_index_end>

	sub r8, r8, #3						@ Restas sucesivas para determinar la region de la celda (1°,2° o 3° region horizontal)
 c00015c:	e2488003 	sub	r8, r8, #3
	add r9, r9, #3						@ Aumentar #3 para ubicarse al inicio de la region correspondiente
 c000160:	e2899003 	add	r9, r9, #3
	b col_index
 c000164:	eafffffa 	b	c000154 <col_index>

0c000168 <col_index_end>:
col_index_end:
	mov r2, r9							@ Guardar el indice calculado en r1 (fila)
 c000168:	e1a02009 	mov	r2, r9

	mov r8, r1
 c00016c:	e1a08001 	mov	r8, r1
	mov r9, #0
 c000170:	e3a09000 	mov	r9, #0

0c000174 <row_index>:
row_index:
	cmp r8, #3
 c000174:	e3580003 	cmp	r8, #3
	blt row_index_end					@ Si es menor a 3, termina el calculo de fila
 c000178:	ba000002 	blt	c000188 <row_index_end>

	sub r8, r8, #3						@ Restas sucesivas para determinar la region de la celda (1°,2° o 3° region vertical)
 c00017c:	e2488003 	sub	r8, r8, #3
	add r9, r9, #3						@ Aumentar #3 para ubicarse al inicio de la region correspondiente
 c000180:	e2899003 	add	r9, r9, #3
	b row_index
 c000184:	eafffffa 	b	c000174 <row_index>

0c000188 <row_index_end>:
row_index_end:
	mov r1, r9							@ Guardar el indice calculado en r2 (columna)
 c000188:	e1a01009 	mov	r1, r9

	add r8, r1, #3						@ r8 = Limite superior de la fila
 c00018c:	e2818003 	add	r8, r1, #3
	add r9, r2, #3						@ r9 = Limite superior de la columna
 c000190:	e2829003 	add	r9, r2, #3

	bx lr
 c000194:	e12fff1e 	bx	lr

0c000198 <arm_update_region_candidates>:
	@ r6 = bit e desactivacion desplazado
	@ r8 = limite max region (fila)
	@ r9 = limite max region (columna)

region_row_loop:
	cmp r1, r8
 c000198:	e1510008 	cmp	r1, r8
	bge end_of_region
 c00019c:	aa00000c 	bge	c0001d4 <end_of_region>

0c0001a0 <region_col_loop>:

region_col_loop:
	cmp r2, r9
 c0001a0:	e1520009 	cmp	r2, r9
	bge end_of_column
 c0001a4:	aa000007 	bge	c0001c8 <end_of_column>

	lsl r10, r1, #5						@ Desplazamiento fila (r1 * 32)
 c0001a8:	e1a0a281 	lsl	sl, r1, #5
	lsl r11, r2, #1						@ Desplazamiento columna (r2 * 2)
 c0001ac:	e1a0b082 	lsl	fp, r2, #1
	add r12, r10, r11					@ Desplazamiento total de la celda (fila + columna)
 c0001b0:	e08ac00b 	add	ip, sl, fp

	ldrh r3, [r0, r12]
 c0001b4:	e19030bc 	ldrh	r3, [r0, ip]
	bic r3, r3, r6						@ celda &= ~(1 << displace)
 c0001b8:	e1c33006 	bic	r3, r3, r6
	strh r3, [r0, r12]
 c0001bc:	e18030bc 	strh	r3, [r0, ip]
	add r2, r2, #1
 c0001c0:	e2822001 	add	r2, r2, #1
	b region_col_loop
 c0001c4:	eafffff5 	b	c0001a0 <region_col_loop>

0c0001c8 <end_of_column>:

end_of_column:
	add r1, r1, #1
 c0001c8:	e2811001 	add	r1, r1, #1
	sub r2, r2, #3
 c0001cc:	e2422003 	sub	r2, r2, #3
	b region_row_loop
 c0001d0:	eafffff0 	b	c000198 <arm_update_region_candidates>

0c0001d4 <end_of_region>:

end_of_region:
	bx lr
 c0001d4:	e12fff1e 	bx	lr

0c0001d8 <start>:
start:
.arm    /* indicates that we are using the ARM instruction set */

#------standard initial code
# --- Setup interrupt / exception vectors
      B       Reset_Handler
 c0001d8:	eaffffff 	b	c0001dc <Reset_Handler>

0c0001dc <Reset_Handler>:
# Reset Handler:
# the processor starts executing this code after system reset
################################################################################
Reset_Handler:
#
        MOV     sp, #0x4000      /*  set up stack pointer (r13) */
 c0001dc:	e3a0d901 	mov	sp, #16384	; 0x4000
# If there are 4 or less parameters when calling a C function the compiler
# assumes that they have been stored in r0-r3.
# If there are more parameters you have to store them in the data stack
# using the stack pointer
# function __c_copy is in copy.c
        LDR     r0, =cuadricula  /*  puntero a la @ inicial de la cuadricula */
 c0001e0:	e59f000c 	ldr	r0, [pc, #12]	; c0001f4 <stop+0x4>

.extern     sudoku9x9
        ldr         r5, = sudoku9x9
 c0001e4:	e59f500c 	ldr	r5, [pc, #12]	; c0001f8 <stop+0x8>
        mov         lr, pc
 c0001e8:	e1a0e00f 	mov	lr, pc
        bx          r5
 c0001ec:	e12fff15 	bx	r5

0c0001f0 <stop>:

stop:
        B       stop        /*  end of program */
 c0001f0:	eafffffe 	b	c0001f0 <stop>
 c0001f4:	0c000b40 	.word	0x0c000b40
 c0001f8:	0c000ad4 	.word	0x0c000ad4

0c0001fc <celda_leer_valor>:
}

/* extrae el valor almacenado en los 16 bits de la celda */
static inline uint8_t
celda_leer_valor(CELDA celda)
{
 c0001fc:	e1a0c00d 	mov	ip, sp
 c000200:	e92dd800 	push	{fp, ip, lr, pc}
 c000204:	e24cb004 	sub	fp, ip, #4
 c000208:	e24dd008 	sub	sp, sp, #8
 c00020c:	e1a03000 	mov	r3, r0
 c000210:	e14b30be 	strh	r3, [fp, #-14]
    return (celda & 0x000F);
 c000214:	e15b30be 	ldrh	r3, [fp, #-14]
 c000218:	e20330ff 	and	r3, r3, #255	; 0xff
 c00021c:	e203300f 	and	r3, r3, #15
 c000220:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c000224:	e1a00003 	mov	r0, r3
 c000228:	e24bd00c 	sub	sp, fp, #12
 c00022c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000230:	e12fff1e 	bx	lr

0c000234 <activar_error>:

/* Activa el bit de error en la celda indicada */
static inline void
activar_error(CELDA celda)
{
 c000234:	e1a0c00d 	mov	ip, sp
 c000238:	e92dd800 	push	{fp, ip, lr, pc}
 c00023c:	e24cb004 	sub	fp, ip, #4
 c000240:	e24dd008 	sub	sp, sp, #8
 c000244:	e1a03000 	mov	r3, r0
 c000248:	e14b30be 	strh	r3, [fp, #-14]
	celda = celda |= 0x4000;
 c00024c:	e15b30be 	ldrh	r3, [fp, #-14]
 c000250:	e3833901 	orr	r3, r3, #16384	; 0x4000
 c000254:	e14b30be 	strh	r3, [fp, #-14]
}
 c000258:	e24bd00c 	sub	sp, fp, #12
 c00025c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000260:	e12fff1e 	bx	lr

0c000264 <sudoku_candidatos_propagar_c>:

/* Propaga el valor de una determinada celda para actualizar las listas de candidatos en su fila, columna y region */
void
sudoku_candidatos_propagar_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int fila, int columna, uint8_t valor)
{
 c000264:	e1a0c00d 	mov	ip, sp
 c000268:	e92dd800 	push	{fp, ip, lr, pc}
 c00026c:	e24cb004 	sub	fp, ip, #4
 c000270:	e24dd028 	sub	sp, sp, #40	; 0x28
 c000274:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
 c000278:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
 c00027c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
 c000280:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
	int displace = 3 + (int)valor;
 c000284:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
 c000288:	e2833003 	add	r3, r3, #3
 c00028c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* recorrer cada columna desactivando el candidato de la lista */
    int col = 0;
 c000290:	e3a03000 	mov	r3, #0
 c000294:	e50b3010 	str	r3, [fp, #-16]
    while(col < NUM_COLUMNAS - 7){
 c000298:	ea000021 	b	c000324 <sudoku_candidatos_propagar_c+0xc0>
    	cuadricula[fila][col] &= ~(1 << displace);	// Desactivar el candidato de la lista con una operación NAND
 c00029c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c0002a0:	e1a03283 	lsl	r3, r3, #5
 c0002a4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 c0002a8:	e0821003 	add	r1, r2, r3
 c0002ac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c0002b0:	e1a03283 	lsl	r3, r3, #5
 c0002b4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 c0002b8:	e0822003 	add	r2, r2, r3
 c0002bc:	e51b3010 	ldr	r3, [fp, #-16]
 c0002c0:	e1a03083 	lsl	r3, r3, #1
 c0002c4:	e0823003 	add	r3, r2, r3
 c0002c8:	e1d330b0 	ldrh	r3, [r3]
 c0002cc:	e1a03803 	lsl	r3, r3, #16
 c0002d0:	e1a02823 	lsr	r2, r3, #16
 c0002d4:	e3a00001 	mov	r0, #1
 c0002d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c0002dc:	e1a03310 	lsl	r3, r0, r3
 c0002e0:	e1a03803 	lsl	r3, r3, #16
 c0002e4:	e1a03823 	lsr	r3, r3, #16
 c0002e8:	e1e03003 	mvn	r3, r3
 c0002ec:	e1a03803 	lsl	r3, r3, #16
 c0002f0:	e1a03823 	lsr	r3, r3, #16
 c0002f4:	e0023003 	and	r3, r2, r3
 c0002f8:	e1a03803 	lsl	r3, r3, #16
 c0002fc:	e1a03823 	lsr	r3, r3, #16
 c000300:	e1a03803 	lsl	r3, r3, #16
 c000304:	e1a02823 	lsr	r2, r3, #16
 c000308:	e51b3010 	ldr	r3, [fp, #-16]
 c00030c:	e1a03083 	lsl	r3, r3, #1
 c000310:	e0813003 	add	r3, r1, r3
 c000314:	e1c320b0 	strh	r2, [r3]
    	col++;
 c000318:	e51b3010 	ldr	r3, [fp, #-16]
 c00031c:	e2833001 	add	r3, r3, #1
 c000320:	e50b3010 	str	r3, [fp, #-16]
{
	int displace = 3 + (int)valor;

    /* recorrer cada columna desactivando el candidato de la lista */
    int col = 0;
    while(col < NUM_COLUMNAS - 7){
 c000324:	e51b3010 	ldr	r3, [fp, #-16]
 c000328:	e3530008 	cmp	r3, #8
 c00032c:	daffffda 	ble	c00029c <sudoku_candidatos_propagar_c+0x38>
    	cuadricula[fila][col] &= ~(1 << displace);	// Desactivar el candidato de la lista con una operación NAND
    	col++;
    }

    /* recorrer cada fila desactivando el candidato de la lista */
    int row = 0;
 c000330:	e3a03000 	mov	r3, #0
 c000334:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    while(row < NUM_FILAS){
 c000338:	ea000021 	b	c0003c4 <sudoku_candidatos_propagar_c+0x160>
    	cuadricula[row][columna] &= ~(1 << displace);
 c00033c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000340:	e1a03283 	lsl	r3, r3, #5
 c000344:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 c000348:	e0821003 	add	r1, r2, r3
 c00034c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000350:	e1a03283 	lsl	r3, r3, #5
 c000354:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 c000358:	e0822003 	add	r2, r2, r3
 c00035c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c000360:	e1a03083 	lsl	r3, r3, #1
 c000364:	e0823003 	add	r3, r2, r3
 c000368:	e1d330b0 	ldrh	r3, [r3]
 c00036c:	e1a03803 	lsl	r3, r3, #16
 c000370:	e1a02823 	lsr	r2, r3, #16
 c000374:	e3a00001 	mov	r0, #1
 c000378:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c00037c:	e1a03310 	lsl	r3, r0, r3
 c000380:	e1a03803 	lsl	r3, r3, #16
 c000384:	e1a03823 	lsr	r3, r3, #16
 c000388:	e1e03003 	mvn	r3, r3
 c00038c:	e1a03803 	lsl	r3, r3, #16
 c000390:	e1a03823 	lsr	r3, r3, #16
 c000394:	e0023003 	and	r3, r2, r3
 c000398:	e1a03803 	lsl	r3, r3, #16
 c00039c:	e1a03823 	lsr	r3, r3, #16
 c0003a0:	e1a03803 	lsl	r3, r3, #16
 c0003a4:	e1a02823 	lsr	r2, r3, #16
 c0003a8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c0003ac:	e1a03083 	lsl	r3, r3, #1
 c0003b0:	e0813003 	add	r3, r1, r3
 c0003b4:	e1c320b0 	strh	r2, [r3]
    	row++;
 c0003b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c0003bc:	e2833001 	add	r3, r3, #1
 c0003c0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    	col++;
    }

    /* recorrer cada fila desactivando el candidato de la lista */
    int row = 0;
    while(row < NUM_FILAS){
 c0003c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c0003c8:	e3530008 	cmp	r3, #8
 c0003cc:	daffffda 	ble	c00033c <sudoku_candidatos_propagar_c+0xd8>
    	row++;
    }


    /* Calcular la posicion inicial para cada region 3x3 correspondiente */
    int row_start = (fila / 3) * 3;
 c0003d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c0003d4:	e59f211c 	ldr	r2, [pc, #284]	; c0004f8 <sudoku_candidatos_propagar_c+0x294>
 c0003d8:	e0c21293 	smull	r1, r2, r3, r2
 c0003dc:	e1a03fc3 	asr	r3, r3, #31
 c0003e0:	e0632002 	rsb	r2, r3, r2
 c0003e4:	e1a03002 	mov	r3, r2
 c0003e8:	e1a03083 	lsl	r3, r3, #1
 c0003ec:	e0833002 	add	r3, r3, r2
 c0003f0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    int col_start = (columna / 3) * 3;
 c0003f4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c0003f8:	e59f20f8 	ldr	r2, [pc, #248]	; c0004f8 <sudoku_candidatos_propagar_c+0x294>
 c0003fc:	e0c21293 	smull	r1, r2, r3, r2
 c000400:	e1a03fc3 	asr	r3, r3, #31
 c000404:	e0632002 	rsb	r2, r3, r2
 c000408:	e1a03002 	mov	r3, r2
 c00040c:	e1a03083 	lsl	r3, r3, #1
 c000410:	e0833002 	add	r3, r3, r2
 c000414:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

    /* Recorrer la region desactivando el candidato de la lista */
    row = row_start;
 c000418:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c00041c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    while(row < (row_start + 3)){
 c000420:	ea00002c 	b	c0004d8 <sudoku_candidatos_propagar_c+0x274>
    	int col = col_start;
 c000424:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c000428:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    	while(col < (col_start + 3)){
 c00042c:	ea000021 	b	c0004b8 <sudoku_candidatos_propagar_c+0x254>
    		cuadricula[row][col] &= ~(1 << displace);
 c000430:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000434:	e1a03283 	lsl	r3, r3, #5
 c000438:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 c00043c:	e0821003 	add	r1, r2, r3
 c000440:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000444:	e1a03283 	lsl	r3, r3, #5
 c000448:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 c00044c:	e0822003 	add	r2, r2, r3
 c000450:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000454:	e1a03083 	lsl	r3, r3, #1
 c000458:	e0823003 	add	r3, r2, r3
 c00045c:	e1d330b0 	ldrh	r3, [r3]
 c000460:	e1a03803 	lsl	r3, r3, #16
 c000464:	e1a02823 	lsr	r2, r3, #16
 c000468:	e3a00001 	mov	r0, #1
 c00046c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c000470:	e1a03310 	lsl	r3, r0, r3
 c000474:	e1a03803 	lsl	r3, r3, #16
 c000478:	e1a03823 	lsr	r3, r3, #16
 c00047c:	e1e03003 	mvn	r3, r3
 c000480:	e1a03803 	lsl	r3, r3, #16
 c000484:	e1a03823 	lsr	r3, r3, #16
 c000488:	e0023003 	and	r3, r2, r3
 c00048c:	e1a03803 	lsl	r3, r3, #16
 c000490:	e1a03823 	lsr	r3, r3, #16
 c000494:	e1a03803 	lsl	r3, r3, #16
 c000498:	e1a02823 	lsr	r2, r3, #16
 c00049c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c0004a0:	e1a03083 	lsl	r3, r3, #1
 c0004a4:	e0813003 	add	r3, r1, r3
 c0004a8:	e1c320b0 	strh	r2, [r3]
    		col++;
 c0004ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c0004b0:	e2833001 	add	r3, r3, #1
 c0004b4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    /* Recorrer la region desactivando el candidato de la lista */
    row = row_start;
    while(row < (row_start + 3)){
    	int col = col_start;
    	while(col < (col_start + 3)){
 c0004b8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c0004bc:	e2832003 	add	r2, r3, #3
 c0004c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c0004c4:	e1520003 	cmp	r2, r3
 c0004c8:	caffffd8 	bgt	c000430 <sudoku_candidatos_propagar_c+0x1cc>
    		cuadricula[row][col] &= ~(1 << displace);
    		col++;
    	}
    	row++;
 c0004cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c0004d0:	e2833001 	add	r3, r3, #1
 c0004d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int row_start = (fila / 3) * 3;
    int col_start = (columna / 3) * 3;

    /* Recorrer la region desactivando el candidato de la lista */
    row = row_start;
    while(row < (row_start + 3)){
 c0004d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c0004dc:	e2832003 	add	r2, r3, #3
 c0004e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c0004e4:	e1520003 	cmp	r2, r3
 c0004e8:	caffffcd 	bgt	c000424 <sudoku_candidatos_propagar_c+0x1c0>
    		cuadricula[row][col] &= ~(1 << displace);
    		col++;
    	}
    	row++;
    }
}
 c0004ec:	e24bd00c 	sub	sp, fp, #12
 c0004f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c0004f4:	e12fff1e 	bx	lr
 c0004f8:	55555556 	.word	0x55555556

0c0004fc <init_candidatos>:

/* Recorrer la cuadricula inicializando los candidatos de las celdas */
void
init_candidatos(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]){
 c0004fc:	e1a0c00d 	mov	ip, sp
 c000500:	e92dd800 	push	{fp, ip, lr, pc}
 c000504:	e24cb004 	sub	fp, ip, #4
 c000508:	e24dd018 	sub	sp, sp, #24
 c00050c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	int row=0;
 c000510:	e3a03000 	mov	r3, #0
 c000514:	e50b3010 	str	r3, [fp, #-16]
	while(row < NUM_FILAS){
 c000518:	ea00002c 	b	c0005d0 <init_candidatos+0xd4>
		int col=0;
 c00051c:	e3a03000 	mov	r3, #0
 c000520:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		while(col < NUM_COLUMNAS - 7){
 c000524:	ea000023 	b	c0005b8 <init_candidatos+0xbc>

			int pista = cuadricula[row][col] & 0x8000;
 c000528:	e51b3010 	ldr	r3, [fp, #-16]
 c00052c:	e1a03283 	lsl	r3, r3, #5
 c000530:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c000534:	e0822003 	add	r2, r2, r3
 c000538:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c00053c:	e1a03083 	lsl	r3, r3, #1
 c000540:	e0823003 	add	r3, r2, r3
 c000544:	e1d330b0 	ldrh	r3, [r3]
 c000548:	e2033902 	and	r3, r3, #32768	; 0x8000
 c00054c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			if(pista == 0){
 c000550:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000554:	e3530000 	cmp	r3, #0
 c000558:	1a000013 	bne	c0005ac <init_candidatos+0xb0>
				cuadricula[row][col] |= 0x1FF0;
 c00055c:	e51b3010 	ldr	r3, [fp, #-16]
 c000560:	e1a03283 	lsl	r3, r3, #5
 c000564:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c000568:	e0821003 	add	r1, r2, r3
 c00056c:	e51b3010 	ldr	r3, [fp, #-16]
 c000570:	e1a03283 	lsl	r3, r3, #5
 c000574:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c000578:	e0822003 	add	r2, r2, r3
 c00057c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000580:	e1a03083 	lsl	r3, r3, #1
 c000584:	e0823003 	add	r3, r2, r3
 c000588:	e1d330b0 	ldrh	r3, [r3]
 c00058c:	e3833d7f 	orr	r3, r3, #8128	; 0x1fc0
 c000590:	e3833030 	orr	r3, r3, #48	; 0x30
 c000594:	e1a03803 	lsl	r3, r3, #16
 c000598:	e1a02823 	lsr	r2, r3, #16
 c00059c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c0005a0:	e1a03083 	lsl	r3, r3, #1
 c0005a4:	e0813003 	add	r3, r1, r3
 c0005a8:	e1c320b0 	strh	r2, [r3]
			}
			col++;
 c0005ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c0005b0:	e2833001 	add	r3, r3, #1
 c0005b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
void
init_candidatos(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]){
	int row=0;
	while(row < NUM_FILAS){
		int col=0;
		while(col < NUM_COLUMNAS - 7){
 c0005b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c0005bc:	e3530008 	cmp	r3, #8
 c0005c0:	daffffd8 	ble	c000528 <init_candidatos+0x2c>
			if(pista == 0){
				cuadricula[row][col] |= 0x1FF0;
			}
			col++;
		}
		row++;
 c0005c4:	e51b3010 	ldr	r3, [fp, #-16]
 c0005c8:	e2833001 	add	r3, r3, #1
 c0005cc:	e50b3010 	str	r3, [fp, #-16]

/* Recorrer la cuadricula inicializando los candidatos de las celdas */
void
init_candidatos(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]){
	int row=0;
	while(row < NUM_FILAS){
 c0005d0:	e51b3010 	ldr	r3, [fp, #-16]
 c0005d4:	e3530008 	cmp	r3, #8
 c0005d8:	daffffcf 	ble	c00051c <init_candidatos+0x20>
			}
			col++;
		}
		row++;
	}
}
 c0005dc:	e24bd00c 	sub	sp, fp, #12
 c0005e0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c0005e4:	e12fff1e 	bx	lr

0c0005e8 <propagar_if_value>:

// Recorrer la cuadricula aumentando la cantidad de celdas vacias (valor 0) y llamando a la funcion para propagar (si existe un valor)
void
propagar_if_value(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int *celdas_vacias){
 c0005e8:	e1a0c00d 	mov	ip, sp
 c0005ec:	e92dd800 	push	{fp, ip, lr, pc}
 c0005f0:	e24cb004 	sub	fp, ip, #4
 c0005f4:	e24dd018 	sub	sp, sp, #24
 c0005f8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c0005fc:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
	int row=0;
 c000600:	e3a03000 	mov	r3, #0
 c000604:	e50b3010 	str	r3, [fp, #-16]
	while(row < NUM_FILAS){
 c000608:	ea000025 	b	c0006a4 <propagar_if_value+0xbc>
		int col=0;
 c00060c:	e3a03000 	mov	r3, #0
 c000610:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		while(col < NUM_COLUMNAS - 7){
 c000614:	ea00001c 	b	c00068c <propagar_if_value+0xa4>
			uint8_t valor_actual = celda_leer_valor(cuadricula[row][col]);
 c000618:	e51b3010 	ldr	r3, [fp, #-16]
 c00061c:	e1a03283 	lsl	r3, r3, #5
 c000620:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c000624:	e0822003 	add	r2, r2, r3
 c000628:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c00062c:	e1a03083 	lsl	r3, r3, #1
 c000630:	e0823003 	add	r3, r2, r3
 c000634:	e1d330b0 	ldrh	r3, [r3]
 c000638:	e1a00003 	mov	r0, r3
 c00063c:	ebfffeee 	bl	c0001fc <celda_leer_valor>
 c000640:	e1a03000 	mov	r3, r0
 c000644:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
			if(valor_actual == 0x0000){
 c000648:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c00064c:	e3530000 	cmp	r3, #0
 c000650:	1a000005 	bne	c00066c <propagar_if_value+0x84>
				(*celdas_vacias)++;
 c000654:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c000658:	e5933000 	ldr	r3, [r3]
 c00065c:	e2832001 	add	r2, r3, #1
 c000660:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c000664:	e5832000 	str	r2, [r3]
 c000668:	ea000004 	b	c000680 <propagar_if_value+0x98>
			} else {
				sudoku_candidatos_propagar_c(cuadricula, row, col, valor_actual);
 c00066c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c000670:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c000674:	e51b1010 	ldr	r1, [fp, #-16]
 c000678:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c00067c:	ebfffef8 	bl	c000264 <sudoku_candidatos_propagar_c>
			}
			col++;
 c000680:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000684:	e2833001 	add	r3, r3, #1
 c000688:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
void
propagar_if_value(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int *celdas_vacias){
	int row=0;
	while(row < NUM_FILAS){
		int col=0;
		while(col < NUM_COLUMNAS - 7){
 c00068c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000690:	e3530008 	cmp	r3, #8
 c000694:	daffffdf 	ble	c000618 <propagar_if_value+0x30>
			} else {
				sudoku_candidatos_propagar_c(cuadricula, row, col, valor_actual);
			}
			col++;
		}
		row++;
 c000698:	e51b3010 	ldr	r3, [fp, #-16]
 c00069c:	e2833001 	add	r3, r3, #1
 c0006a0:	e50b3010 	str	r3, [fp, #-16]

// Recorrer la cuadricula aumentando la cantidad de celdas vacias (valor 0) y llamando a la funcion para propagar (si existe un valor)
void
propagar_if_value(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int *celdas_vacias){
	int row=0;
	while(row < NUM_FILAS){
 c0006a4:	e51b3010 	ldr	r3, [fp, #-16]
 c0006a8:	e3530008 	cmp	r3, #8
 c0006ac:	daffffd6 	ble	c00060c <propagar_if_value+0x24>
			}
			col++;
		}
		row++;
	}
}
 c0006b0:	e24bd00c 	sub	sp, fp, #12
 c0006b4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c0006b8:	e12fff1e 	bx	lr

0c0006bc <sudoku_candidatos_init_c>:
 * calcula todas las listas de candidatos (9x9)
 * necesario tras borrar o cambiar un valor (listas corrompidas)
 * retorna el numero de celdas vacias */
static int
sudoku_candidatos_init_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS])
{
 c0006bc:	e1a0c00d 	mov	ip, sp
 c0006c0:	e92dd800 	push	{fp, ip, lr, pc}
 c0006c4:	e24cb004 	sub	fp, ip, #4
 c0006c8:	e24dd010 	sub	sp, sp, #16
 c0006cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    uint8_t valor_inicial = celda_leer_valor(cuadricula[0][0]);
 c0006d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c0006d4:	e1d330b0 	ldrh	r3, [r3]
 c0006d8:	e1a00003 	mov	r0, r3
 c0006dc:	ebfffec6 	bl	c0001fc <celda_leer_valor>
 c0006e0:	e1a03000 	mov	r3, r0
 c0006e4:	e54b300d 	strb	r3, [fp, #-13]
 	int celdas_vacias = 0;
 c0006e8:	e3a03000 	mov	r3, #0
 c0006ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    init_candidatos(cuadricula);
 c0006f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c0006f4:	ebffff80 	bl	c0004fc <init_candidatos>

 	char version_propagar = 'A';
 c0006f8:	e3a03041 	mov	r3, #65	; 0x41
 c0006fc:	e54b300e 	strb	r3, [fp, #-14]

    /* Tres configuraciones para *propagar* */
 	if(version_propagar == 'C'){
 c000700:	e55b300e 	ldrb	r3, [fp, #-14]
 c000704:	e3530043 	cmp	r3, #67	; 0x43
 c000708:	1a000003 	bne	c00071c <sudoku_candidatos_init_c+0x60>
    	propagar_if_value(cuadricula, &celdas_vacias);
 c00070c:	e24b3014 	sub	r3, fp, #20
 c000710:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c000714:	e1a01003 	mov	r1, r3
 c000718:	ebffffb2 	bl	c0005e8 <propagar_if_value>
 	}

 	if(version_propagar == 'A'){
 c00071c:	e55b300e 	ldrb	r3, [fp, #-14]
 c000720:	e3530041 	cmp	r3, #65	; 0x41
 c000724:	1a000006 	bne	c000744 <sudoku_candidatos_init_c+0x88>
    	celdas_vacias = sudoku_candidatos_propagar_arm(cuadricula, 0, 0, valor_inicial);
 c000728:	e55b300d 	ldrb	r3, [fp, #-13]
 c00072c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c000730:	e3a01000 	mov	r1, #0
 c000734:	e3a02000 	mov	r2, #0
 c000738:	ebfffe4c 	bl	c000070 <sudoku_candidatos_propagar_arm>
 c00073c:	e1a03000 	mov	r3, r0
 c000740:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 	}

    return celdas_vacias;
 c000744:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
 c000748:	e1a00003 	mov	r0, r3
 c00074c:	e24bd00c 	sub	sp, fp, #12
 c000750:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000754:	e12fff1e 	bx	lr

0c000758 <cuadricula_candidatos_verificar>:

static void
cuadricula_candidatos_verificar(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS],int row, int col, int *errors){
 c000758:	e1a0c00d 	mov	ip, sp
 c00075c:	e92dd800 	push	{fp, ip, lr, pc}
 c000760:	e24cb004 	sub	fp, ip, #4
 c000764:	e24dd038 	sub	sp, sp, #56	; 0x38
 c000768:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
 c00076c:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
 c000770:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
 c000774:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc

	uint8_t valor = celda_leer_valor(cuadricula[row][col]);
 c000778:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
 c00077c:	e1a03283 	lsl	r3, r3, #5
 c000780:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 c000784:	e0822003 	add	r2, r2, r3
 c000788:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
 c00078c:	e1a03083 	lsl	r3, r3, #1
 c000790:	e0823003 	add	r3, r2, r3
 c000794:	e1d330b0 	ldrh	r3, [r3]
 c000798:	e1a00003 	mov	r0, r3
 c00079c:	ebfffe96 	bl	c0001fc <celda_leer_valor>
 c0007a0:	e1a03000 	mov	r3, r0
 c0007a4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

	/* Si el valor es distinto de 0, revisa que se haya propagado correctamente (el candidato correspondiente debe estar desactivado) */
	if(valor != 0x0000){
 c0007a8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c0007ac:	e3530000 	cmp	r3, #0
 c0007b0:	0a0000a2 	beq	c000a40 <cuadricula_candidatos_verificar+0x2e8>
		int displace = 3 + (int)valor;
 c0007b4:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c0007b8:	e2833003 	add	r3, r3, #3
 c0007bc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

		/* Verificar el valor en todas las columnas (Horizontal) */
		int j = 0;
 c0007c0:	e3a03000 	mov	r3, #0
 c0007c4:	e50b3010 	str	r3, [fp, #-16]
		while(j < NUM_COLUMNAS - 7){
 c0007c8:	ea000024 	b	c000860 <cuadricula_candidatos_verificar+0x108>
			uint8_t is_bit_set = cuadricula[row][j] & (1 << displace);
 c0007cc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
 c0007d0:	e1a03283 	lsl	r3, r3, #5
 c0007d4:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 c0007d8:	e0822003 	add	r2, r2, r3
 c0007dc:	e51b3010 	ldr	r3, [fp, #-16]
 c0007e0:	e1a03083 	lsl	r3, r3, #1
 c0007e4:	e0823003 	add	r3, r2, r3
 c0007e8:	e1d330b0 	ldrh	r3, [r3]
 c0007ec:	e20320ff 	and	r2, r3, #255	; 0xff
 c0007f0:	e3a01001 	mov	r1, #1
 c0007f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c0007f8:	e1a03311 	lsl	r3, r1, r3
 c0007fc:	e20330ff 	and	r3, r3, #255	; 0xff
 c000800:	e0023003 	and	r3, r2, r3
 c000804:	e20330ff 	and	r3, r3, #255	; 0xff
 c000808:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
			if(is_bit_set){
 c00080c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c000810:	e3530000 	cmp	r3, #0
 c000814:	0a00000e 	beq	c000854 <cuadricula_candidatos_verificar+0xfc>
				activar_error(cuadricula[row][j]);
 c000818:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
 c00081c:	e1a03283 	lsl	r3, r3, #5
 c000820:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 c000824:	e0822003 	add	r2, r2, r3
 c000828:	e51b3010 	ldr	r3, [fp, #-16]
 c00082c:	e1a03083 	lsl	r3, r3, #1
 c000830:	e0823003 	add	r3, r2, r3
 c000834:	e1d330b0 	ldrh	r3, [r3]
 c000838:	e1a00003 	mov	r0, r3
 c00083c:	ebfffe7c 	bl	c000234 <activar_error>
				(*errors)++;
 c000840:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
 c000844:	e5933000 	ldr	r3, [r3]
 c000848:	e2832001 	add	r2, r3, #1
 c00084c:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
 c000850:	e5832000 	str	r2, [r3]
			}
			j++;
 c000854:	e51b3010 	ldr	r3, [fp, #-16]
 c000858:	e2833001 	add	r3, r3, #1
 c00085c:	e50b3010 	str	r3, [fp, #-16]
	if(valor != 0x0000){
		int displace = 3 + (int)valor;

		/* Verificar el valor en todas las columnas (Horizontal) */
		int j = 0;
		while(j < NUM_COLUMNAS - 7){
 c000860:	e51b3010 	ldr	r3, [fp, #-16]
 c000864:	e3530008 	cmp	r3, #8
 c000868:	daffffd7 	ble	c0007cc <cuadricula_candidatos_verificar+0x74>
			}
			j++;
		}

		/* Verificar el valor en todas las filas (Vertical) */
		int i = 0;
 c00086c:	e3a03000 	mov	r3, #0
 c000870:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		while(i < NUM_FILAS){
 c000874:	ea000024 	b	c00090c <cuadricula_candidatos_verificar+0x1b4>
			uint8_t is_bit_set = cuadricula[i][col] & (1 << displace);
 c000878:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c00087c:	e1a03283 	lsl	r3, r3, #5
 c000880:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 c000884:	e0822003 	add	r2, r2, r3
 c000888:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
 c00088c:	e1a03083 	lsl	r3, r3, #1
 c000890:	e0823003 	add	r3, r2, r3
 c000894:	e1d330b0 	ldrh	r3, [r3]
 c000898:	e20320ff 	and	r2, r3, #255	; 0xff
 c00089c:	e3a01001 	mov	r1, #1
 c0008a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c0008a4:	e1a03311 	lsl	r3, r1, r3
 c0008a8:	e20330ff 	and	r3, r3, #255	; 0xff
 c0008ac:	e0023003 	and	r3, r2, r3
 c0008b0:	e20330ff 	and	r3, r3, #255	; 0xff
 c0008b4:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
			if(is_bit_set){
 c0008b8:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
 c0008bc:	e3530000 	cmp	r3, #0
 c0008c0:	0a00000e 	beq	c000900 <cuadricula_candidatos_verificar+0x1a8>
				activar_error(cuadricula[i][col]);
 c0008c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c0008c8:	e1a03283 	lsl	r3, r3, #5
 c0008cc:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 c0008d0:	e0822003 	add	r2, r2, r3
 c0008d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
 c0008d8:	e1a03083 	lsl	r3, r3, #1
 c0008dc:	e0823003 	add	r3, r2, r3
 c0008e0:	e1d330b0 	ldrh	r3, [r3]
 c0008e4:	e1a00003 	mov	r0, r3
 c0008e8:	ebfffe51 	bl	c000234 <activar_error>
				(*errors)++;
 c0008ec:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
 c0008f0:	e5933000 	ldr	r3, [r3]
 c0008f4:	e2832001 	add	r2, r3, #1
 c0008f8:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
 c0008fc:	e5832000 	str	r2, [r3]
			}
			i++;
 c000900:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000904:	e2833001 	add	r3, r3, #1
 c000908:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			j++;
		}

		/* Verificar el valor en todas las filas (Vertical) */
		int i = 0;
		while(i < NUM_FILAS){
 c00090c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000910:	e3530008 	cmp	r3, #8
 c000914:	daffffd7 	ble	c000878 <cuadricula_candidatos_verificar+0x120>
			}
			i++;
		}

		/* Calcular la posicion inicial para seccion correspondiente a la ubicacion actual */
		int row_start = (row / 3) * 3;
 c000918:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
 c00091c:	e59f2128 	ldr	r2, [pc, #296]	; c000a4c <cuadricula_candidatos_verificar+0x2f4>
 c000920:	e0c21293 	smull	r1, r2, r3, r2
 c000924:	e1a03fc3 	asr	r3, r3, #31
 c000928:	e0632002 	rsb	r2, r3, r2
 c00092c:	e1a03002 	mov	r3, r2
 c000930:	e1a03083 	lsl	r3, r3, #1
 c000934:	e0833002 	add	r3, r3, r2
 c000938:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
		int col_start = (col / 3) * 3;
 c00093c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
 c000940:	e59f2104 	ldr	r2, [pc, #260]	; c000a4c <cuadricula_candidatos_verificar+0x2f4>
 c000944:	e0c21293 	smull	r1, r2, r3, r2
 c000948:	e1a03fc3 	asr	r3, r3, #31
 c00094c:	e0632002 	rsb	r2, r3, r2
 c000950:	e1a03002 	mov	r3, r2
 c000954:	e1a03083 	lsl	r3, r3, #1
 c000958:	e0833002 	add	r3, r3, r2
 c00095c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

		/* Verificar valor en la seccion (cuadro 3x3) */
		i = row_start;
 c000960:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c000964:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		while(i < (row_start + 3)){
 c000968:	ea00002f 	b	c000a2c <cuadricula_candidatos_verificar+0x2d4>
			int j = col_start;
 c00096c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c000970:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			while(j < (col_start + 3)){
 c000974:	ea000024 	b	c000a0c <cuadricula_candidatos_verificar+0x2b4>
				uint8_t is_bit_set = cuadricula[i][j] & (1 << displace);
 c000978:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c00097c:	e1a03283 	lsl	r3, r3, #5
 c000980:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 c000984:	e0822003 	add	r2, r2, r3
 c000988:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c00098c:	e1a03083 	lsl	r3, r3, #1
 c000990:	e0823003 	add	r3, r2, r3
 c000994:	e1d330b0 	ldrh	r3, [r3]
 c000998:	e20320ff 	and	r2, r3, #255	; 0xff
 c00099c:	e3a01001 	mov	r1, #1
 c0009a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c0009a4:	e1a03311 	lsl	r3, r1, r3
 c0009a8:	e20330ff 	and	r3, r3, #255	; 0xff
 c0009ac:	e0023003 	and	r3, r2, r3
 c0009b0:	e20330ff 	and	r3, r3, #255	; 0xff
 c0009b4:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3
				if(is_bit_set){
 c0009b8:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
 c0009bc:	e3530000 	cmp	r3, #0
 c0009c0:	0a00000e 	beq	c000a00 <cuadricula_candidatos_verificar+0x2a8>
					activar_error(cuadricula[i][j]);
 c0009c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c0009c8:	e1a03283 	lsl	r3, r3, #5
 c0009cc:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
 c0009d0:	e0822003 	add	r2, r2, r3
 c0009d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c0009d8:	e1a03083 	lsl	r3, r3, #1
 c0009dc:	e0823003 	add	r3, r2, r3
 c0009e0:	e1d330b0 	ldrh	r3, [r3]
 c0009e4:	e1a00003 	mov	r0, r3
 c0009e8:	ebfffe11 	bl	c000234 <activar_error>
					(*errors)++;
 c0009ec:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
 c0009f0:	e5933000 	ldr	r3, [r3]
 c0009f4:	e2832001 	add	r2, r3, #1
 c0009f8:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
 c0009fc:	e5832000 	str	r2, [r3]
				}
				j++;
 c000a00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000a04:	e2833001 	add	r3, r3, #1
 c000a08:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

		/* Verificar valor en la seccion (cuadro 3x3) */
		i = row_start;
		while(i < (row_start + 3)){
			int j = col_start;
			while(j < (col_start + 3)){
 c000a0c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c000a10:	e2832003 	add	r2, r3, #3
 c000a14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c000a18:	e1520003 	cmp	r2, r3
 c000a1c:	caffffd5 	bgt	c000978 <cuadricula_candidatos_verificar+0x220>
					activar_error(cuadricula[i][j]);
					(*errors)++;
				}
				j++;
			}
			i++;
 c000a20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000a24:	e2833001 	add	r3, r3, #1
 c000a28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		int row_start = (row / 3) * 3;
		int col_start = (col / 3) * 3;

		/* Verificar valor en la seccion (cuadro 3x3) */
		i = row_start;
		while(i < (row_start + 3)){
 c000a2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c000a30:	e2832003 	add	r2, r3, #3
 c000a34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000a38:	e1520003 	cmp	r2, r3
 c000a3c:	caffffca 	bgt	c00096c <cuadricula_candidatos_verificar+0x214>
				j++;
			}
			i++;
		}
	}
}
 c000a40:	e24bd00c 	sub	sp, fp, #12
 c000a44:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000a48:	e12fff1e 	bx	lr
 c000a4c:	55555556 	.word	0x55555556

0c000a50 <verificar_lista_calculada>:

/* Recorre la cuadricula y para cada celda llama a cuadricula_candidatos_verificar */
static void
verificar_lista_calculada(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]){
 c000a50:	e1a0c00d 	mov	ip, sp
 c000a54:	e92dd800 	push	{fp, ip, lr, pc}
 c000a58:	e24cb004 	sub	fp, ip, #4
 c000a5c:	e24dd018 	sub	sp, sp, #24
 c000a60:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	int errors = 0;
 c000a64:	e3a03000 	mov	r3, #0
 c000a68:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	    int row = 0;
 c000a6c:	e3a03000 	mov	r3, #0
 c000a70:	e50b3010 	str	r3, [fp, #-16]
	    while(row < NUM_FILAS){
 c000a74:	ea000010 	b	c000abc <verificar_lista_calculada+0x6c>
			int col = 0;
 c000a78:	e3a03000 	mov	r3, #0
 c000a7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	    	while(col < NUM_COLUMNAS - 7){
 c000a80:	ea000007 	b	c000aa4 <verificar_lista_calculada+0x54>
	    		cuadricula_candidatos_verificar(cuadricula, row, col, &errors);
 c000a84:	e24b3018 	sub	r3, fp, #24
 c000a88:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c000a8c:	e51b1010 	ldr	r1, [fp, #-16]
 c000a90:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c000a94:	ebffff2f 	bl	c000758 <cuadricula_candidatos_verificar>
	    		col++;
 c000a98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000a9c:	e2833001 	add	r3, r3, #1
 c000aa0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
verificar_lista_calculada(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]){
	int errors = 0;
	    int row = 0;
	    while(row < NUM_FILAS){
			int col = 0;
	    	while(col < NUM_COLUMNAS - 7){
 c000aa4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c000aa8:	e3530008 	cmp	r3, #8
 c000aac:	dafffff4 	ble	c000a84 <verificar_lista_calculada+0x34>
	    		cuadricula_candidatos_verificar(cuadricula, row, col, &errors);
	    		col++;
	    	}
	    	row++;
 c000ab0:	e51b3010 	ldr	r3, [fp, #-16]
 c000ab4:	e2833001 	add	r3, r3, #1
 c000ab8:	e50b3010 	str	r3, [fp, #-16]
/* Recorre la cuadricula y para cada celda llama a cuadricula_candidatos_verificar */
static void
verificar_lista_calculada(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]){
	int errors = 0;
	    int row = 0;
	    while(row < NUM_FILAS){
 c000abc:	e51b3010 	ldr	r3, [fp, #-16]
 c000ac0:	e3530008 	cmp	r3, #8
 c000ac4:	daffffeb 	ble	c000a78 <verificar_lista_calculada+0x28>
	    		cuadricula_candidatos_verificar(cuadricula, row, col, &errors);
	    		col++;
	    	}
	    	row++;
	    }
}
 c000ac8:	e24bd00c 	sub	sp, fp, #12
 c000acc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000ad0:	e12fff1e 	bx	lr

0c000ad4 <sudoku9x9>:
/* *******************************************cuadricula[NUM_FILAS][NUM_COLUMNAS]**********************************
 * programa principal del juego que recibe el tablero,
 * y la senyal de ready que indica que se han actualizado fila y columna */
void
sudoku9x9(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], char *ready)
{
 c000ad4:	e1a0c00d 	mov	ip, sp
 c000ad8:	e92dd800 	push	{fp, ip, lr, pc}
 c000adc:	e24cb004 	sub	fp, ip, #4
 c000ae0:	e24dd010 	sub	sp, sp, #16
 c000ae4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c000ae8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int celdas_vacias;
    char version_init = 'C';
 c000aec:	e3a03043 	mov	r3, #67	; 0x43
 c000af0:	e54b300d 	strb	r3, [fp, #-13]

    // Dos configuraciones para *init*
    if(version_init == 'C'){
 c000af4:	e55b300d 	ldrb	r3, [fp, #-13]
 c000af8:	e3530043 	cmp	r3, #67	; 0x43
 c000afc:	1a000002 	bne	c000b0c <sudoku9x9+0x38>
    	celdas_vacias = sudoku_candidatos_init_c(cuadricula);
 c000b00:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c000b04:	ebfffeec 	bl	c0006bc <sudoku_candidatos_init_c>
 c000b08:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    }
    if(version_init == 'A'){
 c000b0c:	e55b300d 	ldrb	r3, [fp, #-13]
 c000b10:	e3530041 	cmp	r3, #65	; 0x41
 c000b14:	1a000002 	bne	c000b24 <sudoku9x9+0x50>
    	celdas_vacias = sudoku_candidatos_init_arm(cuadricula);
 c000b18:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c000b1c:	ebfffd37 	bl	c000000 <sudoku_candidatos_init_arm>
 c000b20:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    }

    /* verificar que la lista de candidatos calculada es correcta */
    verificar_lista_calculada(cuadricula);
 c000b24:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c000b28:	ebffffc8 	bl	c000a50 <verificar_lista_calculada>
    /* repetir para otras versiones (C optimizado, ARM, THUMB) */
}
 c000b2c:	e24bd00c 	sub	sp, fp, #12
 c000b30:	e89d6800 	ldm	sp, {fp, sp, lr}
 c000b34:	e12fff1e 	bx	lr
