   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"sudoku_2024.c"
  21              	.Ltext0:
  22              		.file 1 "../sudoku_2024.c"
 2817              		.align	2
 2819              	celda_leer_valor:
 2820              	.LFB1:
   1:../sudoku_2024.c **** #include "sudoku_2024.h"
   2:../sudoku_2024.c **** #include <stdio.h>
   3:../sudoku_2024.c **** #include <stdlib.h>
   4:../sudoku_2024.c **** 
   5:../sudoku_2024.c **** //extern void
   6:../sudoku_2024.c **** //sudoku_candidatos_propagar_arm(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], uint8_t fila, uint8_t c
   7:../sudoku_2024.c **** /* *****************************************************************************
   8:../sudoku_2024.c ****  * Funciones privadas (static)
   9:../sudoku_2024.c ****  * (no pueden ser invocadas desde otro fichero) */
  10:../sudoku_2024.c ****  
  11:../sudoku_2024.c **** /* *****************************************************************************
  12:../sudoku_2024.c ****  * modifica el valor almacenado en la celda indicada */
  13:../sudoku_2024.c **** static inline void
  14:../sudoku_2024.c **** celda_poner_valor(CELDA *celdaptr, uint8_t val)
  15:../sudoku_2024.c **** {
  16:../sudoku_2024.c ****     *celdaptr = (*celdaptr & 0xFFF0) | (val & 0x000F);
  17:../sudoku_2024.c **** }
  18:../sudoku_2024.c **** 
  19:../sudoku_2024.c **** /* *****************************************************************************
  20:../sudoku_2024.c ****  * extrae el valor almacenado en los 16 bits de una celda */
  21:../sudoku_2024.c **** static inline uint8_t
  22:../sudoku_2024.c **** celda_leer_valor(CELDA celda)
  23:../sudoku_2024.c **** {
 2821              		.loc 1 23 0
 2822              		.cfi_startproc
 2823              		@ Function supports interworking.
 2824              		@ args = 0, pretend = 0, frame = 8
 2825              		@ frame_needed = 1, uses_anonymous_args = 0
 2826 0000 0DC0A0E1 		mov	ip, sp
 2827              	.LCFI0:
 2828              		.cfi_def_cfa_register 12
 2829 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2830 0008 04B04CE2 		sub	fp, ip, #4
 2831              		.cfi_offset 14, -8
 2832              		.cfi_offset 13, -12
 2833              		.cfi_offset 11, -16
 2834              	.LCFI1:
 2835              		.cfi_def_cfa 11, 4
 2836 000c 08D04DE2 		sub	sp, sp, #8
 2837 0010 0030A0E1 		mov	r3, r0
 2838 0014 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  24:../sudoku_2024.c ****     return (celda & 0x000F);
 2839              		.loc 1 24 0
 2840 0018 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2841 001c FF3003E2 		and	r3, r3, #255
 2842 0020 0F3003E2 		and	r3, r3, #15
 2843 0024 FF3003E2 		and	r3, r3, #255
  25:../sudoku_2024.c **** }
 2844              		.loc 1 25 0
 2845 0028 0300A0E1 		mov	r0, r3
 2846 002c 0CD04BE2 		sub	sp, fp, #12
 2847 0030 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2848 0034 1EFF2FE1 		bx	lr
 2849              		.cfi_endproc
 2850              	.LFE1:
 2852              		.align	2
 2854              	activar_error:
 2855              	.LFB2:
  26:../sudoku_2024.c **** 
  27:../sudoku_2024.c **** static inline void
  28:../sudoku_2024.c **** activar_error(CELDA celda)
  29:../sudoku_2024.c **** {
 2856              		.loc 1 29 0
 2857              		.cfi_startproc
 2858              		@ Function supports interworking.
 2859              		@ args = 0, pretend = 0, frame = 8
 2860              		@ frame_needed = 1, uses_anonymous_args = 0
 2861 0038 0DC0A0E1 		mov	ip, sp
 2862              	.LCFI2:
 2863              		.cfi_def_cfa_register 12
 2864 003c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2865 0040 04B04CE2 		sub	fp, ip, #4
 2866              		.cfi_offset 14, -8
 2867              		.cfi_offset 13, -12
 2868              		.cfi_offset 11, -16
 2869              	.LCFI3:
 2870              		.cfi_def_cfa 11, 4
 2871 0044 08D04DE2 		sub	sp, sp, #8
 2872 0048 0030A0E1 		mov	r3, r0
 2873 004c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  30:../sudoku_2024.c **** 	celda = celda |= 0x4000;
 2874              		.loc 1 30 0
 2875 0050 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2876 0054 013983E3 		orr	r3, r3, #16384
 2877 0058 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  31:../sudoku_2024.c **** }
 2878              		.loc 1 31 0
 2879 005c 0CD04BE2 		sub	sp, fp, #12
 2880 0060 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2881 0064 1EFF2FE1 		bx	lr
 2882              		.cfi_endproc
 2883              	.LFE2:
 2885              		.align	2
 2886              		.global	sudoku_candidatos_propagar_c
 2888              	sudoku_candidatos_propagar_c:
 2889              	.LFB3:
  32:../sudoku_2024.c **** 
  33:../sudoku_2024.c **** /* *****************************************************************************
  34:../sudoku_2024.c ****  * FUNCIONALIDAD: propagar el valor de una determinada celda para actualizar las listas de candidat
  35:../sudoku_2024.c **** void
  36:../sudoku_2024.c **** sudoku_candidatos_propagar_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int fila, int columna, uint
  37:../sudoku_2024.c **** {
 2890              		.loc 1 37 0
 2891              		.cfi_startproc
 2892              		@ Function supports interworking.
 2893              		@ args = 0, pretend = 0, frame = 40
 2894              		@ frame_needed = 1, uses_anonymous_args = 0
 2895 0068 0DC0A0E1 		mov	ip, sp
 2896              	.LCFI4:
 2897              		.cfi_def_cfa_register 12
 2898 006c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2899 0070 04B04CE2 		sub	fp, ip, #4
 2900              		.cfi_offset 14, -8
 2901              		.cfi_offset 13, -12
 2902              		.cfi_offset 11, -16
 2903              	.LCFI5:
 2904              		.cfi_def_cfa 11, 4
 2905 0074 28D04DE2 		sub	sp, sp, #40
 2906 0078 28000BE5 		str	r0, [fp, #-40]
 2907 007c 2C100BE5 		str	r1, [fp, #-44]
 2908 0080 30200BE5 		str	r2, [fp, #-48]
 2909 0084 31304BE5 		strb	r3, [fp, #-49]
  38:../sudoku_2024.c **** 	int displace = 3 + (int)valor;	// Desplazamiento necesario para situar el bit en la posición del c
 2910              		.loc 1 38 0
 2911 0088 31305BE5 		ldrb	r3, [fp, #-49]	@ zero_extendqisi2
 2912 008c 033083E2 		add	r3, r3, #3
 2913 0090 1C300BE5 		str	r3, [fp, #-28]
  39:../sudoku_2024.c **** 
  40:../sudoku_2024.c ****     /* recorrer cada columna descartando el valor en la lista de candidatos */
  41:../sudoku_2024.c ****     int col = 0;
 2914              		.loc 1 41 0
 2915 0094 0030A0E3 		mov	r3, #0
 2916 0098 10300BE5 		str	r3, [fp, #-16]
  42:../sudoku_2024.c ****     while(col < NUM_COLUMNAS - 7){
 2917              		.loc 1 42 0
 2918 009c 210000EA 		b	.L4
 2919              	.L5:
  43:../sudoku_2024.c ****     	cuadricula[fila][col] &= ~(1 << displace);	// Desactivar el candidato de la lista con una oper
 2920              		.loc 1 43 0
 2921 00a0 2C301BE5 		ldr	r3, [fp, #-44]
 2922 00a4 8332A0E1 		mov	r3, r3, asl #5
 2923 00a8 28201BE5 		ldr	r2, [fp, #-40]
 2924 00ac 031082E0 		add	r1, r2, r3
 2925 00b0 2C301BE5 		ldr	r3, [fp, #-44]
 2926 00b4 8332A0E1 		mov	r3, r3, asl #5
 2927 00b8 28201BE5 		ldr	r2, [fp, #-40]
 2928 00bc 032082E0 		add	r2, r2, r3
 2929 00c0 10301BE5 		ldr	r3, [fp, #-16]
 2930 00c4 8330A0E1 		mov	r3, r3, asl #1
 2931 00c8 033082E0 		add	r3, r2, r3
 2932 00cc B030D3E1 		ldrh	r3, [r3, #0]
 2933 00d0 0338A0E1 		mov	r3, r3, asl #16
 2934 00d4 2328A0E1 		mov	r2, r3, lsr #16
 2935 00d8 0100A0E3 		mov	r0, #1
 2936 00dc 1C301BE5 		ldr	r3, [fp, #-28]
 2937 00e0 1033A0E1 		mov	r3, r0, asl r3
 2938 00e4 0338A0E1 		mov	r3, r3, asl #16
 2939 00e8 2338A0E1 		mov	r3, r3, lsr #16
 2940 00ec 0330E0E1 		mvn	r3, r3
 2941 00f0 0338A0E1 		mov	r3, r3, asl #16
 2942 00f4 2338A0E1 		mov	r3, r3, lsr #16
 2943 00f8 033002E0 		and	r3, r2, r3
 2944 00fc 0338A0E1 		mov	r3, r3, asl #16
 2945 0100 2338A0E1 		mov	r3, r3, lsr #16
 2946 0104 0338A0E1 		mov	r3, r3, asl #16
 2947 0108 2328A0E1 		mov	r2, r3, lsr #16
 2948 010c 10301BE5 		ldr	r3, [fp, #-16]
 2949 0110 8330A0E1 		mov	r3, r3, asl #1
 2950 0114 033081E0 		add	r3, r1, r3
 2951 0118 B020C3E1 		strh	r2, [r3, #0]	@ movhi
  44:../sudoku_2024.c ****     	col++;
 2952              		.loc 1 44 0
 2953 011c 10301BE5 		ldr	r3, [fp, #-16]
 2954 0120 013083E2 		add	r3, r3, #1
 2955 0124 10300BE5 		str	r3, [fp, #-16]
 2956              	.L4:
  42:../sudoku_2024.c ****     while(col < NUM_COLUMNAS - 7){
 2957              		.loc 1 42 0 discriminator 1
 2958 0128 10301BE5 		ldr	r3, [fp, #-16]
 2959 012c 080053E3 		cmp	r3, #8
 2960 0130 DAFFFFDA 		ble	.L5
  45:../sudoku_2024.c ****     }
  46:../sudoku_2024.c **** 
  47:../sudoku_2024.c ****     /* recorrer cada fila descartando el valor en la lista de candidatos */
  48:../sudoku_2024.c ****     int row = 0;
 2961              		.loc 1 48 0
 2962 0134 0030A0E3 		mov	r3, #0
 2963 0138 14300BE5 		str	r3, [fp, #-20]
  49:../sudoku_2024.c ****     while(row < NUM_FILAS){
 2964              		.loc 1 49 0
 2965 013c 210000EA 		b	.L6
 2966              	.L7:
  50:../sudoku_2024.c ****     	cuadricula[row][columna] &= ~(1 << displace);
 2967              		.loc 1 50 0
 2968 0140 14301BE5 		ldr	r3, [fp, #-20]
 2969 0144 8332A0E1 		mov	r3, r3, asl #5
 2970 0148 28201BE5 		ldr	r2, [fp, #-40]
 2971 014c 031082E0 		add	r1, r2, r3
 2972 0150 14301BE5 		ldr	r3, [fp, #-20]
 2973 0154 8332A0E1 		mov	r3, r3, asl #5
 2974 0158 28201BE5 		ldr	r2, [fp, #-40]
 2975 015c 032082E0 		add	r2, r2, r3
 2976 0160 30301BE5 		ldr	r3, [fp, #-48]
 2977 0164 8330A0E1 		mov	r3, r3, asl #1
 2978 0168 033082E0 		add	r3, r2, r3
 2979 016c B030D3E1 		ldrh	r3, [r3, #0]
 2980 0170 0338A0E1 		mov	r3, r3, asl #16
 2981 0174 2328A0E1 		mov	r2, r3, lsr #16
 2982 0178 0100A0E3 		mov	r0, #1
 2983 017c 1C301BE5 		ldr	r3, [fp, #-28]
 2984 0180 1033A0E1 		mov	r3, r0, asl r3
 2985 0184 0338A0E1 		mov	r3, r3, asl #16
 2986 0188 2338A0E1 		mov	r3, r3, lsr #16
 2987 018c 0330E0E1 		mvn	r3, r3
 2988 0190 0338A0E1 		mov	r3, r3, asl #16
 2989 0194 2338A0E1 		mov	r3, r3, lsr #16
 2990 0198 033002E0 		and	r3, r2, r3
 2991 019c 0338A0E1 		mov	r3, r3, asl #16
 2992 01a0 2338A0E1 		mov	r3, r3, lsr #16
 2993 01a4 0338A0E1 		mov	r3, r3, asl #16
 2994 01a8 2328A0E1 		mov	r2, r3, lsr #16
 2995 01ac 30301BE5 		ldr	r3, [fp, #-48]
 2996 01b0 8330A0E1 		mov	r3, r3, asl #1
 2997 01b4 033081E0 		add	r3, r1, r3
 2998 01b8 B020C3E1 		strh	r2, [r3, #0]	@ movhi
  51:../sudoku_2024.c ****     	row++;
 2999              		.loc 1 51 0
 3000 01bc 14301BE5 		ldr	r3, [fp, #-20]
 3001 01c0 013083E2 		add	r3, r3, #1
 3002 01c4 14300BE5 		str	r3, [fp, #-20]
 3003              	.L6:
  49:../sudoku_2024.c ****     while(row < NUM_FILAS){
 3004              		.loc 1 49 0 discriminator 1
 3005 01c8 14301BE5 		ldr	r3, [fp, #-20]
 3006 01cc 080053E3 		cmp	r3, #8
 3007 01d0 DAFFFFDA 		ble	.L7
  52:../sudoku_2024.c ****     }
  53:../sudoku_2024.c **** 
  54:../sudoku_2024.c **** 
  55:../sudoku_2024.c ****     /*Calcular la posicion inicial para cada region 3x3 correspondiente*/
  56:../sudoku_2024.c ****     int row_start = (fila / 3) * 3;
 3008              		.loc 1 56 0
 3009 01d4 2C301BE5 		ldr	r3, [fp, #-44]
 3010 01d8 1C219FE5 		ldr	r2, .L12
 3011 01dc 9312C2E0 		smull	r1, r2, r3, r2
 3012 01e0 C33FA0E1 		mov	r3, r3, asr #31
 3013 01e4 022063E0 		rsb	r2, r3, r2
 3014 01e8 0230A0E1 		mov	r3, r2
 3015 01ec 8330A0E1 		mov	r3, r3, asl #1
 3016 01f0 023083E0 		add	r3, r3, r2
 3017 01f4 20300BE5 		str	r3, [fp, #-32]
  57:../sudoku_2024.c ****     int col_start = (columna / 3) * 3;
 3018              		.loc 1 57 0
 3019 01f8 30301BE5 		ldr	r3, [fp, #-48]
 3020 01fc F8209FE5 		ldr	r2, .L12
 3021 0200 9312C2E0 		smull	r1, r2, r3, r2
 3022 0204 C33FA0E1 		mov	r3, r3, asr #31
 3023 0208 022063E0 		rsb	r2, r3, r2
 3024 020c 0230A0E1 		mov	r3, r2
 3025 0210 8330A0E1 		mov	r3, r3, asl #1
 3026 0214 023083E0 		add	r3, r3, r2
 3027 0218 24300BE5 		str	r3, [fp, #-36]
  58:../sudoku_2024.c **** 
  59:../sudoku_2024.c ****     /* recorrer region descartando el valor en la lista de candidatos */
  60:../sudoku_2024.c ****     row = row_start;
 3028              		.loc 1 60 0
 3029 021c 20301BE5 		ldr	r3, [fp, #-32]
 3030 0220 14300BE5 		str	r3, [fp, #-20]
  61:../sudoku_2024.c ****     while(row < (row_start + 3)){
 3031              		.loc 1 61 0
 3032 0224 2C0000EA 		b	.L8
 3033              	.L11:
 3034              	.LBB2:
  62:../sudoku_2024.c ****     	int col = col_start;
 3035              		.loc 1 62 0
 3036 0228 24301BE5 		ldr	r3, [fp, #-36]
 3037 022c 18300BE5 		str	r3, [fp, #-24]
  63:../sudoku_2024.c ****     	while(col < (col_start + 3)){
 3038              		.loc 1 63 0
 3039 0230 210000EA 		b	.L9
 3040              	.L10:
  64:../sudoku_2024.c ****     		cuadricula[row][col] &= ~(1 << displace);
 3041              		.loc 1 64 0
 3042 0234 14301BE5 		ldr	r3, [fp, #-20]
 3043 0238 8332A0E1 		mov	r3, r3, asl #5
 3044 023c 28201BE5 		ldr	r2, [fp, #-40]
 3045 0240 031082E0 		add	r1, r2, r3
 3046 0244 14301BE5 		ldr	r3, [fp, #-20]
 3047 0248 8332A0E1 		mov	r3, r3, asl #5
 3048 024c 28201BE5 		ldr	r2, [fp, #-40]
 3049 0250 032082E0 		add	r2, r2, r3
 3050 0254 18301BE5 		ldr	r3, [fp, #-24]
 3051 0258 8330A0E1 		mov	r3, r3, asl #1
 3052 025c 033082E0 		add	r3, r2, r3
 3053 0260 B030D3E1 		ldrh	r3, [r3, #0]
 3054 0264 0338A0E1 		mov	r3, r3, asl #16
 3055 0268 2328A0E1 		mov	r2, r3, lsr #16
 3056 026c 0100A0E3 		mov	r0, #1
 3057 0270 1C301BE5 		ldr	r3, [fp, #-28]
 3058 0274 1033A0E1 		mov	r3, r0, asl r3
 3059 0278 0338A0E1 		mov	r3, r3, asl #16
 3060 027c 2338A0E1 		mov	r3, r3, lsr #16
 3061 0280 0330E0E1 		mvn	r3, r3
 3062 0284 0338A0E1 		mov	r3, r3, asl #16
 3063 0288 2338A0E1 		mov	r3, r3, lsr #16
 3064 028c 033002E0 		and	r3, r2, r3
 3065 0290 0338A0E1 		mov	r3, r3, asl #16
 3066 0294 2338A0E1 		mov	r3, r3, lsr #16
 3067 0298 0338A0E1 		mov	r3, r3, asl #16
 3068 029c 2328A0E1 		mov	r2, r3, lsr #16
 3069 02a0 18301BE5 		ldr	r3, [fp, #-24]
 3070 02a4 8330A0E1 		mov	r3, r3, asl #1
 3071 02a8 033081E0 		add	r3, r1, r3
 3072 02ac B020C3E1 		strh	r2, [r3, #0]	@ movhi
  65:../sudoku_2024.c ****     		col++;
 3073              		.loc 1 65 0
 3074 02b0 18301BE5 		ldr	r3, [fp, #-24]
 3075 02b4 013083E2 		add	r3, r3, #1
 3076 02b8 18300BE5 		str	r3, [fp, #-24]
 3077              	.L9:
  63:../sudoku_2024.c ****     	while(col < (col_start + 3)){
 3078              		.loc 1 63 0 discriminator 1
 3079 02bc 24301BE5 		ldr	r3, [fp, #-36]
 3080 02c0 032083E2 		add	r2, r3, #3
 3081 02c4 18301BE5 		ldr	r3, [fp, #-24]
 3082 02c8 030052E1 		cmp	r2, r3
 3083 02cc D8FFFFCA 		bgt	.L10
  66:../sudoku_2024.c ****     	}
  67:../sudoku_2024.c ****     	row++;
 3084              		.loc 1 67 0
 3085 02d0 14301BE5 		ldr	r3, [fp, #-20]
 3086 02d4 013083E2 		add	r3, r3, #1
 3087 02d8 14300BE5 		str	r3, [fp, #-20]
 3088              	.L8:
 3089              	.LBE2:
  61:../sudoku_2024.c ****     while(row < (row_start + 3)){
 3090              		.loc 1 61 0 discriminator 1
 3091 02dc 20301BE5 		ldr	r3, [fp, #-32]
 3092 02e0 032083E2 		add	r2, r3, #3
 3093 02e4 14301BE5 		ldr	r3, [fp, #-20]
 3094 02e8 030052E1 		cmp	r2, r3
 3095 02ec CDFFFFCA 		bgt	.L11
  68:../sudoku_2024.c ****     }
  69:../sudoku_2024.c **** }
 3096              		.loc 1 69 0
 3097 02f0 0CD04BE2 		sub	sp, fp, #12
 3098 02f4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3099 02f8 1EFF2FE1 		bx	lr
 3100              	.L13:
 3101              		.align	2
 3102              	.L12:
 3103 02fc 56555555 		.word	1431655766
 3104              		.cfi_endproc
 3105              	.LFE3:
 3107              		.align	2
 3108              		.global	init_candidatos
 3110              	init_candidatos:
 3111              	.LFB4:
  70:../sudoku_2024.c **** 
  71:../sudoku_2024.c **** // Recorrer la cuadricula inicializando los candidatos de las celdas sin valor inicial (PISTA)
  72:../sudoku_2024.c **** void
  73:../sudoku_2024.c **** init_candidatos(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]){
 3112              		.loc 1 73 0
 3113              		.cfi_startproc
 3114              		@ Function supports interworking.
 3115              		@ args = 0, pretend = 0, frame = 24
 3116              		@ frame_needed = 1, uses_anonymous_args = 0
 3117 0300 0DC0A0E1 		mov	ip, sp
 3118              	.LCFI6:
 3119              		.cfi_def_cfa_register 12
 3120 0304 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3121 0308 04B04CE2 		sub	fp, ip, #4
 3122              		.cfi_offset 14, -8
 3123              		.cfi_offset 13, -12
 3124              		.cfi_offset 11, -16
 3125              	.LCFI7:
 3126              		.cfi_def_cfa 11, 4
 3127 030c 18D04DE2 		sub	sp, sp, #24
 3128 0310 20000BE5 		str	r0, [fp, #-32]
  74:../sudoku_2024.c **** 	int row=0;
 3129              		.loc 1 74 0
 3130 0314 0030A0E3 		mov	r3, #0
 3131 0318 10300BE5 		str	r3, [fp, #-16]
  75:../sudoku_2024.c **** 	while(row < NUM_FILAS){
 3132              		.loc 1 75 0
 3133 031c 2E0000EA 		b	.L15
 3134              	.L19:
 3135              	.LBB3:
  76:../sudoku_2024.c **** 		int col=0;
 3136              		.loc 1 76 0
 3137 0320 0030A0E3 		mov	r3, #0
 3138 0324 14300BE5 		str	r3, [fp, #-20]
  77:../sudoku_2024.c **** 		while(col < NUM_COLUMNAS - 7){
 3139              		.loc 1 77 0
 3140 0328 250000EA 		b	.L16
 3141              	.L18:
 3142              	.LBB4:
  78:../sudoku_2024.c **** 
  79:../sudoku_2024.c **** 			uint8_t valor_actual = celda_leer_valor(cuadricula[row][col]);
 3143              		.loc 1 79 0
 3144 032c 10301BE5 		ldr	r3, [fp, #-16]
 3145 0330 8332A0E1 		mov	r3, r3, asl #5
 3146 0334 20201BE5 		ldr	r2, [fp, #-32]
 3147 0338 032082E0 		add	r2, r2, r3
 3148 033c 14301BE5 		ldr	r3, [fp, #-20]
 3149 0340 8330A0E1 		mov	r3, r3, asl #1
 3150 0344 033082E0 		add	r3, r2, r3
 3151 0348 B030D3E1 		ldrh	r3, [r3, #0]
 3152 034c 0300A0E1 		mov	r0, r3
 3153 0350 2AFFFFEB 		bl	celda_leer_valor
 3154 0354 0030A0E1 		mov	r3, r0
 3155 0358 15304BE5 		strb	r3, [fp, #-21]
  80:../sudoku_2024.c **** 
  81:../sudoku_2024.c **** 			if(valor_actual == 0){
 3156              		.loc 1 81 0
 3157 035c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3158 0360 000053E3 		cmp	r3, #0
 3159 0364 1300001A 		bne	.L17
  82:../sudoku_2024.c **** 				cuadricula[row][col] |= 0x1FF0;
 3160              		.loc 1 82 0
 3161 0368 10301BE5 		ldr	r3, [fp, #-16]
 3162 036c 8332A0E1 		mov	r3, r3, asl #5
 3163 0370 20201BE5 		ldr	r2, [fp, #-32]
 3164 0374 031082E0 		add	r1, r2, r3
 3165 0378 10301BE5 		ldr	r3, [fp, #-16]
 3166 037c 8332A0E1 		mov	r3, r3, asl #5
 3167 0380 20201BE5 		ldr	r2, [fp, #-32]
 3168 0384 032082E0 		add	r2, r2, r3
 3169 0388 14301BE5 		ldr	r3, [fp, #-20]
 3170 038c 8330A0E1 		mov	r3, r3, asl #1
 3171 0390 033082E0 		add	r3, r2, r3
 3172 0394 B030D3E1 		ldrh	r3, [r3, #0]
 3173 0398 7F3D83E3 		orr	r3, r3, #8128
 3174 039c 303083E3 		orr	r3, r3, #48
 3175 03a0 0338A0E1 		mov	r3, r3, asl #16
 3176 03a4 2328A0E1 		mov	r2, r3, lsr #16
 3177 03a8 14301BE5 		ldr	r3, [fp, #-20]
 3178 03ac 8330A0E1 		mov	r3, r3, asl #1
 3179 03b0 033081E0 		add	r3, r1, r3
 3180 03b4 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3181              	.L17:
  83:../sudoku_2024.c **** 			}
  84:../sudoku_2024.c **** 			col++;
 3182              		.loc 1 84 0
 3183 03b8 14301BE5 		ldr	r3, [fp, #-20]
 3184 03bc 013083E2 		add	r3, r3, #1
 3185 03c0 14300BE5 		str	r3, [fp, #-20]
 3186              	.L16:
 3187              	.LBE4:
  77:../sudoku_2024.c **** 		while(col < NUM_COLUMNAS - 7){
 3188              		.loc 1 77 0 discriminator 1
 3189 03c4 14301BE5 		ldr	r3, [fp, #-20]
 3190 03c8 080053E3 		cmp	r3, #8
 3191 03cc D6FFFFDA 		ble	.L18
  85:../sudoku_2024.c **** 		}
  86:../sudoku_2024.c **** 		row++;
 3192              		.loc 1 86 0
 3193 03d0 10301BE5 		ldr	r3, [fp, #-16]
 3194 03d4 013083E2 		add	r3, r3, #1
 3195 03d8 10300BE5 		str	r3, [fp, #-16]
 3196              	.L15:
 3197              	.LBE3:
  75:../sudoku_2024.c **** 	while(row < NUM_FILAS){
 3198              		.loc 1 75 0 discriminator 1
 3199 03dc 10301BE5 		ldr	r3, [fp, #-16]
 3200 03e0 080053E3 		cmp	r3, #8
 3201 03e4 CDFFFFDA 		ble	.L19
  87:../sudoku_2024.c **** 	}
  88:../sudoku_2024.c **** }
 3202              		.loc 1 88 0
 3203 03e8 0CD04BE2 		sub	sp, fp, #12
 3204 03ec 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3205 03f0 1EFF2FE1 		bx	lr
 3206              		.cfi_endproc
 3207              	.LFE4:
 3209              		.align	2
 3210              		.global	propagar_if_value
 3212              	propagar_if_value:
 3213              	.LFB5:
  89:../sudoku_2024.c **** 
  90:../sudoku_2024.c **** // Recorrer la cuadricula aumentando la cantidad de celdas vacias (valor 0) y llamando a la funcion
  91:../sudoku_2024.c **** void
  92:../sudoku_2024.c **** propagar_if_value(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int *celdas_vacias){
 3214              		.loc 1 92 0
 3215              		.cfi_startproc
 3216              		@ Function supports interworking.
 3217              		@ args = 0, pretend = 0, frame = 24
 3218              		@ frame_needed = 1, uses_anonymous_args = 0
 3219 03f4 0DC0A0E1 		mov	ip, sp
 3220              	.LCFI8:
 3221              		.cfi_def_cfa_register 12
 3222 03f8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3223 03fc 04B04CE2 		sub	fp, ip, #4
 3224              		.cfi_offset 14, -8
 3225              		.cfi_offset 13, -12
 3226              		.cfi_offset 11, -16
 3227              	.LCFI9:
 3228              		.cfi_def_cfa 11, 4
 3229 0400 18D04DE2 		sub	sp, sp, #24
 3230 0404 20000BE5 		str	r0, [fp, #-32]
 3231 0408 24100BE5 		str	r1, [fp, #-36]
  93:../sudoku_2024.c **** 	int row=0;
 3232              		.loc 1 93 0
 3233 040c 0030A0E3 		mov	r3, #0
 3234 0410 10300BE5 		str	r3, [fp, #-16]
  94:../sudoku_2024.c **** 	while(row < NUM_FILAS){
 3235              		.loc 1 94 0
 3236 0414 270000EA 		b	.L21
 3237              	.L26:
 3238              	.LBB5:
  95:../sudoku_2024.c **** 		int col=0;
 3239              		.loc 1 95 0
 3240 0418 0030A0E3 		mov	r3, #0
 3241 041c 14300BE5 		str	r3, [fp, #-20]
  96:../sudoku_2024.c **** 		while(col < NUM_COLUMNAS - 7){
 3242              		.loc 1 96 0
 3243 0420 1E0000EA 		b	.L22
 3244              	.L25:
 3245              	.LBB6:
  97:../sudoku_2024.c **** 			uint8_t valor_actual = celda_leer_valor(cuadricula[row][col]);
 3246              		.loc 1 97 0
 3247 0424 10301BE5 		ldr	r3, [fp, #-16]
 3248 0428 8332A0E1 		mov	r3, r3, asl #5
 3249 042c 20201BE5 		ldr	r2, [fp, #-32]
 3250 0430 032082E0 		add	r2, r2, r3
 3251 0434 14301BE5 		ldr	r3, [fp, #-20]
 3252 0438 8330A0E1 		mov	r3, r3, asl #1
 3253 043c 033082E0 		add	r3, r2, r3
 3254 0440 B030D3E1 		ldrh	r3, [r3, #0]
 3255 0444 0300A0E1 		mov	r0, r3
 3256 0448 ECFEFFEB 		bl	celda_leer_valor
 3257 044c 0030A0E1 		mov	r3, r0
 3258 0450 15304BE5 		strb	r3, [fp, #-21]
  98:../sudoku_2024.c **** 			if(valor_actual == 0x0000){
 3259              		.loc 1 98 0
 3260 0454 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3261 0458 000053E3 		cmp	r3, #0
 3262 045c 0500001A 		bne	.L23
  99:../sudoku_2024.c **** 				(*celdas_vacias)++;
 3263              		.loc 1 99 0
 3264 0460 24301BE5 		ldr	r3, [fp, #-36]
 3265 0464 003093E5 		ldr	r3, [r3, #0]
 3266 0468 012083E2 		add	r2, r3, #1
 3267 046c 24301BE5 		ldr	r3, [fp, #-36]
 3268 0470 002083E5 		str	r2, [r3, #0]
 3269 0474 060000EA 		b	.L24
 3270              	.L23:
 100:../sudoku_2024.c **** 			} else {
 101:../sudoku_2024.c **** 				sudoku_candidatos_propagar_arm(cuadricula, row, col, valor_actual);
 3271              		.loc 1 101 0
 3272 0478 10301BE5 		ldr	r3, [fp, #-16]
 3273 047c FF1003E2 		and	r1, r3, #255
 3274 0480 14301BE5 		ldr	r3, [fp, #-20]
 3275 0484 FF2003E2 		and	r2, r3, #255
 3276 0488 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3277 048c 20001BE5 		ldr	r0, [fp, #-32]
 3278 0490 FEFFFFEB 		bl	sudoku_candidatos_propagar_arm
 3279              	.L24:
 102:../sudoku_2024.c **** 			}
 103:../sudoku_2024.c **** 			col++;
 3280              		.loc 1 103 0
 3281 0494 14301BE5 		ldr	r3, [fp, #-20]
 3282 0498 013083E2 		add	r3, r3, #1
 3283 049c 14300BE5 		str	r3, [fp, #-20]
 3284              	.L22:
 3285              	.LBE6:
  96:../sudoku_2024.c **** 		while(col < NUM_COLUMNAS - 7){
 3286              		.loc 1 96 0 discriminator 1
 3287 04a0 14301BE5 		ldr	r3, [fp, #-20]
 3288 04a4 080053E3 		cmp	r3, #8
 3289 04a8 DDFFFFDA 		ble	.L25
 104:../sudoku_2024.c **** 		}
 105:../sudoku_2024.c **** 		row++;
 3290              		.loc 1 105 0
 3291 04ac 10301BE5 		ldr	r3, [fp, #-16]
 3292 04b0 013083E2 		add	r3, r3, #1
 3293 04b4 10300BE5 		str	r3, [fp, #-16]
 3294              	.L21:
 3295              	.LBE5:
  94:../sudoku_2024.c **** 	while(row < NUM_FILAS){
 3296              		.loc 1 94 0 discriminator 1
 3297 04b8 10301BE5 		ldr	r3, [fp, #-16]
 3298 04bc 080053E3 		cmp	r3, #8
 3299 04c0 D4FFFFDA 		ble	.L26
 106:../sudoku_2024.c **** 	}
 107:../sudoku_2024.c **** }
 3300              		.loc 1 107 0
 3301 04c4 0CD04BE2 		sub	sp, fp, #12
 3302 04c8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3303 04cc 1EFF2FE1 		bx	lr
 3304              		.cfi_endproc
 3305              	.LFE5:
 3307              		.align	2
 3309              	sudoku_candidatos_init_c:
 3310              	.LFB6:
 108:../sudoku_2024.c **** 
 109:../sudoku_2024.c **** /* *****************************************************************************
 110:../sudoku_2024.c ****  * calcula todas las listas de candidatos (9x9)
 111:../sudoku_2024.c ****  * necesario tras borrar o cambiar un valor (listas corrompidas)
 112:../sudoku_2024.c ****  * retorna el numero de celdas vacias */
 113:../sudoku_2024.c **** static int
 114:../sudoku_2024.c **** sudoku_candidatos_init_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS])
 115:../sudoku_2024.c **** {
 3311              		.loc 1 115 0
 3312              		.cfi_startproc
 3313              		@ Function supports interworking.
 3314              		@ args = 0, pretend = 0, frame = 16
 3315              		@ frame_needed = 1, uses_anonymous_args = 0
 3316 04d0 0DC0A0E1 		mov	ip, sp
 3317              	.LCFI10:
 3318              		.cfi_def_cfa_register 12
 3319 04d4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3320 04d8 04B04CE2 		sub	fp, ip, #4
 3321              		.cfi_offset 14, -8
 3322              		.cfi_offset 13, -12
 3323              		.cfi_offset 11, -16
 3324              	.LCFI11:
 3325              		.cfi_def_cfa 11, 4
 3326 04dc 10D04DE2 		sub	sp, sp, #16
 3327 04e0 18000BE5 		str	r0, [fp, #-24]
 116:../sudoku_2024.c ****  	int celdas_vacias = 0;
 3328              		.loc 1 116 0
 3329 04e4 0030A0E3 		mov	r3, #0
 3330 04e8 10300BE5 		str	r3, [fp, #-16]
 117:../sudoku_2024.c **** 	/*TODO: inicializa lista de candidatos */
 118:../sudoku_2024.c ****     init_candidatos(cuadricula);
 3331              		.loc 1 118 0
 3332 04ec 18001BE5 		ldr	r0, [fp, #-24]
 3333 04f0 FEFFFFEB 		bl	init_candidatos
 119:../sudoku_2024.c **** 
 120:../sudoku_2024.c ****     /* TODO: propagar si la celda tiene valor*/
 121:../sudoku_2024.c ****     uint8_t valor_actual = celda_leer_valor(cuadricula[0][0]);
 3334              		.loc 1 121 0
 3335 04f4 18301BE5 		ldr	r3, [fp, #-24]
 3336 04f8 B030D3E1 		ldrh	r3, [r3, #0]
 3337 04fc 0300A0E1 		mov	r0, r3
 3338 0500 BEFEFFEB 		bl	celda_leer_valor
 3339 0504 0030A0E1 		mov	r3, r0
 3340 0508 11304BE5 		strb	r3, [fp, #-17]
 122:../sudoku_2024.c ****     sudoku_candidatos_propagar_arm(cuadricula, 0, 0, valor_actual);
 3341              		.loc 1 122 0
 3342 050c 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 3343 0510 18001BE5 		ldr	r0, [fp, #-24]
 3344 0514 0010A0E3 		mov	r1, #0
 3345 0518 0020A0E3 		mov	r2, #0
 3346 051c FEFFFFEB 		bl	sudoku_candidatos_propagar_arm
 123:../sudoku_2024.c ****     //propagar_if_value(cuadricula, &celdas_vacias);
 124:../sudoku_2024.c **** 
 125:../sudoku_2024.c ****     return celdas_vacias;
 3347              		.loc 1 125 0
 3348 0520 10301BE5 		ldr	r3, [fp, #-16]
 126:../sudoku_2024.c **** }
 3349              		.loc 1 126 0
 3350 0524 0300A0E1 		mov	r0, r3
 3351 0528 0CD04BE2 		sub	sp, fp, #12
 3352 052c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3353 0530 1EFF2FE1 		bx	lr
 3354              		.cfi_endproc
 3355              	.LFE6:
 3357              		.align	2
 3359              	cuadricula_candidatos_verificar:
 3360              	.LFB7:
 127:../sudoku_2024.c **** 
 128:../sudoku_2024.c **** 
 129:../sudoku_2024.c **** static void
 130:../sudoku_2024.c **** cuadricula_candidatos_verificar(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS],int row, int col, int *er
 3361              		.loc 1 130 0
 3362              		.cfi_startproc
 3363              		@ Function supports interworking.
 3364              		@ args = 0, pretend = 0, frame = 56
 3365              		@ frame_needed = 1, uses_anonymous_args = 0
 3366 0534 0DC0A0E1 		mov	ip, sp
 3367              	.LCFI12:
 3368              		.cfi_def_cfa_register 12
 3369 0538 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3370 053c 04B04CE2 		sub	fp, ip, #4
 3371              		.cfi_offset 14, -8
 3372              		.cfi_offset 13, -12
 3373              		.cfi_offset 11, -16
 3374              	.LCFI13:
 3375              		.cfi_def_cfa 11, 4
 3376 0540 38D04DE2 		sub	sp, sp, #56
 3377 0544 38000BE5 		str	r0, [fp, #-56]
 3378 0548 3C100BE5 		str	r1, [fp, #-60]
 3379 054c 40200BE5 		str	r2, [fp, #-64]
 3380 0550 44300BE5 		str	r3, [fp, #-68]
 131:../sudoku_2024.c **** 
 132:../sudoku_2024.c **** 	uint8_t valor = celda_leer_valor(cuadricula[row][col]);
 3381              		.loc 1 132 0
 3382 0554 3C301BE5 		ldr	r3, [fp, #-60]
 3383 0558 8332A0E1 		mov	r3, r3, asl #5
 3384 055c 38201BE5 		ldr	r2, [fp, #-56]
 3385 0560 032082E0 		add	r2, r2, r3
 3386 0564 40301BE5 		ldr	r3, [fp, #-64]
 3387 0568 8330A0E1 		mov	r3, r3, asl #1
 3388 056c 033082E0 		add	r3, r2, r3
 3389 0570 B030D3E1 		ldrh	r3, [r3, #0]
 3390 0574 0300A0E1 		mov	r0, r3
 3391 0578 A0FEFFEB 		bl	celda_leer_valor
 3392 057c 0030A0E1 		mov	r3, r0
 3393 0580 19304BE5 		strb	r3, [fp, #-25]
 133:../sudoku_2024.c **** 
 134:../sudoku_2024.c **** 	if(valor != 0x0000){
 3394              		.loc 1 134 0
 3395 0584 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 3396 0588 000053E3 		cmp	r3, #0
 3397 058c B200000A 		beq	.L28
 3398              	.LBB7:
 135:../sudoku_2024.c **** 		int displace = 3 + (int)valor;
 3399              		.loc 1 135 0
 3400 0590 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 3401 0594 033083E2 		add	r3, r3, #3
 3402 0598 20300BE5 		str	r3, [fp, #-32]
 136:../sudoku_2024.c **** 
 137:../sudoku_2024.c **** 		//Verificar el valor en toda la fila (Horizontal)
 138:../sudoku_2024.c **** 		int j = 0;
 3403              		.loc 1 138 0
 3404 059c 0030A0E3 		mov	r3, #0
 3405 05a0 10300BE5 		str	r3, [fp, #-16]
 139:../sudoku_2024.c **** 		while( j < NUM_COLUMNAS - 7){
 3406              		.loc 1 139 0
 3407 05a4 280000EA 		b	.L30
 3408              	.L32:
 3409              	.LBB8:
 140:../sudoku_2024.c **** 			uint8_t is_bit_set = cuadricula[row][j] & (1 << displace);
 3410              		.loc 1 140 0
 3411 05a8 3C301BE5 		ldr	r3, [fp, #-60]
 3412 05ac 8332A0E1 		mov	r3, r3, asl #5
 3413 05b0 38201BE5 		ldr	r2, [fp, #-56]
 3414 05b4 032082E0 		add	r2, r2, r3
 3415 05b8 10301BE5 		ldr	r3, [fp, #-16]
 3416 05bc 8330A0E1 		mov	r3, r3, asl #1
 3417 05c0 033082E0 		add	r3, r2, r3
 3418 05c4 B030D3E1 		ldrh	r3, [r3, #0]
 3419 05c8 FF2003E2 		and	r2, r3, #255
 3420 05cc 0110A0E3 		mov	r1, #1
 3421 05d0 20301BE5 		ldr	r3, [fp, #-32]
 3422 05d4 1133A0E1 		mov	r3, r1, asl r3
 3423 05d8 FF3003E2 		and	r3, r3, #255
 3424 05dc 033002E0 		and	r3, r2, r3
 3425 05e0 FF3003E2 		and	r3, r3, #255
 3426 05e4 21304BE5 		strb	r3, [fp, #-33]
 141:../sudoku_2024.c **** 
 142:../sudoku_2024.c **** 			if(j != col && is_bit_set){
 3427              		.loc 1 142 0
 3428 05e8 10201BE5 		ldr	r2, [fp, #-16]
 3429 05ec 40301BE5 		ldr	r3, [fp, #-64]
 3430 05f0 030052E1 		cmp	r2, r3
 3431 05f4 1100000A 		beq	.L31
 3432              		.loc 1 142 0 is_stmt 0 discriminator 1
 3433 05f8 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 3434 05fc 000053E3 		cmp	r3, #0
 3435 0600 0E00000A 		beq	.L31
 143:../sudoku_2024.c **** 				activar_error(cuadricula[row][j]);
 3436              		.loc 1 143 0 is_stmt 1
 3437 0604 3C301BE5 		ldr	r3, [fp, #-60]
 3438 0608 8332A0E1 		mov	r3, r3, asl #5
 3439 060c 38201BE5 		ldr	r2, [fp, #-56]
 3440 0610 032082E0 		add	r2, r2, r3
 3441 0614 10301BE5 		ldr	r3, [fp, #-16]
 3442 0618 8330A0E1 		mov	r3, r3, asl #1
 3443 061c 033082E0 		add	r3, r2, r3
 3444 0620 B030D3E1 		ldrh	r3, [r3, #0]
 3445 0624 0300A0E1 		mov	r0, r3
 3446 0628 82FEFFEB 		bl	activar_error
 144:../sudoku_2024.c **** 				(*errors)++;
 3447              		.loc 1 144 0
 3448 062c 44301BE5 		ldr	r3, [fp, #-68]
 3449 0630 003093E5 		ldr	r3, [r3, #0]
 3450 0634 012083E2 		add	r2, r3, #1
 3451 0638 44301BE5 		ldr	r3, [fp, #-68]
 3452 063c 002083E5 		str	r2, [r3, #0]
 3453              	.L31:
 145:../sudoku_2024.c **** 			}
 146:../sudoku_2024.c **** 			j++;
 3454              		.loc 1 146 0
 3455 0640 10301BE5 		ldr	r3, [fp, #-16]
 3456 0644 013083E2 		add	r3, r3, #1
 3457 0648 10300BE5 		str	r3, [fp, #-16]
 3458              	.L30:
 3459              	.LBE8:
 139:../sudoku_2024.c **** 		while( j < NUM_COLUMNAS - 7){
 3460              		.loc 1 139 0 discriminator 1
 3461 064c 10301BE5 		ldr	r3, [fp, #-16]
 3462 0650 080053E3 		cmp	r3, #8
 3463 0654 D3FFFFDA 		ble	.L32
 147:../sudoku_2024.c **** 		}
 148:../sudoku_2024.c **** 
 149:../sudoku_2024.c **** 		//Verificar el valor en toda la columna (Vertical)
 150:../sudoku_2024.c **** 		int i = 0;
 3464              		.loc 1 150 0
 3465 0658 0030A0E3 		mov	r3, #0
 3466 065c 14300BE5 		str	r3, [fp, #-20]
 151:../sudoku_2024.c **** 		while(i < NUM_FILAS){
 3467              		.loc 1 151 0
 3468 0660 280000EA 		b	.L33
 3469              	.L35:
 3470              	.LBB9:
 152:../sudoku_2024.c **** 			uint8_t is_bit_set = cuadricula[i][col] & (1 << displace);
 3471              		.loc 1 152 0
 3472 0664 14301BE5 		ldr	r3, [fp, #-20]
 3473 0668 8332A0E1 		mov	r3, r3, asl #5
 3474 066c 38201BE5 		ldr	r2, [fp, #-56]
 3475 0670 032082E0 		add	r2, r2, r3
 3476 0674 40301BE5 		ldr	r3, [fp, #-64]
 3477 0678 8330A0E1 		mov	r3, r3, asl #1
 3478 067c 033082E0 		add	r3, r2, r3
 3479 0680 B030D3E1 		ldrh	r3, [r3, #0]
 3480 0684 FF2003E2 		and	r2, r3, #255
 3481 0688 0110A0E3 		mov	r1, #1
 3482 068c 20301BE5 		ldr	r3, [fp, #-32]
 3483 0690 1133A0E1 		mov	r3, r1, asl r3
 3484 0694 FF3003E2 		and	r3, r3, #255
 3485 0698 033002E0 		and	r3, r2, r3
 3486 069c FF3003E2 		and	r3, r3, #255
 3487 06a0 22304BE5 		strb	r3, [fp, #-34]
 153:../sudoku_2024.c **** 			if(i != row && is_bit_set){
 3488              		.loc 1 153 0
 3489 06a4 14201BE5 		ldr	r2, [fp, #-20]
 3490 06a8 3C301BE5 		ldr	r3, [fp, #-60]
 3491 06ac 030052E1 		cmp	r2, r3
 3492 06b0 1100000A 		beq	.L34
 3493              		.loc 1 153 0 is_stmt 0 discriminator 1
 3494 06b4 22305BE5 		ldrb	r3, [fp, #-34]	@ zero_extendqisi2
 3495 06b8 000053E3 		cmp	r3, #0
 3496 06bc 0E00000A 		beq	.L34
 154:../sudoku_2024.c **** 				activar_error(cuadricula[i][col]);
 3497              		.loc 1 154 0 is_stmt 1
 3498 06c0 14301BE5 		ldr	r3, [fp, #-20]
 3499 06c4 8332A0E1 		mov	r3, r3, asl #5
 3500 06c8 38201BE5 		ldr	r2, [fp, #-56]
 3501 06cc 032082E0 		add	r2, r2, r3
 3502 06d0 40301BE5 		ldr	r3, [fp, #-64]
 3503 06d4 8330A0E1 		mov	r3, r3, asl #1
 3504 06d8 033082E0 		add	r3, r2, r3
 3505 06dc B030D3E1 		ldrh	r3, [r3, #0]
 3506 06e0 0300A0E1 		mov	r0, r3
 3507 06e4 53FEFFEB 		bl	activar_error
 155:../sudoku_2024.c **** 				(*errors)++;
 3508              		.loc 1 155 0
 3509 06e8 44301BE5 		ldr	r3, [fp, #-68]
 3510 06ec 003093E5 		ldr	r3, [r3, #0]
 3511 06f0 012083E2 		add	r2, r3, #1
 3512 06f4 44301BE5 		ldr	r3, [fp, #-68]
 3513 06f8 002083E5 		str	r2, [r3, #0]
 3514              	.L34:
 156:../sudoku_2024.c **** 			}
 157:../sudoku_2024.c **** 			i++;
 3515              		.loc 1 157 0
 3516 06fc 14301BE5 		ldr	r3, [fp, #-20]
 3517 0700 013083E2 		add	r3, r3, #1
 3518 0704 14300BE5 		str	r3, [fp, #-20]
 3519              	.L33:
 3520              	.LBE9:
 151:../sudoku_2024.c **** 		while(i < NUM_FILAS){
 3521              		.loc 1 151 0 discriminator 1
 3522 0708 14301BE5 		ldr	r3, [fp, #-20]
 3523 070c 080053E3 		cmp	r3, #8
 3524 0710 D3FFFFDA 		ble	.L35
 158:../sudoku_2024.c **** 		}
 159:../sudoku_2024.c **** 
 160:../sudoku_2024.c **** 		/*Calcular la posicion inicial para seccion correspondiente a la ubicacion actual*/
 161:../sudoku_2024.c **** 		int row_start = (row / 3) * 3;
 3525              		.loc 1 161 0
 3526 0714 3C301BE5 		ldr	r3, [fp, #-60]
 3527 0718 48219FE5 		ldr	r2, .L42
 3528 071c 9312C2E0 		smull	r1, r2, r3, r2
 3529 0720 C33FA0E1 		mov	r3, r3, asr #31
 3530 0724 022063E0 		rsb	r2, r3, r2
 3531 0728 0230A0E1 		mov	r3, r2
 3532 072c 8330A0E1 		mov	r3, r3, asl #1
 3533 0730 023083E0 		add	r3, r3, r2
 3534 0734 28300BE5 		str	r3, [fp, #-40]
 162:../sudoku_2024.c **** 		int col_start = (col / 3) * 3;
 3535              		.loc 1 162 0
 3536 0738 40301BE5 		ldr	r3, [fp, #-64]
 3537 073c 24219FE5 		ldr	r2, .L42
 3538 0740 9312C2E0 		smull	r1, r2, r3, r2
 3539 0744 C33FA0E1 		mov	r3, r3, asr #31
 3540 0748 022063E0 		rsb	r2, r3, r2
 3541 074c 0230A0E1 		mov	r3, r2
 3542 0750 8330A0E1 		mov	r3, r3, asl #1
 3543 0754 023083E0 		add	r3, r3, r2
 3544 0758 2C300BE5 		str	r3, [fp, #-44]
 163:../sudoku_2024.c **** 
 164:../sudoku_2024.c **** 		//Verificar valor en la seccion (cuadro 3x3)
 165:../sudoku_2024.c **** 		i = row_start;
 3545              		.loc 1 165 0
 3546 075c 28301BE5 		ldr	r3, [fp, #-40]
 3547 0760 14300BE5 		str	r3, [fp, #-20]
 166:../sudoku_2024.c **** 		while(i < (row_start + 3)){
 3548              		.loc 1 166 0
 3549 0764 370000EA 		b	.L36
 3550              	.L41:
 3551              	.LBB10:
 167:../sudoku_2024.c **** 			int j = col_start;
 3552              		.loc 1 167 0
 3553 0768 2C301BE5 		ldr	r3, [fp, #-44]
 3554 076c 18300BE5 		str	r3, [fp, #-24]
 168:../sudoku_2024.c **** 			while(j < (col_start + 3)){
 3555              		.loc 1 168 0
 3556 0770 2C0000EA 		b	.L37
 3557              	.L40:
 3558              	.LBB11:
 169:../sudoku_2024.c **** 				uint8_t is_bit_set = cuadricula[i][j] & (1 << displace);
 3559              		.loc 1 169 0
 3560 0774 14301BE5 		ldr	r3, [fp, #-20]
 3561 0778 8332A0E1 		mov	r3, r3, asl #5
 3562 077c 38201BE5 		ldr	r2, [fp, #-56]
 3563 0780 032082E0 		add	r2, r2, r3
 3564 0784 18301BE5 		ldr	r3, [fp, #-24]
 3565 0788 8330A0E1 		mov	r3, r3, asl #1
 3566 078c 033082E0 		add	r3, r2, r3
 3567 0790 B030D3E1 		ldrh	r3, [r3, #0]
 3568 0794 FF2003E2 		and	r2, r3, #255
 3569 0798 0110A0E3 		mov	r1, #1
 3570 079c 20301BE5 		ldr	r3, [fp, #-32]
 3571 07a0 1133A0E1 		mov	r3, r1, asl r3
 3572 07a4 FF3003E2 		and	r3, r3, #255
 3573 07a8 033002E0 		and	r3, r2, r3
 3574 07ac FF3003E2 		and	r3, r3, #255
 3575 07b0 2D304BE5 		strb	r3, [fp, #-45]
 170:../sudoku_2024.c **** 				if((i != row_start || j != col_start) && is_bit_set){
 3576              		.loc 1 170 0
 3577 07b4 14201BE5 		ldr	r2, [fp, #-20]
 3578 07b8 28301BE5 		ldr	r3, [fp, #-40]
 3579 07bc 030052E1 		cmp	r2, r3
 3580 07c0 0300001A 		bne	.L38
 3581              		.loc 1 170 0 is_stmt 0 discriminator 2
 3582 07c4 18201BE5 		ldr	r2, [fp, #-24]
 3583 07c8 2C301BE5 		ldr	r3, [fp, #-44]
 3584 07cc 030052E1 		cmp	r2, r3
 3585 07d0 1100000A 		beq	.L39
 3586              	.L38:
 3587              		.loc 1 170 0 discriminator 1
 3588 07d4 2D305BE5 		ldrb	r3, [fp, #-45]	@ zero_extendqisi2
 3589 07d8 000053E3 		cmp	r3, #0
 3590 07dc 0E00000A 		beq	.L39
 171:../sudoku_2024.c **** 					activar_error(cuadricula[i][j]);
 3591              		.loc 1 171 0 is_stmt 1
 3592 07e0 14301BE5 		ldr	r3, [fp, #-20]
 3593 07e4 8332A0E1 		mov	r3, r3, asl #5
 3594 07e8 38201BE5 		ldr	r2, [fp, #-56]
 3595 07ec 032082E0 		add	r2, r2, r3
 3596 07f0 18301BE5 		ldr	r3, [fp, #-24]
 3597 07f4 8330A0E1 		mov	r3, r3, asl #1
 3598 07f8 033082E0 		add	r3, r2, r3
 3599 07fc B030D3E1 		ldrh	r3, [r3, #0]
 3600 0800 0300A0E1 		mov	r0, r3
 3601 0804 0BFEFFEB 		bl	activar_error
 172:../sudoku_2024.c **** 					(*errors)++;
 3602              		.loc 1 172 0
 3603 0808 44301BE5 		ldr	r3, [fp, #-68]
 3604 080c 003093E5 		ldr	r3, [r3, #0]
 3605 0810 012083E2 		add	r2, r3, #1
 3606 0814 44301BE5 		ldr	r3, [fp, #-68]
 3607 0818 002083E5 		str	r2, [r3, #0]
 3608              	.L39:
 173:../sudoku_2024.c **** 				}
 174:../sudoku_2024.c **** 				j++;
 3609              		.loc 1 174 0
 3610 081c 18301BE5 		ldr	r3, [fp, #-24]
 3611 0820 013083E2 		add	r3, r3, #1
 3612 0824 18300BE5 		str	r3, [fp, #-24]
 3613              	.L37:
 3614              	.LBE11:
 168:../sudoku_2024.c **** 			while(j < (col_start + 3)){
 3615              		.loc 1 168 0 discriminator 1
 3616 0828 2C301BE5 		ldr	r3, [fp, #-44]
 3617 082c 032083E2 		add	r2, r3, #3
 3618 0830 18301BE5 		ldr	r3, [fp, #-24]
 3619 0834 030052E1 		cmp	r2, r3
 3620 0838 CDFFFFCA 		bgt	.L40
 175:../sudoku_2024.c **** 			}
 176:../sudoku_2024.c **** 			i++;
 3621              		.loc 1 176 0
 3622 083c 14301BE5 		ldr	r3, [fp, #-20]
 3623 0840 013083E2 		add	r3, r3, #1
 3624 0844 14300BE5 		str	r3, [fp, #-20]
 3625              	.L36:
 3626              	.LBE10:
 166:../sudoku_2024.c **** 		while(i < (row_start + 3)){
 3627              		.loc 1 166 0 discriminator 1
 3628 0848 28301BE5 		ldr	r3, [fp, #-40]
 3629 084c 032083E2 		add	r2, r3, #3
 3630 0850 14301BE5 		ldr	r3, [fp, #-20]
 3631 0854 030052E1 		cmp	r2, r3
 3632 0858 C2FFFFCA 		bgt	.L41
 3633              	.L28:
 3634              	.LBE7:
 177:../sudoku_2024.c **** 		}
 178:../sudoku_2024.c **** 	}
 179:../sudoku_2024.c **** }
 3635              		.loc 1 179 0
 3636 085c 0CD04BE2 		sub	sp, fp, #12
 3637 0860 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3638 0864 1EFF2FE1 		bx	lr
 3639              	.L43:
 3640              		.align	2
 3641              	.L42:
 3642 0868 56555555 		.word	1431655766
 3643              		.cfi_endproc
 3644              	.LFE7:
 3646              		.align	2
 3647              		.global	sudoku9x9
 3649              	sudoku9x9:
 3650              	.LFB8:
 180:../sudoku_2024.c **** /* *****************************************************************************
 181:../sudoku_2024.c ****  * Funciones publicas
 182:../sudoku_2024.c ****  * (pueden ser invocadas desde otro fichero) */
 183:../sudoku_2024.c **** 
 184:../sudoku_2024.c **** /* *******************************************cuadricula[NUM_FILAS][NUM_COLUMNAS]******************
 185:../sudoku_2024.c ****  * programa principal del juego que recibe el tablero,
 186:../sudoku_2024.c ****  * y la senyal de ready que indica que se han actualizado fila y columna */
 187:../sudoku_2024.c **** void
 188:../sudoku_2024.c **** sudoku9x9(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], char *ready)
 189:../sudoku_2024.c **** {
 3651              		.loc 1 189 0
 3652              		.cfi_startproc
 3653              		@ Function supports interworking.
 3654              		@ args = 0, pretend = 0, frame = 24
 3655              		@ frame_needed = 1, uses_anonymous_args = 0
 3656 086c 0DC0A0E1 		mov	ip, sp
 3657              	.LCFI14:
 3658              		.cfi_def_cfa_register 12
 3659 0870 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3660 0874 04B04CE2 		sub	fp, ip, #4
 3661              		.cfi_offset 14, -8
 3662              		.cfi_offset 13, -12
 3663              		.cfi_offset 11, -16
 3664              	.LCFI15:
 3665              		.cfi_def_cfa 11, 4
 3666 0878 18D04DE2 		sub	sp, sp, #24
 3667 087c 20000BE5 		str	r0, [fp, #-32]
 3668 0880 24100BE5 		str	r1, [fp, #-36]
 190:../sudoku_2024.c ****     int celdas_vacias;
 191:../sudoku_2024.c **** 
 192:../sudoku_2024.c ****     /* calcula lista de candidatos, versin C */
 193:../sudoku_2024.c ****     celdas_vacias = sudoku_candidatos_init_c(cuadricula);
 3669              		.loc 1 193 0
 3670 0884 20001BE5 		ldr	r0, [fp, #-32]
 3671 0888 10FFFFEB 		bl	sudoku_candidatos_init_c
 3672 088c 18000BE5 		str	r0, [fp, #-24]
 194:../sudoku_2024.c **** 
 195:../sudoku_2024.c ****     /* verificar que la lista de candidatos calculada es correcta */
 196:../sudoku_2024.c ****     int errors = 0;
 3673              		.loc 1 196 0
 3674 0890 0030A0E3 		mov	r3, #0
 3675 0894 1C300BE5 		str	r3, [fp, #-28]
 197:../sudoku_2024.c ****     int row = 0;
 3676              		.loc 1 197 0
 3677 0898 0030A0E3 		mov	r3, #0
 3678 089c 10300BE5 		str	r3, [fp, #-16]
 198:../sudoku_2024.c ****     while(row < NUM_FILAS){
 3679              		.loc 1 198 0
 3680 08a0 100000EA 		b	.L45
 3681              	.L48:
 3682              	.LBB12:
 199:../sudoku_2024.c **** 		int col = 0;
 3683              		.loc 1 199 0
 3684 08a4 0030A0E3 		mov	r3, #0
 3685 08a8 14300BE5 		str	r3, [fp, #-20]
 200:../sudoku_2024.c ****     	while(col < NUM_COLUMNAS - 7){
 3686              		.loc 1 200 0
 3687 08ac 070000EA 		b	.L46
 3688              	.L47:
 201:../sudoku_2024.c ****     		cuadricula_candidatos_verificar(cuadricula, row, col, &errors);
 3689              		.loc 1 201 0
 3690 08b0 1C304BE2 		sub	r3, fp, #28
 3691 08b4 20001BE5 		ldr	r0, [fp, #-32]
 3692 08b8 10101BE5 		ldr	r1, [fp, #-16]
 3693 08bc 14201BE5 		ldr	r2, [fp, #-20]
 3694 08c0 1BFFFFEB 		bl	cuadricula_candidatos_verificar
 202:../sudoku_2024.c ****     		col++;
 3695              		.loc 1 202 0
 3696 08c4 14301BE5 		ldr	r3, [fp, #-20]
 3697 08c8 013083E2 		add	r3, r3, #1
 3698 08cc 14300BE5 		str	r3, [fp, #-20]
 3699              	.L46:
 200:../sudoku_2024.c ****     	while(col < NUM_COLUMNAS - 7){
 3700              		.loc 1 200 0 discriminator 1
 3701 08d0 14301BE5 		ldr	r3, [fp, #-20]
 3702 08d4 080053E3 		cmp	r3, #8
 3703 08d8 F4FFFFDA 		ble	.L47
 203:../sudoku_2024.c ****     	}
 204:../sudoku_2024.c ****     	row++;
 3704              		.loc 1 204 0
 3705 08dc 10301BE5 		ldr	r3, [fp, #-16]
 3706 08e0 013083E2 		add	r3, r3, #1
 3707 08e4 10300BE5 		str	r3, [fp, #-16]
 3708              	.L45:
 3709              	.LBE12:
 198:../sudoku_2024.c ****     while(row < NUM_FILAS){
 3710              		.loc 1 198 0 discriminator 1
 3711 08e8 10301BE5 		ldr	r3, [fp, #-16]
 3712 08ec 080053E3 		cmp	r3, #8
 3713 08f0 EBFFFFDA 		ble	.L48
 205:../sudoku_2024.c ****     }
 206:../sudoku_2024.c ****     /* repetir para otras versiones (C optimizado, ARM, THUMB) */
 207:../sudoku_2024.c **** }
 3714              		.loc 1 207 0
 3715 08f4 0CD04BE2 		sub	sp, fp, #12
 3716 08f8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3717 08fc 1EFF2FE1 		bx	lr
 3718              		.cfi_endproc
 3719              	.LFE8:
 3721              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 sudoku_2024.c
C:\Users\Jorge\AppData\Local\Temp\cc0N3bPY.s:2817   .text:00000000 $a
C:\Users\Jorge\AppData\Local\Temp\cc0N3bPY.s:2819   .text:00000000 celda_leer_valor
C:\Users\Jorge\AppData\Local\Temp\cc0N3bPY.s:2854   .text:00000038 activar_error
C:\Users\Jorge\AppData\Local\Temp\cc0N3bPY.s:2888   .text:00000068 sudoku_candidatos_propagar_c
C:\Users\Jorge\AppData\Local\Temp\cc0N3bPY.s:3103   .text:000002fc $d
C:\Users\Jorge\AppData\Local\Temp\cc0N3bPY.s:3107   .text:00000300 $a
C:\Users\Jorge\AppData\Local\Temp\cc0N3bPY.s:3110   .text:00000300 init_candidatos
C:\Users\Jorge\AppData\Local\Temp\cc0N3bPY.s:3212   .text:000003f4 propagar_if_value
C:\Users\Jorge\AppData\Local\Temp\cc0N3bPY.s:3309   .text:000004d0 sudoku_candidatos_init_c
C:\Users\Jorge\AppData\Local\Temp\cc0N3bPY.s:3359   .text:00000534 cuadricula_candidatos_verificar
C:\Users\Jorge\AppData\Local\Temp\cc0N3bPY.s:3642   .text:00000868 $d
C:\Users\Jorge\AppData\Local\Temp\cc0N3bPY.s:3646   .text:0000086c $a
C:\Users\Jorge\AppData\Local\Temp\cc0N3bPY.s:3649   .text:0000086c sudoku9x9
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
sudoku_candidatos_propagar_arm
