   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"sudoku_2024.c"
  21              	.Ltext0:
  22              		.file 1 "../sudoku_2024.c"
 2817              		.align	2
 2819              	celda_leer_valor:
 2820              	.LFB1:
   1:../sudoku_2024.c **** #include "sudoku_2024.h"
   2:../sudoku_2024.c **** #include <stdio.h>
   3:../sudoku_2024.c **** #include <stdlib.h>
   4:../sudoku_2024.c **** 
   5:../sudoku_2024.c **** //extern void
   6:../sudoku_2024.c **** //sudoku_candidatos_propagar_arm(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], uint8_t fila, uint8_t c
   7:../sudoku_2024.c **** /* *****************************************************************************
   8:../sudoku_2024.c ****  * Funciones privadas (static)
   9:../sudoku_2024.c ****  * (no pueden ser invocadas desde otro fichero) */
  10:../sudoku_2024.c ****  
  11:../sudoku_2024.c **** /* *****************************************************************************
  12:../sudoku_2024.c ****  * modifica el valor almacenado en la celda indicada */
  13:../sudoku_2024.c **** static inline void
  14:../sudoku_2024.c **** celda_poner_valor(CELDA *celdaptr, uint8_t val)
  15:../sudoku_2024.c **** {
  16:../sudoku_2024.c ****     *celdaptr = (*celdaptr & 0xFFF0) | (val & 0x000F);
  17:../sudoku_2024.c **** }
  18:../sudoku_2024.c **** 
  19:../sudoku_2024.c **** /* *****************************************************************************
  20:../sudoku_2024.c ****  * extrae el valor almacenado en los 16 bits de una celda */
  21:../sudoku_2024.c **** static inline uint8_t
  22:../sudoku_2024.c **** celda_leer_valor(CELDA celda)
  23:../sudoku_2024.c **** {
 2821              		.loc 1 23 0
 2822              		.cfi_startproc
 2823              		@ Function supports interworking.
 2824              		@ args = 0, pretend = 0, frame = 8
 2825              		@ frame_needed = 1, uses_anonymous_args = 0
 2826 0000 0DC0A0E1 		mov	ip, sp
 2827              	.LCFI0:
 2828              		.cfi_def_cfa_register 12
 2829 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2830 0008 04B04CE2 		sub	fp, ip, #4
 2831              		.cfi_offset 14, -8
 2832              		.cfi_offset 13, -12
 2833              		.cfi_offset 11, -16
 2834              	.LCFI1:
 2835              		.cfi_def_cfa 11, 4
 2836 000c 08D04DE2 		sub	sp, sp, #8
 2837 0010 0030A0E1 		mov	r3, r0
 2838 0014 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  24:../sudoku_2024.c ****     return (celda & 0x000F);
 2839              		.loc 1 24 0
 2840 0018 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2841 001c FF3003E2 		and	r3, r3, #255
 2842 0020 0F3003E2 		and	r3, r3, #15
 2843 0024 FF3003E2 		and	r3, r3, #255
  25:../sudoku_2024.c **** }
 2844              		.loc 1 25 0
 2845 0028 0300A0E1 		mov	r0, r3
 2846 002c 0CD04BE2 		sub	sp, fp, #12
 2847 0030 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2848 0034 1EFF2FE1 		bx	lr
 2849              		.cfi_endproc
 2850              	.LFE1:
 2852              		.align	2
 2854              	activar_error:
 2855              	.LFB2:
  26:../sudoku_2024.c **** 
  27:../sudoku_2024.c **** static inline void
  28:../sudoku_2024.c **** activar_error(CELDA celda)
  29:../sudoku_2024.c **** {
 2856              		.loc 1 29 0
 2857              		.cfi_startproc
 2858              		@ Function supports interworking.
 2859              		@ args = 0, pretend = 0, frame = 8
 2860              		@ frame_needed = 1, uses_anonymous_args = 0
 2861 0038 0DC0A0E1 		mov	ip, sp
 2862              	.LCFI2:
 2863              		.cfi_def_cfa_register 12
 2864 003c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2865 0040 04B04CE2 		sub	fp, ip, #4
 2866              		.cfi_offset 14, -8
 2867              		.cfi_offset 13, -12
 2868              		.cfi_offset 11, -16
 2869              	.LCFI3:
 2870              		.cfi_def_cfa 11, 4
 2871 0044 08D04DE2 		sub	sp, sp, #8
 2872 0048 0030A0E1 		mov	r3, r0
 2873 004c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  30:../sudoku_2024.c **** 	celda = celda |= 0x4000;
 2874              		.loc 1 30 0
 2875 0050 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2876 0054 013983E3 		orr	r3, r3, #16384
 2877 0058 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  31:../sudoku_2024.c **** }
 2878              		.loc 1 31 0
 2879 005c 0CD04BE2 		sub	sp, fp, #12
 2880 0060 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2881 0064 1EFF2FE1 		bx	lr
 2882              		.cfi_endproc
 2883              	.LFE2:
 2885              		.align	2
 2886              		.global	sudoku_candidatos_propagar_c
 2888              	sudoku_candidatos_propagar_c:
 2889              	.LFB3:
  32:../sudoku_2024.c **** 
  33:../sudoku_2024.c **** /* *****************************************************************************
  34:../sudoku_2024.c ****  * FUNCIONALIDAD: propagar el valor de una determinada celda para actualizar las listas de candidat
  35:../sudoku_2024.c **** void
  36:../sudoku_2024.c **** sudoku_candidatos_propagar_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int fila, int columna, uint
  37:../sudoku_2024.c **** {
 2890              		.loc 1 37 0
 2891              		.cfi_startproc
 2892              		@ Function supports interworking.
 2893              		@ args = 0, pretend = 0, frame = 40
 2894              		@ frame_needed = 1, uses_anonymous_args = 0
 2895 0068 0DC0A0E1 		mov	ip, sp
 2896              	.LCFI4:
 2897              		.cfi_def_cfa_register 12
 2898 006c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2899 0070 04B04CE2 		sub	fp, ip, #4
 2900              		.cfi_offset 14, -8
 2901              		.cfi_offset 13, -12
 2902              		.cfi_offset 11, -16
 2903              	.LCFI5:
 2904              		.cfi_def_cfa 11, 4
 2905 0074 28D04DE2 		sub	sp, sp, #40
 2906 0078 28000BE5 		str	r0, [fp, #-40]
 2907 007c 2C100BE5 		str	r1, [fp, #-44]
 2908 0080 30200BE5 		str	r2, [fp, #-48]
 2909 0084 31304BE5 		strb	r3, [fp, #-49]
  38:../sudoku_2024.c **** 	int displace = 3 + (int)valor;	// Desplazamiento necesario para situar el bit en la posición del c
 2910              		.loc 1 38 0
 2911 0088 31305BE5 		ldrb	r3, [fp, #-49]	@ zero_extendqisi2
 2912 008c 033083E2 		add	r3, r3, #3
 2913 0090 1C300BE5 		str	r3, [fp, #-28]
  39:../sudoku_2024.c **** 
  40:../sudoku_2024.c ****     /* recorrer cada columna descartando el valor en la lista de candidatos */
  41:../sudoku_2024.c ****     int col = 0;
 2914              		.loc 1 41 0
 2915 0094 0030A0E3 		mov	r3, #0
 2916 0098 10300BE5 		str	r3, [fp, #-16]
  42:../sudoku_2024.c ****     while(col < NUM_COLUMNAS - 7){
 2917              		.loc 1 42 0
 2918 009c 210000EA 		b	.L4
 2919              	.L5:
  43:../sudoku_2024.c ****     	cuadricula[fila][col] &= ~(1 << displace);	// Desactivar el candidato de la lista con una oper
 2920              		.loc 1 43 0
 2921 00a0 2C301BE5 		ldr	r3, [fp, #-44]
 2922 00a4 8332A0E1 		mov	r3, r3, asl #5
 2923 00a8 28201BE5 		ldr	r2, [fp, #-40]
 2924 00ac 031082E0 		add	r1, r2, r3
 2925 00b0 2C301BE5 		ldr	r3, [fp, #-44]
 2926 00b4 8332A0E1 		mov	r3, r3, asl #5
 2927 00b8 28201BE5 		ldr	r2, [fp, #-40]
 2928 00bc 032082E0 		add	r2, r2, r3
 2929 00c0 10301BE5 		ldr	r3, [fp, #-16]
 2930 00c4 8330A0E1 		mov	r3, r3, asl #1
 2931 00c8 033082E0 		add	r3, r2, r3
 2932 00cc B030D3E1 		ldrh	r3, [r3, #0]
 2933 00d0 0338A0E1 		mov	r3, r3, asl #16
 2934 00d4 2328A0E1 		mov	r2, r3, lsr #16
 2935 00d8 0100A0E3 		mov	r0, #1
 2936 00dc 1C301BE5 		ldr	r3, [fp, #-28]
 2937 00e0 1033A0E1 		mov	r3, r0, asl r3
 2938 00e4 0338A0E1 		mov	r3, r3, asl #16
 2939 00e8 2338A0E1 		mov	r3, r3, lsr #16
 2940 00ec 0330E0E1 		mvn	r3, r3
 2941 00f0 0338A0E1 		mov	r3, r3, asl #16
 2942 00f4 2338A0E1 		mov	r3, r3, lsr #16
 2943 00f8 033002E0 		and	r3, r2, r3
 2944 00fc 0338A0E1 		mov	r3, r3, asl #16
 2945 0100 2338A0E1 		mov	r3, r3, lsr #16
 2946 0104 0338A0E1 		mov	r3, r3, asl #16
 2947 0108 2328A0E1 		mov	r2, r3, lsr #16
 2948 010c 10301BE5 		ldr	r3, [fp, #-16]
 2949 0110 8330A0E1 		mov	r3, r3, asl #1
 2950 0114 033081E0 		add	r3, r1, r3
 2951 0118 B020C3E1 		strh	r2, [r3, #0]	@ movhi
  44:../sudoku_2024.c ****     	col++;
 2952              		.loc 1 44 0
 2953 011c 10301BE5 		ldr	r3, [fp, #-16]
 2954 0120 013083E2 		add	r3, r3, #1
 2955 0124 10300BE5 		str	r3, [fp, #-16]
 2956              	.L4:
  42:../sudoku_2024.c ****     while(col < NUM_COLUMNAS - 7){
 2957              		.loc 1 42 0 discriminator 1
 2958 0128 10301BE5 		ldr	r3, [fp, #-16]
 2959 012c 080053E3 		cmp	r3, #8
 2960 0130 DAFFFFDA 		ble	.L5
  45:../sudoku_2024.c ****     }
  46:../sudoku_2024.c **** 
  47:../sudoku_2024.c ****     /* recorrer cada fila descartando el valor en la lista de candidatos */
  48:../sudoku_2024.c ****     int row = 0;
 2961              		.loc 1 48 0
 2962 0134 0030A0E3 		mov	r3, #0
 2963 0138 14300BE5 		str	r3, [fp, #-20]
  49:../sudoku_2024.c ****     while(row < NUM_FILAS){
 2964              		.loc 1 49 0
 2965 013c 210000EA 		b	.L6
 2966              	.L7:
  50:../sudoku_2024.c ****     	cuadricula[row][columna] &= ~(1 << displace);
 2967              		.loc 1 50 0
 2968 0140 14301BE5 		ldr	r3, [fp, #-20]
 2969 0144 8332A0E1 		mov	r3, r3, asl #5
 2970 0148 28201BE5 		ldr	r2, [fp, #-40]
 2971 014c 031082E0 		add	r1, r2, r3
 2972 0150 14301BE5 		ldr	r3, [fp, #-20]
 2973 0154 8332A0E1 		mov	r3, r3, asl #5
 2974 0158 28201BE5 		ldr	r2, [fp, #-40]
 2975 015c 032082E0 		add	r2, r2, r3
 2976 0160 30301BE5 		ldr	r3, [fp, #-48]
 2977 0164 8330A0E1 		mov	r3, r3, asl #1
 2978 0168 033082E0 		add	r3, r2, r3
 2979 016c B030D3E1 		ldrh	r3, [r3, #0]
 2980 0170 0338A0E1 		mov	r3, r3, asl #16
 2981 0174 2328A0E1 		mov	r2, r3, lsr #16
 2982 0178 0100A0E3 		mov	r0, #1
 2983 017c 1C301BE5 		ldr	r3, [fp, #-28]
 2984 0180 1033A0E1 		mov	r3, r0, asl r3
 2985 0184 0338A0E1 		mov	r3, r3, asl #16
 2986 0188 2338A0E1 		mov	r3, r3, lsr #16
 2987 018c 0330E0E1 		mvn	r3, r3
 2988 0190 0338A0E1 		mov	r3, r3, asl #16
 2989 0194 2338A0E1 		mov	r3, r3, lsr #16
 2990 0198 033002E0 		and	r3, r2, r3
 2991 019c 0338A0E1 		mov	r3, r3, asl #16
 2992 01a0 2338A0E1 		mov	r3, r3, lsr #16
 2993 01a4 0338A0E1 		mov	r3, r3, asl #16
 2994 01a8 2328A0E1 		mov	r2, r3, lsr #16
 2995 01ac 30301BE5 		ldr	r3, [fp, #-48]
 2996 01b0 8330A0E1 		mov	r3, r3, asl #1
 2997 01b4 033081E0 		add	r3, r1, r3
 2998 01b8 B020C3E1 		strh	r2, [r3, #0]	@ movhi
  51:../sudoku_2024.c ****     	row++;
 2999              		.loc 1 51 0
 3000 01bc 14301BE5 		ldr	r3, [fp, #-20]
 3001 01c0 013083E2 		add	r3, r3, #1
 3002 01c4 14300BE5 		str	r3, [fp, #-20]
 3003              	.L6:
  49:../sudoku_2024.c ****     while(row < NUM_FILAS){
 3004              		.loc 1 49 0 discriminator 1
 3005 01c8 14301BE5 		ldr	r3, [fp, #-20]
 3006 01cc 080053E3 		cmp	r3, #8
 3007 01d0 DAFFFFDA 		ble	.L7
  52:../sudoku_2024.c ****     }
  53:../sudoku_2024.c **** 
  54:../sudoku_2024.c **** 
  55:../sudoku_2024.c ****     /*Calcular la posicion inicial para cada region 3x3 correspondiente*/
  56:../sudoku_2024.c ****     int row_start = (fila / 3) * 3;
 3008              		.loc 1 56 0
 3009 01d4 2C301BE5 		ldr	r3, [fp, #-44]
 3010 01d8 1C219FE5 		ldr	r2, .L12
 3011 01dc 9312C2E0 		smull	r1, r2, r3, r2
 3012 01e0 C33FA0E1 		mov	r3, r3, asr #31
 3013 01e4 022063E0 		rsb	r2, r3, r2
 3014 01e8 0230A0E1 		mov	r3, r2
 3015 01ec 8330A0E1 		mov	r3, r3, asl #1
 3016 01f0 023083E0 		add	r3, r3, r2
 3017 01f4 20300BE5 		str	r3, [fp, #-32]
  57:../sudoku_2024.c ****     int col_start = (columna / 3) * 3;
 3018              		.loc 1 57 0
 3019 01f8 30301BE5 		ldr	r3, [fp, #-48]
 3020 01fc F8209FE5 		ldr	r2, .L12
 3021 0200 9312C2E0 		smull	r1, r2, r3, r2
 3022 0204 C33FA0E1 		mov	r3, r3, asr #31
 3023 0208 022063E0 		rsb	r2, r3, r2
 3024 020c 0230A0E1 		mov	r3, r2
 3025 0210 8330A0E1 		mov	r3, r3, asl #1
 3026 0214 023083E0 		add	r3, r3, r2
 3027 0218 24300BE5 		str	r3, [fp, #-36]
  58:../sudoku_2024.c **** 
  59:../sudoku_2024.c ****     /* recorrer region descartando el valor en la lista de candidatos */
  60:../sudoku_2024.c ****     row = row_start;
 3028              		.loc 1 60 0
 3029 021c 20301BE5 		ldr	r3, [fp, #-32]
 3030 0220 14300BE5 		str	r3, [fp, #-20]
  61:../sudoku_2024.c ****     while(row < (row_start + 3)){
 3031              		.loc 1 61 0
 3032 0224 2C0000EA 		b	.L8
 3033              	.L11:
 3034              	.LBB2:
  62:../sudoku_2024.c ****     	int col = col_start;
 3035              		.loc 1 62 0
 3036 0228 24301BE5 		ldr	r3, [fp, #-36]
 3037 022c 18300BE5 		str	r3, [fp, #-24]
  63:../sudoku_2024.c ****     	while(col < (col_start + 3)){
 3038              		.loc 1 63 0
 3039 0230 210000EA 		b	.L9
 3040              	.L10:
  64:../sudoku_2024.c ****     		cuadricula[row][col] &= ~(1 << displace);
 3041              		.loc 1 64 0
 3042 0234 14301BE5 		ldr	r3, [fp, #-20]
 3043 0238 8332A0E1 		mov	r3, r3, asl #5
 3044 023c 28201BE5 		ldr	r2, [fp, #-40]
 3045 0240 031082E0 		add	r1, r2, r3
 3046 0244 14301BE5 		ldr	r3, [fp, #-20]
 3047 0248 8332A0E1 		mov	r3, r3, asl #5
 3048 024c 28201BE5 		ldr	r2, [fp, #-40]
 3049 0250 032082E0 		add	r2, r2, r3
 3050 0254 18301BE5 		ldr	r3, [fp, #-24]
 3051 0258 8330A0E1 		mov	r3, r3, asl #1
 3052 025c 033082E0 		add	r3, r2, r3
 3053 0260 B030D3E1 		ldrh	r3, [r3, #0]
 3054 0264 0338A0E1 		mov	r3, r3, asl #16
 3055 0268 2328A0E1 		mov	r2, r3, lsr #16
 3056 026c 0100A0E3 		mov	r0, #1
 3057 0270 1C301BE5 		ldr	r3, [fp, #-28]
 3058 0274 1033A0E1 		mov	r3, r0, asl r3
 3059 0278 0338A0E1 		mov	r3, r3, asl #16
 3060 027c 2338A0E1 		mov	r3, r3, lsr #16
 3061 0280 0330E0E1 		mvn	r3, r3
 3062 0284 0338A0E1 		mov	r3, r3, asl #16
 3063 0288 2338A0E1 		mov	r3, r3, lsr #16
 3064 028c 033002E0 		and	r3, r2, r3
 3065 0290 0338A0E1 		mov	r3, r3, asl #16
 3066 0294 2338A0E1 		mov	r3, r3, lsr #16
 3067 0298 0338A0E1 		mov	r3, r3, asl #16
 3068 029c 2328A0E1 		mov	r2, r3, lsr #16
 3069 02a0 18301BE5 		ldr	r3, [fp, #-24]
 3070 02a4 8330A0E1 		mov	r3, r3, asl #1
 3071 02a8 033081E0 		add	r3, r1, r3
 3072 02ac B020C3E1 		strh	r2, [r3, #0]	@ movhi
  65:../sudoku_2024.c ****     		col++;
 3073              		.loc 1 65 0
 3074 02b0 18301BE5 		ldr	r3, [fp, #-24]
 3075 02b4 013083E2 		add	r3, r3, #1
 3076 02b8 18300BE5 		str	r3, [fp, #-24]
 3077              	.L9:
  63:../sudoku_2024.c ****     	while(col < (col_start + 3)){
 3078              		.loc 1 63 0 discriminator 1
 3079 02bc 24301BE5 		ldr	r3, [fp, #-36]
 3080 02c0 032083E2 		add	r2, r3, #3
 3081 02c4 18301BE5 		ldr	r3, [fp, #-24]
 3082 02c8 030052E1 		cmp	r2, r3
 3083 02cc D8FFFFCA 		bgt	.L10
  66:../sudoku_2024.c ****     	}
  67:../sudoku_2024.c ****     	row++;
 3084              		.loc 1 67 0
 3085 02d0 14301BE5 		ldr	r3, [fp, #-20]
 3086 02d4 013083E2 		add	r3, r3, #1
 3087 02d8 14300BE5 		str	r3, [fp, #-20]
 3088              	.L8:
 3089              	.LBE2:
  61:../sudoku_2024.c ****     while(row < (row_start + 3)){
 3090              		.loc 1 61 0 discriminator 1
 3091 02dc 20301BE5 		ldr	r3, [fp, #-32]
 3092 02e0 032083E2 		add	r2, r3, #3
 3093 02e4 14301BE5 		ldr	r3, [fp, #-20]
 3094 02e8 030052E1 		cmp	r2, r3
 3095 02ec CDFFFFCA 		bgt	.L11
  68:../sudoku_2024.c ****     }
  69:../sudoku_2024.c **** }
 3096              		.loc 1 69 0
 3097 02f0 0CD04BE2 		sub	sp, fp, #12
 3098 02f4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3099 02f8 1EFF2FE1 		bx	lr
 3100              	.L13:
 3101              		.align	2
 3102              	.L12:
 3103 02fc 56555555 		.word	1431655766
 3104              		.cfi_endproc
 3105              	.LFE3:
 3107              		.align	2
 3108              		.global	init_candidatos
 3110              	init_candidatos:
 3111              	.LFB4:
  70:../sudoku_2024.c **** 
  71:../sudoku_2024.c **** // Recorrer la cuadricula inicializando los candidatos de las celdas sin valor inicial (PISTA)
  72:../sudoku_2024.c **** void
  73:../sudoku_2024.c **** init_candidatos(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]){
 3112              		.loc 1 73 0
 3113              		.cfi_startproc
 3114              		@ Function supports interworking.
 3115              		@ args = 0, pretend = 0, frame = 24
 3116              		@ frame_needed = 1, uses_anonymous_args = 0
 3117 0300 0DC0A0E1 		mov	ip, sp
 3118              	.LCFI6:
 3119              		.cfi_def_cfa_register 12
 3120 0304 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3121 0308 04B04CE2 		sub	fp, ip, #4
 3122              		.cfi_offset 14, -8
 3123              		.cfi_offset 13, -12
 3124              		.cfi_offset 11, -16
 3125              	.LCFI7:
 3126              		.cfi_def_cfa 11, 4
 3127 030c 18D04DE2 		sub	sp, sp, #24
 3128 0310 20000BE5 		str	r0, [fp, #-32]
  74:../sudoku_2024.c **** 	int row=0;
 3129              		.loc 1 74 0
 3130 0314 0030A0E3 		mov	r3, #0
 3131 0318 10300BE5 		str	r3, [fp, #-16]
  75:../sudoku_2024.c **** 	while(row < NUM_FILAS){
 3132              		.loc 1 75 0
 3133 031c 2E0000EA 		b	.L15
 3134              	.L19:
 3135              	.LBB3:
  76:../sudoku_2024.c **** 		int col=0;
 3136              		.loc 1 76 0
 3137 0320 0030A0E3 		mov	r3, #0
 3138 0324 14300BE5 		str	r3, [fp, #-20]
  77:../sudoku_2024.c **** 		while(col < NUM_COLUMNAS - 7){
 3139              		.loc 1 77 0
 3140 0328 250000EA 		b	.L16
 3141              	.L18:
 3142              	.LBB4:
  78:../sudoku_2024.c **** 
  79:../sudoku_2024.c **** 			uint8_t valor_actual = celda_leer_valor(cuadricula[row][col]);
 3143              		.loc 1 79 0
 3144 032c 10301BE5 		ldr	r3, [fp, #-16]
 3145 0330 8332A0E1 		mov	r3, r3, asl #5
 3146 0334 20201BE5 		ldr	r2, [fp, #-32]
 3147 0338 032082E0 		add	r2, r2, r3
 3148 033c 14301BE5 		ldr	r3, [fp, #-20]
 3149 0340 8330A0E1 		mov	r3, r3, asl #1
 3150 0344 033082E0 		add	r3, r2, r3
 3151 0348 B030D3E1 		ldrh	r3, [r3, #0]
 3152 034c 0300A0E1 		mov	r0, r3
 3153 0350 2AFFFFEB 		bl	celda_leer_valor
 3154 0354 0030A0E1 		mov	r3, r0
 3155 0358 15304BE5 		strb	r3, [fp, #-21]
  80:../sudoku_2024.c **** 
  81:../sudoku_2024.c **** 			if(valor_actual == 0){
 3156              		.loc 1 81 0
 3157 035c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3158 0360 000053E3 		cmp	r3, #0
 3159 0364 1300001A 		bne	.L17
  82:../sudoku_2024.c **** 				cuadricula[row][col] |= 0x1FF0;
 3160              		.loc 1 82 0
 3161 0368 10301BE5 		ldr	r3, [fp, #-16]
 3162 036c 8332A0E1 		mov	r3, r3, asl #5
 3163 0370 20201BE5 		ldr	r2, [fp, #-32]
 3164 0374 031082E0 		add	r1, r2, r3
 3165 0378 10301BE5 		ldr	r3, [fp, #-16]
 3166 037c 8332A0E1 		mov	r3, r3, asl #5
 3167 0380 20201BE5 		ldr	r2, [fp, #-32]
 3168 0384 032082E0 		add	r2, r2, r3
 3169 0388 14301BE5 		ldr	r3, [fp, #-20]
 3170 038c 8330A0E1 		mov	r3, r3, asl #1
 3171 0390 033082E0 		add	r3, r2, r3
 3172 0394 B030D3E1 		ldrh	r3, [r3, #0]
 3173 0398 7F3D83E3 		orr	r3, r3, #8128
 3174 039c 303083E3 		orr	r3, r3, #48
 3175 03a0 0338A0E1 		mov	r3, r3, asl #16
 3176 03a4 2328A0E1 		mov	r2, r3, lsr #16
 3177 03a8 14301BE5 		ldr	r3, [fp, #-20]
 3178 03ac 8330A0E1 		mov	r3, r3, asl #1
 3179 03b0 033081E0 		add	r3, r1, r3
 3180 03b4 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3181              	.L17:
  83:../sudoku_2024.c **** 			}
  84:../sudoku_2024.c **** 			col++;
 3182              		.loc 1 84 0
 3183 03b8 14301BE5 		ldr	r3, [fp, #-20]
 3184 03bc 013083E2 		add	r3, r3, #1
 3185 03c0 14300BE5 		str	r3, [fp, #-20]
 3186              	.L16:
 3187              	.LBE4:
  77:../sudoku_2024.c **** 		while(col < NUM_COLUMNAS - 7){
 3188              		.loc 1 77 0 discriminator 1
 3189 03c4 14301BE5 		ldr	r3, [fp, #-20]
 3190 03c8 080053E3 		cmp	r3, #8
 3191 03cc D6FFFFDA 		ble	.L18
  85:../sudoku_2024.c **** 		}
  86:../sudoku_2024.c **** 		row++;
 3192              		.loc 1 86 0
 3193 03d0 10301BE5 		ldr	r3, [fp, #-16]
 3194 03d4 013083E2 		add	r3, r3, #1
 3195 03d8 10300BE5 		str	r3, [fp, #-16]
 3196              	.L15:
 3197              	.LBE3:
  75:../sudoku_2024.c **** 	while(row < NUM_FILAS){
 3198              		.loc 1 75 0 discriminator 1
 3199 03dc 10301BE5 		ldr	r3, [fp, #-16]
 3200 03e0 080053E3 		cmp	r3, #8
 3201 03e4 CDFFFFDA 		ble	.L19
  87:../sudoku_2024.c **** 	}
  88:../sudoku_2024.c **** }
 3202              		.loc 1 88 0
 3203 03e8 0CD04BE2 		sub	sp, fp, #12
 3204 03ec 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3205 03f0 1EFF2FE1 		bx	lr
 3206              		.cfi_endproc
 3207              	.LFE4:
 3209              		.align	2
 3210              		.global	propagar_if_value
 3212              	propagar_if_value:
 3213              	.LFB5:
  89:../sudoku_2024.c **** 
  90:../sudoku_2024.c **** // Recorrer la cuadricula aumentando la cantidad de celdas vacias (valor 0) y llamando a la funcion
  91:../sudoku_2024.c **** void
  92:../sudoku_2024.c **** propagar_if_value(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int *celdas_vacias){
 3214              		.loc 1 92 0
 3215              		.cfi_startproc
 3216              		@ Function supports interworking.
 3217              		@ args = 0, pretend = 0, frame = 24
 3218              		@ frame_needed = 1, uses_anonymous_args = 0
 3219 03f4 0DC0A0E1 		mov	ip, sp
 3220              	.LCFI8:
 3221              		.cfi_def_cfa_register 12
 3222 03f8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3223 03fc 04B04CE2 		sub	fp, ip, #4
 3224              		.cfi_offset 14, -8
 3225              		.cfi_offset 13, -12
 3226              		.cfi_offset 11, -16
 3227              	.LCFI9:
 3228              		.cfi_def_cfa 11, 4
 3229 0400 18D04DE2 		sub	sp, sp, #24
 3230 0404 20000BE5 		str	r0, [fp, #-32]
 3231 0408 24100BE5 		str	r1, [fp, #-36]
  93:../sudoku_2024.c **** 	int row=0;
 3232              		.loc 1 93 0
 3233 040c 0030A0E3 		mov	r3, #0
 3234 0410 10300BE5 		str	r3, [fp, #-16]
  94:../sudoku_2024.c **** 	while(row < NUM_FILAS){
 3235              		.loc 1 94 0
 3236 0414 250000EA 		b	.L21
 3237              	.L26:
 3238              	.LBB5:
  95:../sudoku_2024.c **** 		int col=0;
 3239              		.loc 1 95 0
 3240 0418 0030A0E3 		mov	r3, #0
 3241 041c 14300BE5 		str	r3, [fp, #-20]
  96:../sudoku_2024.c **** 		while(col < NUM_COLUMNAS - 7){
 3242              		.loc 1 96 0
 3243 0420 1C0000EA 		b	.L22
 3244              	.L25:
 3245              	.LBB6:
  97:../sudoku_2024.c **** 			uint8_t valor_actual = celda_leer_valor(cuadricula[row][col]);
 3246              		.loc 1 97 0
 3247 0424 10301BE5 		ldr	r3, [fp, #-16]
 3248 0428 8332A0E1 		mov	r3, r3, asl #5
 3249 042c 20201BE5 		ldr	r2, [fp, #-32]
 3250 0430 032082E0 		add	r2, r2, r3
 3251 0434 14301BE5 		ldr	r3, [fp, #-20]
 3252 0438 8330A0E1 		mov	r3, r3, asl #1
 3253 043c 033082E0 		add	r3, r2, r3
 3254 0440 B030D3E1 		ldrh	r3, [r3, #0]
 3255 0444 0300A0E1 		mov	r0, r3
 3256 0448 ECFEFFEB 		bl	celda_leer_valor
 3257 044c 0030A0E1 		mov	r3, r0
 3258 0450 15304BE5 		strb	r3, [fp, #-21]
  98:../sudoku_2024.c **** 			if(valor_actual == 0x0000){
 3259              		.loc 1 98 0
 3260 0454 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3261 0458 000053E3 		cmp	r3, #0
 3262 045c 0500001A 		bne	.L23
  99:../sudoku_2024.c **** 				(*celdas_vacias)++;
 3263              		.loc 1 99 0
 3264 0460 24301BE5 		ldr	r3, [fp, #-36]
 3265 0464 003093E5 		ldr	r3, [r3, #0]
 3266 0468 012083E2 		add	r2, r3, #1
 3267 046c 24301BE5 		ldr	r3, [fp, #-36]
 3268 0470 002083E5 		str	r2, [r3, #0]
 3269 0474 040000EA 		b	.L24
 3270              	.L23:
 100:../sudoku_2024.c **** 			} else {
 101:../sudoku_2024.c **** 				sudoku_candidatos_propagar_c(cuadricula, row, col, valor_actual);
 3271              		.loc 1 101 0
 3272 0478 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3273 047c 20001BE5 		ldr	r0, [fp, #-32]
 3274 0480 10101BE5 		ldr	r1, [fp, #-16]
 3275 0484 14201BE5 		ldr	r2, [fp, #-20]
 3276 0488 FEFFFFEB 		bl	sudoku_candidatos_propagar_c
 3277              	.L24:
 102:../sudoku_2024.c **** 			}
 103:../sudoku_2024.c **** 			col++;
 3278              		.loc 1 103 0
 3279 048c 14301BE5 		ldr	r3, [fp, #-20]
 3280 0490 013083E2 		add	r3, r3, #1
 3281 0494 14300BE5 		str	r3, [fp, #-20]
 3282              	.L22:
 3283              	.LBE6:
  96:../sudoku_2024.c **** 		while(col < NUM_COLUMNAS - 7){
 3284              		.loc 1 96 0 discriminator 1
 3285 0498 14301BE5 		ldr	r3, [fp, #-20]
 3286 049c 080053E3 		cmp	r3, #8
 3287 04a0 DFFFFFDA 		ble	.L25
 104:../sudoku_2024.c **** 		}
 105:../sudoku_2024.c **** 		row++;
 3288              		.loc 1 105 0
 3289 04a4 10301BE5 		ldr	r3, [fp, #-16]
 3290 04a8 013083E2 		add	r3, r3, #1
 3291 04ac 10300BE5 		str	r3, [fp, #-16]
 3292              	.L21:
 3293              	.LBE5:
  94:../sudoku_2024.c **** 	while(row < NUM_FILAS){
 3294              		.loc 1 94 0 discriminator 1
 3295 04b0 10301BE5 		ldr	r3, [fp, #-16]
 3296 04b4 080053E3 		cmp	r3, #8
 3297 04b8 D6FFFFDA 		ble	.L26
 106:../sudoku_2024.c **** 	}
 107:../sudoku_2024.c **** }
 3298              		.loc 1 107 0
 3299 04bc 0CD04BE2 		sub	sp, fp, #12
 3300 04c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3301 04c4 1EFF2FE1 		bx	lr
 3302              		.cfi_endproc
 3303              	.LFE5:
 3305              		.align	2
 3307              	sudoku_candidatos_init_c:
 3308              	.LFB6:
 108:../sudoku_2024.c **** 
 109:../sudoku_2024.c **** /* *****************************************************************************
 110:../sudoku_2024.c ****  * calcula todas las listas de candidatos (9x9)
 111:../sudoku_2024.c ****  * necesario tras borrar o cambiar un valor (listas corrompidas)
 112:../sudoku_2024.c ****  * retorna el numero de celdas vacias */
 113:../sudoku_2024.c **** static int
 114:../sudoku_2024.c **** sudoku_candidatos_init_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS])
 115:../sudoku_2024.c **** {
 3309              		.loc 1 115 0
 3310              		.cfi_startproc
 3311              		@ Function supports interworking.
 3312              		@ args = 0, pretend = 0, frame = 24
 3313              		@ frame_needed = 1, uses_anonymous_args = 0
 3314 04c8 0DC0A0E1 		mov	ip, sp
 3315              	.LCFI10:
 3316              		.cfi_def_cfa_register 12
 3317 04cc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3318 04d0 04B04CE2 		sub	fp, ip, #4
 3319              		.cfi_offset 14, -8
 3320              		.cfi_offset 13, -12
 3321              		.cfi_offset 11, -16
 3322              	.LCFI11:
 3323              		.cfi_def_cfa 11, 4
 3324 04d4 18D04DE2 		sub	sp, sp, #24
 3325 04d8 20000BE5 		str	r0, [fp, #-32]
 116:../sudoku_2024.c ****  	int celdas_vacias = 0;
 3326              		.loc 1 116 0
 3327 04dc 0030A0E3 		mov	r3, #0
 3328 04e0 18300BE5 		str	r3, [fp, #-24]
 117:../sudoku_2024.c ****  	int version_ejecucion = 1;
 3329              		.loc 1 117 0
 3330 04e4 0130A0E3 		mov	r3, #1
 3331 04e8 10300BE5 		str	r3, [fp, #-16]
 118:../sudoku_2024.c **** 	/*TODO: inicializa lista de candidatos */
 119:../sudoku_2024.c ****     init_candidatos(cuadricula);
 3332              		.loc 1 119 0
 3333 04ec 20001BE5 		ldr	r0, [fp, #-32]
 3334 04f0 FEFFFFEB 		bl	init_candidatos
 120:../sudoku_2024.c **** 
 121:../sudoku_2024.c ****     /* TODO: propagar si la celda tiene valor*/
 122:../sudoku_2024.c ****     uint8_t valor_actual = celda_leer_valor(cuadricula[0][0]);
 3335              		.loc 1 122 0
 3336 04f4 20301BE5 		ldr	r3, [fp, #-32]
 3337 04f8 B030D3E1 		ldrh	r3, [r3, #0]
 3338 04fc 0300A0E1 		mov	r0, r3
 3339 0500 BEFEFFEB 		bl	celda_leer_valor
 3340 0504 0030A0E1 		mov	r3, r0
 3341 0508 11304BE5 		strb	r3, [fp, #-17]
 123:../sudoku_2024.c **** 
 124:../sudoku_2024.c ****     switch (version_ejecucion) {
 3342              		.loc 1 124 0
 3343 050c 10301BE5 		ldr	r3, [fp, #-16]
 3344 0510 020053E3 		cmp	r3, #2
 3345 0514 0800000A 		beq	.L30
 3346 0518 030053E3 		cmp	r3, #3
 3347 051c 0E00000A 		beq	.L33
 3348 0520 010053E3 		cmp	r3, #1
 3349 0524 0E00001A 		bne	.L34
 3350              	.L29:
 125:../sudoku_2024.c ****     	case 1:
 126:../sudoku_2024.c ****     		propagar_if_value(cuadricula, &celdas_vacias);
 3351              		.loc 1 126 0
 3352 0528 18304BE2 		sub	r3, fp, #24
 3353 052c 20001BE5 		ldr	r0, [fp, #-32]
 3354 0530 0310A0E1 		mov	r1, r3
 3355 0534 FEFFFFEB 		bl	propagar_if_value
 127:../sudoku_2024.c ****             break;
 3356              		.loc 1 127 0
 3357 0538 0A0000EA 		b	.L32
 3358              	.L30:
 128:../sudoku_2024.c ****     	case 2:
 129:../sudoku_2024.c ****     		celdas_vacias = sudoku_candidatos_propagar_arm(cuadricula, 0, 0, valor_actual);
 3359              		.loc 1 129 0
 3360 053c 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 3361 0540 20001BE5 		ldr	r0, [fp, #-32]
 3362 0544 0010A0E3 		mov	r1, #0
 3363 0548 0020A0E3 		mov	r2, #0
 3364 054c FEFFFFEB 		bl	sudoku_candidatos_propagar_arm
 3365 0550 0030A0E1 		mov	r3, r0
 3366 0554 18300BE5 		str	r3, [fp, #-24]
 130:../sudoku_2024.c ****             break;
 3367              		.loc 1 130 0
 3368 0558 020000EA 		b	.L32
 3369              	.L33:
 131:../sudoku_2024.c ****     	case 3:
 132:../sudoku_2024.c ****     		//celdas_vacias = sudoku_candidatos_propagar_thumb(cuadricula, 0, 0);
 133:../sudoku_2024.c ****             break;
 3370              		.loc 1 133 0
 3371 055c 0000A0E1 		mov	r0, r0	@ nop
 3372 0560 000000EA 		b	.L32
 3373              	.L34:
 134:../sudoku_2024.c ****     	default:
 135:../sudoku_2024.c ****     		//Versión de ejecución no válida
 136:../sudoku_2024.c ****             break;
 3374              		.loc 1 136 0
 3375 0564 0000A0E1 		mov	r0, r0	@ nop
 3376              	.L32:
 137:../sudoku_2024.c ****     }
 138:../sudoku_2024.c **** 
 139:../sudoku_2024.c ****     return celdas_vacias;
 3377              		.loc 1 139 0
 3378 0568 18301BE5 		ldr	r3, [fp, #-24]
 140:../sudoku_2024.c **** }
 3379              		.loc 1 140 0
 3380 056c 0300A0E1 		mov	r0, r3
 3381 0570 0CD04BE2 		sub	sp, fp, #12
 3382 0574 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3383 0578 1EFF2FE1 		bx	lr
 3384              		.cfi_endproc
 3385              	.LFE6:
 3387              		.align	2
 3389              	cuadricula_candidatos_verificar:
 3390              	.LFB7:
 141:../sudoku_2024.c **** 
 142:../sudoku_2024.c **** 
 143:../sudoku_2024.c **** static void
 144:../sudoku_2024.c **** cuadricula_candidatos_verificar(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS],int row, int col, int *er
 3391              		.loc 1 144 0
 3392              		.cfi_startproc
 3393              		@ Function supports interworking.
 3394              		@ args = 0, pretend = 0, frame = 56
 3395              		@ frame_needed = 1, uses_anonymous_args = 0
 3396 057c 0DC0A0E1 		mov	ip, sp
 3397              	.LCFI12:
 3398              		.cfi_def_cfa_register 12
 3399 0580 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3400 0584 04B04CE2 		sub	fp, ip, #4
 3401              		.cfi_offset 14, -8
 3402              		.cfi_offset 13, -12
 3403              		.cfi_offset 11, -16
 3404              	.LCFI13:
 3405              		.cfi_def_cfa 11, 4
 3406 0588 38D04DE2 		sub	sp, sp, #56
 3407 058c 38000BE5 		str	r0, [fp, #-56]
 3408 0590 3C100BE5 		str	r1, [fp, #-60]
 3409 0594 40200BE5 		str	r2, [fp, #-64]
 3410 0598 44300BE5 		str	r3, [fp, #-68]
 145:../sudoku_2024.c **** 
 146:../sudoku_2024.c **** 	uint8_t valor = celda_leer_valor(cuadricula[row][col]);
 3411              		.loc 1 146 0
 3412 059c 3C301BE5 		ldr	r3, [fp, #-60]
 3413 05a0 8332A0E1 		mov	r3, r3, asl #5
 3414 05a4 38201BE5 		ldr	r2, [fp, #-56]
 3415 05a8 032082E0 		add	r2, r2, r3
 3416 05ac 40301BE5 		ldr	r3, [fp, #-64]
 3417 05b0 8330A0E1 		mov	r3, r3, asl #1
 3418 05b4 033082E0 		add	r3, r2, r3
 3419 05b8 B030D3E1 		ldrh	r3, [r3, #0]
 3420 05bc 0300A0E1 		mov	r0, r3
 3421 05c0 8EFEFFEB 		bl	celda_leer_valor
 3422 05c4 0030A0E1 		mov	r3, r0
 3423 05c8 19304BE5 		strb	r3, [fp, #-25]
 147:../sudoku_2024.c **** 
 148:../sudoku_2024.c **** 	if(valor != 0x0000){
 3424              		.loc 1 148 0
 3425 05cc 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 3426 05d0 000053E3 		cmp	r3, #0
 3427 05d4 B200000A 		beq	.L35
 3428              	.LBB7:
 149:../sudoku_2024.c **** 		int displace = 3 + (int)valor;
 3429              		.loc 1 149 0
 3430 05d8 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 3431 05dc 033083E2 		add	r3, r3, #3
 3432 05e0 20300BE5 		str	r3, [fp, #-32]
 150:../sudoku_2024.c **** 
 151:../sudoku_2024.c **** 		//Verificar el valor en toda la fila (Horizontal)
 152:../sudoku_2024.c **** 		int j = 0;
 3433              		.loc 1 152 0
 3434 05e4 0030A0E3 		mov	r3, #0
 3435 05e8 10300BE5 		str	r3, [fp, #-16]
 153:../sudoku_2024.c **** 		while( j < NUM_COLUMNAS - 7){
 3436              		.loc 1 153 0
 3437 05ec 280000EA 		b	.L37
 3438              	.L39:
 3439              	.LBB8:
 154:../sudoku_2024.c **** 			uint8_t is_bit_set = cuadricula[row][j] & (1 << displace);
 3440              		.loc 1 154 0
 3441 05f0 3C301BE5 		ldr	r3, [fp, #-60]
 3442 05f4 8332A0E1 		mov	r3, r3, asl #5
 3443 05f8 38201BE5 		ldr	r2, [fp, #-56]
 3444 05fc 032082E0 		add	r2, r2, r3
 3445 0600 10301BE5 		ldr	r3, [fp, #-16]
 3446 0604 8330A0E1 		mov	r3, r3, asl #1
 3447 0608 033082E0 		add	r3, r2, r3
 3448 060c B030D3E1 		ldrh	r3, [r3, #0]
 3449 0610 FF2003E2 		and	r2, r3, #255
 3450 0614 0110A0E3 		mov	r1, #1
 3451 0618 20301BE5 		ldr	r3, [fp, #-32]
 3452 061c 1133A0E1 		mov	r3, r1, asl r3
 3453 0620 FF3003E2 		and	r3, r3, #255
 3454 0624 033002E0 		and	r3, r2, r3
 3455 0628 FF3003E2 		and	r3, r3, #255
 3456 062c 21304BE5 		strb	r3, [fp, #-33]
 155:../sudoku_2024.c **** 
 156:../sudoku_2024.c **** 			if(j != col && is_bit_set){
 3457              		.loc 1 156 0
 3458 0630 10201BE5 		ldr	r2, [fp, #-16]
 3459 0634 40301BE5 		ldr	r3, [fp, #-64]
 3460 0638 030052E1 		cmp	r2, r3
 3461 063c 1100000A 		beq	.L38
 3462              		.loc 1 156 0 is_stmt 0 discriminator 1
 3463 0640 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 3464 0644 000053E3 		cmp	r3, #0
 3465 0648 0E00000A 		beq	.L38
 157:../sudoku_2024.c **** 				activar_error(cuadricula[row][j]);
 3466              		.loc 1 157 0 is_stmt 1
 3467 064c 3C301BE5 		ldr	r3, [fp, #-60]
 3468 0650 8332A0E1 		mov	r3, r3, asl #5
 3469 0654 38201BE5 		ldr	r2, [fp, #-56]
 3470 0658 032082E0 		add	r2, r2, r3
 3471 065c 10301BE5 		ldr	r3, [fp, #-16]
 3472 0660 8330A0E1 		mov	r3, r3, asl #1
 3473 0664 033082E0 		add	r3, r2, r3
 3474 0668 B030D3E1 		ldrh	r3, [r3, #0]
 3475 066c 0300A0E1 		mov	r0, r3
 3476 0670 70FEFFEB 		bl	activar_error
 158:../sudoku_2024.c **** 				(*errors)++;
 3477              		.loc 1 158 0
 3478 0674 44301BE5 		ldr	r3, [fp, #-68]
 3479 0678 003093E5 		ldr	r3, [r3, #0]
 3480 067c 012083E2 		add	r2, r3, #1
 3481 0680 44301BE5 		ldr	r3, [fp, #-68]
 3482 0684 002083E5 		str	r2, [r3, #0]
 3483              	.L38:
 159:../sudoku_2024.c **** 			}
 160:../sudoku_2024.c **** 			j++;
 3484              		.loc 1 160 0
 3485 0688 10301BE5 		ldr	r3, [fp, #-16]
 3486 068c 013083E2 		add	r3, r3, #1
 3487 0690 10300BE5 		str	r3, [fp, #-16]
 3488              	.L37:
 3489              	.LBE8:
 153:../sudoku_2024.c **** 		while( j < NUM_COLUMNAS - 7){
 3490              		.loc 1 153 0 discriminator 1
 3491 0694 10301BE5 		ldr	r3, [fp, #-16]
 3492 0698 080053E3 		cmp	r3, #8
 3493 069c D3FFFFDA 		ble	.L39
 161:../sudoku_2024.c **** 		}
 162:../sudoku_2024.c **** 
 163:../sudoku_2024.c **** 		//Verificar el valor en toda la columna (Vertical)
 164:../sudoku_2024.c **** 		int i = 0;
 3494              		.loc 1 164 0
 3495 06a0 0030A0E3 		mov	r3, #0
 3496 06a4 14300BE5 		str	r3, [fp, #-20]
 165:../sudoku_2024.c **** 		while(i < NUM_FILAS){
 3497              		.loc 1 165 0
 3498 06a8 280000EA 		b	.L40
 3499              	.L42:
 3500              	.LBB9:
 166:../sudoku_2024.c **** 			uint8_t is_bit_set = cuadricula[i][col] & (1 << displace);
 3501              		.loc 1 166 0
 3502 06ac 14301BE5 		ldr	r3, [fp, #-20]
 3503 06b0 8332A0E1 		mov	r3, r3, asl #5
 3504 06b4 38201BE5 		ldr	r2, [fp, #-56]
 3505 06b8 032082E0 		add	r2, r2, r3
 3506 06bc 40301BE5 		ldr	r3, [fp, #-64]
 3507 06c0 8330A0E1 		mov	r3, r3, asl #1
 3508 06c4 033082E0 		add	r3, r2, r3
 3509 06c8 B030D3E1 		ldrh	r3, [r3, #0]
 3510 06cc FF2003E2 		and	r2, r3, #255
 3511 06d0 0110A0E3 		mov	r1, #1
 3512 06d4 20301BE5 		ldr	r3, [fp, #-32]
 3513 06d8 1133A0E1 		mov	r3, r1, asl r3
 3514 06dc FF3003E2 		and	r3, r3, #255
 3515 06e0 033002E0 		and	r3, r2, r3
 3516 06e4 FF3003E2 		and	r3, r3, #255
 3517 06e8 22304BE5 		strb	r3, [fp, #-34]
 167:../sudoku_2024.c **** 			if(i != row && is_bit_set){
 3518              		.loc 1 167 0
 3519 06ec 14201BE5 		ldr	r2, [fp, #-20]
 3520 06f0 3C301BE5 		ldr	r3, [fp, #-60]
 3521 06f4 030052E1 		cmp	r2, r3
 3522 06f8 1100000A 		beq	.L41
 3523              		.loc 1 167 0 is_stmt 0 discriminator 1
 3524 06fc 22305BE5 		ldrb	r3, [fp, #-34]	@ zero_extendqisi2
 3525 0700 000053E3 		cmp	r3, #0
 3526 0704 0E00000A 		beq	.L41
 168:../sudoku_2024.c **** 				activar_error(cuadricula[i][col]);
 3527              		.loc 1 168 0 is_stmt 1
 3528 0708 14301BE5 		ldr	r3, [fp, #-20]
 3529 070c 8332A0E1 		mov	r3, r3, asl #5
 3530 0710 38201BE5 		ldr	r2, [fp, #-56]
 3531 0714 032082E0 		add	r2, r2, r3
 3532 0718 40301BE5 		ldr	r3, [fp, #-64]
 3533 071c 8330A0E1 		mov	r3, r3, asl #1
 3534 0720 033082E0 		add	r3, r2, r3
 3535 0724 B030D3E1 		ldrh	r3, [r3, #0]
 3536 0728 0300A0E1 		mov	r0, r3
 3537 072c 41FEFFEB 		bl	activar_error
 169:../sudoku_2024.c **** 				(*errors)++;
 3538              		.loc 1 169 0
 3539 0730 44301BE5 		ldr	r3, [fp, #-68]
 3540 0734 003093E5 		ldr	r3, [r3, #0]
 3541 0738 012083E2 		add	r2, r3, #1
 3542 073c 44301BE5 		ldr	r3, [fp, #-68]
 3543 0740 002083E5 		str	r2, [r3, #0]
 3544              	.L41:
 170:../sudoku_2024.c **** 			}
 171:../sudoku_2024.c **** 			i++;
 3545              		.loc 1 171 0
 3546 0744 14301BE5 		ldr	r3, [fp, #-20]
 3547 0748 013083E2 		add	r3, r3, #1
 3548 074c 14300BE5 		str	r3, [fp, #-20]
 3549              	.L40:
 3550              	.LBE9:
 165:../sudoku_2024.c **** 		while(i < NUM_FILAS){
 3551              		.loc 1 165 0 discriminator 1
 3552 0750 14301BE5 		ldr	r3, [fp, #-20]
 3553 0754 080053E3 		cmp	r3, #8
 3554 0758 D3FFFFDA 		ble	.L42
 172:../sudoku_2024.c **** 		}
 173:../sudoku_2024.c **** 
 174:../sudoku_2024.c **** 		/*Calcular la posicion inicial para seccion correspondiente a la ubicacion actual*/
 175:../sudoku_2024.c **** 		int row_start = (row / 3) * 3;
 3555              		.loc 1 175 0
 3556 075c 3C301BE5 		ldr	r3, [fp, #-60]
 3557 0760 48219FE5 		ldr	r2, .L49
 3558 0764 9312C2E0 		smull	r1, r2, r3, r2
 3559 0768 C33FA0E1 		mov	r3, r3, asr #31
 3560 076c 022063E0 		rsb	r2, r3, r2
 3561 0770 0230A0E1 		mov	r3, r2
 3562 0774 8330A0E1 		mov	r3, r3, asl #1
 3563 0778 023083E0 		add	r3, r3, r2
 3564 077c 28300BE5 		str	r3, [fp, #-40]
 176:../sudoku_2024.c **** 		int col_start = (col / 3) * 3;
 3565              		.loc 1 176 0
 3566 0780 40301BE5 		ldr	r3, [fp, #-64]
 3567 0784 24219FE5 		ldr	r2, .L49
 3568 0788 9312C2E0 		smull	r1, r2, r3, r2
 3569 078c C33FA0E1 		mov	r3, r3, asr #31
 3570 0790 022063E0 		rsb	r2, r3, r2
 3571 0794 0230A0E1 		mov	r3, r2
 3572 0798 8330A0E1 		mov	r3, r3, asl #1
 3573 079c 023083E0 		add	r3, r3, r2
 3574 07a0 2C300BE5 		str	r3, [fp, #-44]
 177:../sudoku_2024.c **** 
 178:../sudoku_2024.c **** 		//Verificar valor en la seccion (cuadro 3x3)
 179:../sudoku_2024.c **** 		i = row_start;
 3575              		.loc 1 179 0
 3576 07a4 28301BE5 		ldr	r3, [fp, #-40]
 3577 07a8 14300BE5 		str	r3, [fp, #-20]
 180:../sudoku_2024.c **** 		while(i < (row_start + 3)){
 3578              		.loc 1 180 0
 3579 07ac 370000EA 		b	.L43
 3580              	.L48:
 3581              	.LBB10:
 181:../sudoku_2024.c **** 			int j = col_start;
 3582              		.loc 1 181 0
 3583 07b0 2C301BE5 		ldr	r3, [fp, #-44]
 3584 07b4 18300BE5 		str	r3, [fp, #-24]
 182:../sudoku_2024.c **** 			while(j < (col_start + 3)){
 3585              		.loc 1 182 0
 3586 07b8 2C0000EA 		b	.L44
 3587              	.L47:
 3588              	.LBB11:
 183:../sudoku_2024.c **** 				uint8_t is_bit_set = cuadricula[i][j] & (1 << displace);
 3589              		.loc 1 183 0
 3590 07bc 14301BE5 		ldr	r3, [fp, #-20]
 3591 07c0 8332A0E1 		mov	r3, r3, asl #5
 3592 07c4 38201BE5 		ldr	r2, [fp, #-56]
 3593 07c8 032082E0 		add	r2, r2, r3
 3594 07cc 18301BE5 		ldr	r3, [fp, #-24]
 3595 07d0 8330A0E1 		mov	r3, r3, asl #1
 3596 07d4 033082E0 		add	r3, r2, r3
 3597 07d8 B030D3E1 		ldrh	r3, [r3, #0]
 3598 07dc FF2003E2 		and	r2, r3, #255
 3599 07e0 0110A0E3 		mov	r1, #1
 3600 07e4 20301BE5 		ldr	r3, [fp, #-32]
 3601 07e8 1133A0E1 		mov	r3, r1, asl r3
 3602 07ec FF3003E2 		and	r3, r3, #255
 3603 07f0 033002E0 		and	r3, r2, r3
 3604 07f4 FF3003E2 		and	r3, r3, #255
 3605 07f8 2D304BE5 		strb	r3, [fp, #-45]
 184:../sudoku_2024.c **** 				if((i != row_start || j != col_start) && is_bit_set){
 3606              		.loc 1 184 0
 3607 07fc 14201BE5 		ldr	r2, [fp, #-20]
 3608 0800 28301BE5 		ldr	r3, [fp, #-40]
 3609 0804 030052E1 		cmp	r2, r3
 3610 0808 0300001A 		bne	.L45
 3611              		.loc 1 184 0 is_stmt 0 discriminator 2
 3612 080c 18201BE5 		ldr	r2, [fp, #-24]
 3613 0810 2C301BE5 		ldr	r3, [fp, #-44]
 3614 0814 030052E1 		cmp	r2, r3
 3615 0818 1100000A 		beq	.L46
 3616              	.L45:
 3617              		.loc 1 184 0 discriminator 1
 3618 081c 2D305BE5 		ldrb	r3, [fp, #-45]	@ zero_extendqisi2
 3619 0820 000053E3 		cmp	r3, #0
 3620 0824 0E00000A 		beq	.L46
 185:../sudoku_2024.c **** 					activar_error(cuadricula[i][j]);
 3621              		.loc 1 185 0 is_stmt 1
 3622 0828 14301BE5 		ldr	r3, [fp, #-20]
 3623 082c 8332A0E1 		mov	r3, r3, asl #5
 3624 0830 38201BE5 		ldr	r2, [fp, #-56]
 3625 0834 032082E0 		add	r2, r2, r3
 3626 0838 18301BE5 		ldr	r3, [fp, #-24]
 3627 083c 8330A0E1 		mov	r3, r3, asl #1
 3628 0840 033082E0 		add	r3, r2, r3
 3629 0844 B030D3E1 		ldrh	r3, [r3, #0]
 3630 0848 0300A0E1 		mov	r0, r3
 3631 084c F9FDFFEB 		bl	activar_error
 186:../sudoku_2024.c **** 					(*errors)++;
 3632              		.loc 1 186 0
 3633 0850 44301BE5 		ldr	r3, [fp, #-68]
 3634 0854 003093E5 		ldr	r3, [r3, #0]
 3635 0858 012083E2 		add	r2, r3, #1
 3636 085c 44301BE5 		ldr	r3, [fp, #-68]
 3637 0860 002083E5 		str	r2, [r3, #0]
 3638              	.L46:
 187:../sudoku_2024.c **** 				}
 188:../sudoku_2024.c **** 				j++;
 3639              		.loc 1 188 0
 3640 0864 18301BE5 		ldr	r3, [fp, #-24]
 3641 0868 013083E2 		add	r3, r3, #1
 3642 086c 18300BE5 		str	r3, [fp, #-24]
 3643              	.L44:
 3644              	.LBE11:
 182:../sudoku_2024.c **** 			while(j < (col_start + 3)){
 3645              		.loc 1 182 0 discriminator 1
 3646 0870 2C301BE5 		ldr	r3, [fp, #-44]
 3647 0874 032083E2 		add	r2, r3, #3
 3648 0878 18301BE5 		ldr	r3, [fp, #-24]
 3649 087c 030052E1 		cmp	r2, r3
 3650 0880 CDFFFFCA 		bgt	.L47
 189:../sudoku_2024.c **** 			}
 190:../sudoku_2024.c **** 			i++;
 3651              		.loc 1 190 0
 3652 0884 14301BE5 		ldr	r3, [fp, #-20]
 3653 0888 013083E2 		add	r3, r3, #1
 3654 088c 14300BE5 		str	r3, [fp, #-20]
 3655              	.L43:
 3656              	.LBE10:
 180:../sudoku_2024.c **** 		while(i < (row_start + 3)){
 3657              		.loc 1 180 0 discriminator 1
 3658 0890 28301BE5 		ldr	r3, [fp, #-40]
 3659 0894 032083E2 		add	r2, r3, #3
 3660 0898 14301BE5 		ldr	r3, [fp, #-20]
 3661 089c 030052E1 		cmp	r2, r3
 3662 08a0 C2FFFFCA 		bgt	.L48
 3663              	.L35:
 3664              	.LBE7:
 191:../sudoku_2024.c **** 		}
 192:../sudoku_2024.c **** 	}
 193:../sudoku_2024.c **** }
 3665              		.loc 1 193 0
 3666 08a4 0CD04BE2 		sub	sp, fp, #12
 3667 08a8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3668 08ac 1EFF2FE1 		bx	lr
 3669              	.L50:
 3670              		.align	2
 3671              	.L49:
 3672 08b0 56555555 		.word	1431655766
 3673              		.cfi_endproc
 3674              	.LFE7:
 3676              		.align	2
 3678              	verificar_lista_calculada:
 3679              	.LFB8:
 194:../sudoku_2024.c **** 
 195:../sudoku_2024.c **** static void
 196:../sudoku_2024.c **** verificar_lista_calculada(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]){
 3680              		.loc 1 196 0
 3681              		.cfi_startproc
 3682              		@ Function supports interworking.
 3683              		@ args = 0, pretend = 0, frame = 24
 3684              		@ frame_needed = 1, uses_anonymous_args = 0
 3685 08b4 0DC0A0E1 		mov	ip, sp
 3686              	.LCFI14:
 3687              		.cfi_def_cfa_register 12
 3688 08b8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3689 08bc 04B04CE2 		sub	fp, ip, #4
 3690              		.cfi_offset 14, -8
 3691              		.cfi_offset 13, -12
 3692              		.cfi_offset 11, -16
 3693              	.LCFI15:
 3694              		.cfi_def_cfa 11, 4
 3695 08c0 18D04DE2 		sub	sp, sp, #24
 3696 08c4 20000BE5 		str	r0, [fp, #-32]
 197:../sudoku_2024.c **** 	int errors = 0;
 3697              		.loc 1 197 0
 3698 08c8 0030A0E3 		mov	r3, #0
 3699 08cc 18300BE5 		str	r3, [fp, #-24]
 198:../sudoku_2024.c **** 	    int row = 0;
 3700              		.loc 1 198 0
 3701 08d0 0030A0E3 		mov	r3, #0
 3702 08d4 10300BE5 		str	r3, [fp, #-16]
 199:../sudoku_2024.c **** 	    while(row < NUM_FILAS){
 3703              		.loc 1 199 0
 3704 08d8 100000EA 		b	.L52
 3705              	.L55:
 3706              	.LBB12:
 200:../sudoku_2024.c **** 			int col = 0;
 3707              		.loc 1 200 0
 3708 08dc 0030A0E3 		mov	r3, #0
 3709 08e0 14300BE5 		str	r3, [fp, #-20]
 201:../sudoku_2024.c **** 	    	while(col < NUM_COLUMNAS - 7){
 3710              		.loc 1 201 0
 3711 08e4 070000EA 		b	.L53
 3712              	.L54:
 202:../sudoku_2024.c **** 	    		cuadricula_candidatos_verificar(cuadricula, row, col, &errors);
 3713              		.loc 1 202 0
 3714 08e8 18304BE2 		sub	r3, fp, #24
 3715 08ec 20001BE5 		ldr	r0, [fp, #-32]
 3716 08f0 10101BE5 		ldr	r1, [fp, #-16]
 3717 08f4 14201BE5 		ldr	r2, [fp, #-20]
 3718 08f8 1FFFFFEB 		bl	cuadricula_candidatos_verificar
 203:../sudoku_2024.c **** 	    		col++;
 3719              		.loc 1 203 0
 3720 08fc 14301BE5 		ldr	r3, [fp, #-20]
 3721 0900 013083E2 		add	r3, r3, #1
 3722 0904 14300BE5 		str	r3, [fp, #-20]
 3723              	.L53:
 201:../sudoku_2024.c **** 	    	while(col < NUM_COLUMNAS - 7){
 3724              		.loc 1 201 0 discriminator 1
 3725 0908 14301BE5 		ldr	r3, [fp, #-20]
 3726 090c 080053E3 		cmp	r3, #8
 3727 0910 F4FFFFDA 		ble	.L54
 204:../sudoku_2024.c **** 	    	}
 205:../sudoku_2024.c **** 	    	row++;
 3728              		.loc 1 205 0
 3729 0914 10301BE5 		ldr	r3, [fp, #-16]
 3730 0918 013083E2 		add	r3, r3, #1
 3731 091c 10300BE5 		str	r3, [fp, #-16]
 3732              	.L52:
 3733              	.LBE12:
 199:../sudoku_2024.c **** 	    while(row < NUM_FILAS){
 3734              		.loc 1 199 0 discriminator 1
 3735 0920 10301BE5 		ldr	r3, [fp, #-16]
 3736 0924 080053E3 		cmp	r3, #8
 3737 0928 EBFFFFDA 		ble	.L55
 206:../sudoku_2024.c **** 	    }
 207:../sudoku_2024.c **** }
 3738              		.loc 1 207 0
 3739 092c 0CD04BE2 		sub	sp, fp, #12
 3740 0930 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3741 0934 1EFF2FE1 		bx	lr
 3742              		.cfi_endproc
 3743              	.LFE8:
 3745              		.align	2
 3746              		.global	sudoku9x9
 3748              	sudoku9x9:
 3749              	.LFB9:
 208:../sudoku_2024.c **** /* *****************************************************************************
 209:../sudoku_2024.c ****  * Funciones publicas
 210:../sudoku_2024.c ****  * (pueden ser invocadas desde otro fichero) */
 211:../sudoku_2024.c **** 
 212:../sudoku_2024.c **** /* *******************************************cuadricula[NUM_FILAS][NUM_COLUMNAS]******************
 213:../sudoku_2024.c ****  * programa principal del juego que recibe el tablero,
 214:../sudoku_2024.c ****  * y la senyal de ready que indica que se han actualizado fila y columna */
 215:../sudoku_2024.c **** void
 216:../sudoku_2024.c **** sudoku9x9(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], char *ready)
 217:../sudoku_2024.c **** {
 3750              		.loc 1 217 0
 3751              		.cfi_startproc
 3752              		@ Function supports interworking.
 3753              		@ args = 0, pretend = 0, frame = 16
 3754              		@ frame_needed = 1, uses_anonymous_args = 0
 3755 0938 0DC0A0E1 		mov	ip, sp
 3756              	.LCFI16:
 3757              		.cfi_def_cfa_register 12
 3758 093c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3759 0940 04B04CE2 		sub	fp, ip, #4
 3760              		.cfi_offset 14, -8
 3761              		.cfi_offset 13, -12
 3762              		.cfi_offset 11, -16
 3763              	.LCFI17:
 3764              		.cfi_def_cfa 11, 4
 3765 0944 10D04DE2 		sub	sp, sp, #16
 3766 0948 18000BE5 		str	r0, [fp, #-24]
 3767 094c 1C100BE5 		str	r1, [fp, #-28]
 218:../sudoku_2024.c ****     int celdas_vacias;
 219:../sudoku_2024.c **** 
 220:../sudoku_2024.c ****     /* calcula lista de candidatos, versin C */
 221:../sudoku_2024.c ****     celdas_vacias = sudoku_candidatos_init_c(cuadricula);
 3768              		.loc 1 221 0
 3769 0950 18001BE5 		ldr	r0, [fp, #-24]
 3770 0954 DBFEFFEB 		bl	sudoku_candidatos_init_c
 3771 0958 10000BE5 		str	r0, [fp, #-16]
 222:../sudoku_2024.c **** 
 223:../sudoku_2024.c ****     /* verificar que la lista de candidatos calculada es correcta */
 224:../sudoku_2024.c ****     verificar_lista_calculada(cuadricula);
 3772              		.loc 1 224 0
 3773 095c 18001BE5 		ldr	r0, [fp, #-24]
 3774 0960 D3FFFFEB 		bl	verificar_lista_calculada
 225:../sudoku_2024.c ****     /* repetir para otras versiones (C optimizado, ARM, THUMB) */
 226:../sudoku_2024.c **** }
 3775              		.loc 1 226 0
 3776 0964 0CD04BE2 		sub	sp, fp, #12
 3777 0968 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3778 096c 1EFF2FE1 		bx	lr
 3779              		.cfi_endproc
 3780              	.LFE9:
 3782              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 sudoku_2024.c
C:\Users\Jorge\AppData\Local\Temp\cc6Vxw7y.s:2817   .text:00000000 $a
C:\Users\Jorge\AppData\Local\Temp\cc6Vxw7y.s:2819   .text:00000000 celda_leer_valor
C:\Users\Jorge\AppData\Local\Temp\cc6Vxw7y.s:2854   .text:00000038 activar_error
C:\Users\Jorge\AppData\Local\Temp\cc6Vxw7y.s:2888   .text:00000068 sudoku_candidatos_propagar_c
C:\Users\Jorge\AppData\Local\Temp\cc6Vxw7y.s:3103   .text:000002fc $d
C:\Users\Jorge\AppData\Local\Temp\cc6Vxw7y.s:3107   .text:00000300 $a
C:\Users\Jorge\AppData\Local\Temp\cc6Vxw7y.s:3110   .text:00000300 init_candidatos
C:\Users\Jorge\AppData\Local\Temp\cc6Vxw7y.s:3212   .text:000003f4 propagar_if_value
C:\Users\Jorge\AppData\Local\Temp\cc6Vxw7y.s:3307   .text:000004c8 sudoku_candidatos_init_c
C:\Users\Jorge\AppData\Local\Temp\cc6Vxw7y.s:3389   .text:0000057c cuadricula_candidatos_verificar
C:\Users\Jorge\AppData\Local\Temp\cc6Vxw7y.s:3672   .text:000008b0 $d
C:\Users\Jorge\AppData\Local\Temp\cc6Vxw7y.s:3676   .text:000008b4 $a
C:\Users\Jorge\AppData\Local\Temp\cc6Vxw7y.s:3678   .text:000008b4 verificar_lista_calculada
C:\Users\Jorge\AppData\Local\Temp\cc6Vxw7y.s:3748   .text:00000938 sudoku9x9
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
sudoku_candidatos_propagar_arm
