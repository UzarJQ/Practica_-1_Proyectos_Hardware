   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"sudoku_2024.c"
  21              	.Ltext0:
  22              		.file 1 "../sudoku_2024.c"
 2817              		.align	2
 2819              	celda_leer_valor:
 2820              	.LFB1:
   1:../sudoku_2024.c **** #include "sudoku_2024.h"
   2:../sudoku_2024.c **** #include <stdio.h>
   3:../sudoku_2024.c **** #include <stdlib.h>
   4:../sudoku_2024.c **** 
   5:../sudoku_2024.c **** //extern void
   6:../sudoku_2024.c **** //sudoku_candidatos_propagar_arm(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], uint8_t fila, uint8_t c
   7:../sudoku_2024.c **** //sudoku_candidatos_init_arm(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]);
   8:../sudoku_2024.c **** /* *****************************************************************************
   9:../sudoku_2024.c ****  * Funciones privadas (static)
  10:../sudoku_2024.c ****  * (no pueden ser invocadas desde otro fichero) */
  11:../sudoku_2024.c ****  
  12:../sudoku_2024.c **** /* modifica el valor almacenado en la celda indicada */
  13:../sudoku_2024.c **** static inline void
  14:../sudoku_2024.c **** celda_poner_valor(CELDA *celdaptr, uint8_t val)
  15:../sudoku_2024.c **** {
  16:../sudoku_2024.c ****     *celdaptr = (*celdaptr & 0xFFF0) | (val & 0x000F);
  17:../sudoku_2024.c **** }
  18:../sudoku_2024.c **** 
  19:../sudoku_2024.c **** /* extrae el valor almacenado en los 16 bits de la celda */
  20:../sudoku_2024.c **** static inline uint8_t
  21:../sudoku_2024.c **** celda_leer_valor(CELDA celda)
  22:../sudoku_2024.c **** {
 2821              		.loc 1 22 0
 2822              		.cfi_startproc
 2823              		@ Function supports interworking.
 2824              		@ args = 0, pretend = 0, frame = 8
 2825              		@ frame_needed = 1, uses_anonymous_args = 0
 2826 0000 0DC0A0E1 		mov	ip, sp
 2827              	.LCFI0:
 2828              		.cfi_def_cfa_register 12
 2829 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2830 0008 04B04CE2 		sub	fp, ip, #4
 2831              		.cfi_offset 14, -8
 2832              		.cfi_offset 13, -12
 2833              		.cfi_offset 11, -16
 2834              	.LCFI1:
 2835              		.cfi_def_cfa 11, 4
 2836 000c 08D04DE2 		sub	sp, sp, #8
 2837 0010 0030A0E1 		mov	r3, r0
 2838 0014 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  23:../sudoku_2024.c ****     return (celda & 0x000F);
 2839              		.loc 1 23 0
 2840 0018 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2841 001c FF3003E2 		and	r3, r3, #255
 2842 0020 0F3003E2 		and	r3, r3, #15
 2843 0024 FF3003E2 		and	r3, r3, #255
  24:../sudoku_2024.c **** }
 2844              		.loc 1 24 0
 2845 0028 0300A0E1 		mov	r0, r3
 2846 002c 0CD04BE2 		sub	sp, fp, #12
 2847 0030 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2848 0034 1EFF2FE1 		bx	lr
 2849              		.cfi_endproc
 2850              	.LFE1:
 2852              		.align	2
 2854              	activar_error:
 2855              	.LFB2:
  25:../sudoku_2024.c **** 
  26:../sudoku_2024.c **** /* Activa el bit de error en la celda indicada */
  27:../sudoku_2024.c **** static inline void
  28:../sudoku_2024.c **** activar_error(CELDA celda)
  29:../sudoku_2024.c **** {
 2856              		.loc 1 29 0
 2857              		.cfi_startproc
 2858              		@ Function supports interworking.
 2859              		@ args = 0, pretend = 0, frame = 8
 2860              		@ frame_needed = 1, uses_anonymous_args = 0
 2861 0038 0DC0A0E1 		mov	ip, sp
 2862              	.LCFI2:
 2863              		.cfi_def_cfa_register 12
 2864 003c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2865 0040 04B04CE2 		sub	fp, ip, #4
 2866              		.cfi_offset 14, -8
 2867              		.cfi_offset 13, -12
 2868              		.cfi_offset 11, -16
 2869              	.LCFI3:
 2870              		.cfi_def_cfa 11, 4
 2871 0044 08D04DE2 		sub	sp, sp, #8
 2872 0048 0030A0E1 		mov	r3, r0
 2873 004c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  30:../sudoku_2024.c **** 	celda = celda |= 0x4000;
 2874              		.loc 1 30 0
 2875 0050 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2876 0054 013983E3 		orr	r3, r3, #16384
 2877 0058 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  31:../sudoku_2024.c **** }
 2878              		.loc 1 31 0
 2879 005c 0CD04BE2 		sub	sp, fp, #12
 2880 0060 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2881 0064 1EFF2FE1 		bx	lr
 2882              		.cfi_endproc
 2883              	.LFE2:
 2885              		.align	2
 2886              		.global	sudoku_candidatos_propagar_c
 2888              	sudoku_candidatos_propagar_c:
 2889              	.LFB3:
  32:../sudoku_2024.c **** 
  33:../sudoku_2024.c **** /* Propaga el valor de una determinada celda para actualizar las listas de candidatos en su fila, c
  34:../sudoku_2024.c **** void
  35:../sudoku_2024.c **** sudoku_candidatos_propagar_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int fila, int columna, uint
  36:../sudoku_2024.c **** {
 2890              		.loc 1 36 0
 2891              		.cfi_startproc
 2892              		@ Function supports interworking.
 2893              		@ args = 0, pretend = 0, frame = 40
 2894              		@ frame_needed = 1, uses_anonymous_args = 0
 2895 0068 0DC0A0E1 		mov	ip, sp
 2896              	.LCFI4:
 2897              		.cfi_def_cfa_register 12
 2898 006c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2899 0070 04B04CE2 		sub	fp, ip, #4
 2900              		.cfi_offset 14, -8
 2901              		.cfi_offset 13, -12
 2902              		.cfi_offset 11, -16
 2903              	.LCFI5:
 2904              		.cfi_def_cfa 11, 4
 2905 0074 28D04DE2 		sub	sp, sp, #40
 2906 0078 28000BE5 		str	r0, [fp, #-40]
 2907 007c 2C100BE5 		str	r1, [fp, #-44]
 2908 0080 30200BE5 		str	r2, [fp, #-48]
 2909 0084 31304BE5 		strb	r3, [fp, #-49]
  37:../sudoku_2024.c **** 	int displace = 3 + (int)valor;
 2910              		.loc 1 37 0
 2911 0088 31305BE5 		ldrb	r3, [fp, #-49]	@ zero_extendqisi2
 2912 008c 033083E2 		add	r3, r3, #3
 2913 0090 1C300BE5 		str	r3, [fp, #-28]
  38:../sudoku_2024.c **** 
  39:../sudoku_2024.c ****     /* recorrer cada columna desactivando el candidato de la lista */
  40:../sudoku_2024.c ****     int col = 0;
 2914              		.loc 1 40 0
 2915 0094 0030A0E3 		mov	r3, #0
 2916 0098 10300BE5 		str	r3, [fp, #-16]
  41:../sudoku_2024.c ****     while(col < NUM_COLUMNAS - 7){
 2917              		.loc 1 41 0
 2918 009c 210000EA 		b	.L4
 2919              	.L5:
  42:../sudoku_2024.c ****     	cuadricula[fila][col] &= ~(1 << displace);	// Desactivar el candidato de la lista con una oper
 2920              		.loc 1 42 0
 2921 00a0 2C301BE5 		ldr	r3, [fp, #-44]
 2922 00a4 8332A0E1 		mov	r3, r3, asl #5
 2923 00a8 28201BE5 		ldr	r2, [fp, #-40]
 2924 00ac 031082E0 		add	r1, r2, r3
 2925 00b0 2C301BE5 		ldr	r3, [fp, #-44]
 2926 00b4 8332A0E1 		mov	r3, r3, asl #5
 2927 00b8 28201BE5 		ldr	r2, [fp, #-40]
 2928 00bc 032082E0 		add	r2, r2, r3
 2929 00c0 10301BE5 		ldr	r3, [fp, #-16]
 2930 00c4 8330A0E1 		mov	r3, r3, asl #1
 2931 00c8 033082E0 		add	r3, r2, r3
 2932 00cc B030D3E1 		ldrh	r3, [r3, #0]
 2933 00d0 0338A0E1 		mov	r3, r3, asl #16
 2934 00d4 2328A0E1 		mov	r2, r3, lsr #16
 2935 00d8 0100A0E3 		mov	r0, #1
 2936 00dc 1C301BE5 		ldr	r3, [fp, #-28]
 2937 00e0 1033A0E1 		mov	r3, r0, asl r3
 2938 00e4 0338A0E1 		mov	r3, r3, asl #16
 2939 00e8 2338A0E1 		mov	r3, r3, lsr #16
 2940 00ec 0330E0E1 		mvn	r3, r3
 2941 00f0 0338A0E1 		mov	r3, r3, asl #16
 2942 00f4 2338A0E1 		mov	r3, r3, lsr #16
 2943 00f8 033002E0 		and	r3, r2, r3
 2944 00fc 0338A0E1 		mov	r3, r3, asl #16
 2945 0100 2338A0E1 		mov	r3, r3, lsr #16
 2946 0104 0338A0E1 		mov	r3, r3, asl #16
 2947 0108 2328A0E1 		mov	r2, r3, lsr #16
 2948 010c 10301BE5 		ldr	r3, [fp, #-16]
 2949 0110 8330A0E1 		mov	r3, r3, asl #1
 2950 0114 033081E0 		add	r3, r1, r3
 2951 0118 B020C3E1 		strh	r2, [r3, #0]	@ movhi
  43:../sudoku_2024.c ****     	col++;
 2952              		.loc 1 43 0
 2953 011c 10301BE5 		ldr	r3, [fp, #-16]
 2954 0120 013083E2 		add	r3, r3, #1
 2955 0124 10300BE5 		str	r3, [fp, #-16]
 2956              	.L4:
  41:../sudoku_2024.c ****     while(col < NUM_COLUMNAS - 7){
 2957              		.loc 1 41 0 discriminator 1
 2958 0128 10301BE5 		ldr	r3, [fp, #-16]
 2959 012c 080053E3 		cmp	r3, #8
 2960 0130 DAFFFFDA 		ble	.L5
  44:../sudoku_2024.c ****     }
  45:../sudoku_2024.c **** 
  46:../sudoku_2024.c ****     /* recorrer cada fila desactivando el candidato de la lista */
  47:../sudoku_2024.c ****     int row = 0;
 2961              		.loc 1 47 0
 2962 0134 0030A0E3 		mov	r3, #0
 2963 0138 14300BE5 		str	r3, [fp, #-20]
  48:../sudoku_2024.c ****     while(row < NUM_FILAS){
 2964              		.loc 1 48 0
 2965 013c 210000EA 		b	.L6
 2966              	.L7:
  49:../sudoku_2024.c ****     	cuadricula[row][columna] &= ~(1 << displace);
 2967              		.loc 1 49 0
 2968 0140 14301BE5 		ldr	r3, [fp, #-20]
 2969 0144 8332A0E1 		mov	r3, r3, asl #5
 2970 0148 28201BE5 		ldr	r2, [fp, #-40]
 2971 014c 031082E0 		add	r1, r2, r3
 2972 0150 14301BE5 		ldr	r3, [fp, #-20]
 2973 0154 8332A0E1 		mov	r3, r3, asl #5
 2974 0158 28201BE5 		ldr	r2, [fp, #-40]
 2975 015c 032082E0 		add	r2, r2, r3
 2976 0160 30301BE5 		ldr	r3, [fp, #-48]
 2977 0164 8330A0E1 		mov	r3, r3, asl #1
 2978 0168 033082E0 		add	r3, r2, r3
 2979 016c B030D3E1 		ldrh	r3, [r3, #0]
 2980 0170 0338A0E1 		mov	r3, r3, asl #16
 2981 0174 2328A0E1 		mov	r2, r3, lsr #16
 2982 0178 0100A0E3 		mov	r0, #1
 2983 017c 1C301BE5 		ldr	r3, [fp, #-28]
 2984 0180 1033A0E1 		mov	r3, r0, asl r3
 2985 0184 0338A0E1 		mov	r3, r3, asl #16
 2986 0188 2338A0E1 		mov	r3, r3, lsr #16
 2987 018c 0330E0E1 		mvn	r3, r3
 2988 0190 0338A0E1 		mov	r3, r3, asl #16
 2989 0194 2338A0E1 		mov	r3, r3, lsr #16
 2990 0198 033002E0 		and	r3, r2, r3
 2991 019c 0338A0E1 		mov	r3, r3, asl #16
 2992 01a0 2338A0E1 		mov	r3, r3, lsr #16
 2993 01a4 0338A0E1 		mov	r3, r3, asl #16
 2994 01a8 2328A0E1 		mov	r2, r3, lsr #16
 2995 01ac 30301BE5 		ldr	r3, [fp, #-48]
 2996 01b0 8330A0E1 		mov	r3, r3, asl #1
 2997 01b4 033081E0 		add	r3, r1, r3
 2998 01b8 B020C3E1 		strh	r2, [r3, #0]	@ movhi
  50:../sudoku_2024.c ****     	row++;
 2999              		.loc 1 50 0
 3000 01bc 14301BE5 		ldr	r3, [fp, #-20]
 3001 01c0 013083E2 		add	r3, r3, #1
 3002 01c4 14300BE5 		str	r3, [fp, #-20]
 3003              	.L6:
  48:../sudoku_2024.c ****     while(row < NUM_FILAS){
 3004              		.loc 1 48 0 discriminator 1
 3005 01c8 14301BE5 		ldr	r3, [fp, #-20]
 3006 01cc 080053E3 		cmp	r3, #8
 3007 01d0 DAFFFFDA 		ble	.L7
  51:../sudoku_2024.c ****     }
  52:../sudoku_2024.c **** 
  53:../sudoku_2024.c **** 
  54:../sudoku_2024.c ****     /* Calcular la posicion inicial para cada region 3x3 correspondiente */
  55:../sudoku_2024.c ****     int row_start = (fila / 3) * 3;
 3008              		.loc 1 55 0
 3009 01d4 2C301BE5 		ldr	r3, [fp, #-44]
 3010 01d8 1C219FE5 		ldr	r2, .L12
 3011 01dc 9312C2E0 		smull	r1, r2, r3, r2
 3012 01e0 C33FA0E1 		mov	r3, r3, asr #31
 3013 01e4 022063E0 		rsb	r2, r3, r2
 3014 01e8 0230A0E1 		mov	r3, r2
 3015 01ec 8330A0E1 		mov	r3, r3, asl #1
 3016 01f0 023083E0 		add	r3, r3, r2
 3017 01f4 20300BE5 		str	r3, [fp, #-32]
  56:../sudoku_2024.c ****     int col_start = (columna / 3) * 3;
 3018              		.loc 1 56 0
 3019 01f8 30301BE5 		ldr	r3, [fp, #-48]
 3020 01fc F8209FE5 		ldr	r2, .L12
 3021 0200 9312C2E0 		smull	r1, r2, r3, r2
 3022 0204 C33FA0E1 		mov	r3, r3, asr #31
 3023 0208 022063E0 		rsb	r2, r3, r2
 3024 020c 0230A0E1 		mov	r3, r2
 3025 0210 8330A0E1 		mov	r3, r3, asl #1
 3026 0214 023083E0 		add	r3, r3, r2
 3027 0218 24300BE5 		str	r3, [fp, #-36]
  57:../sudoku_2024.c **** 
  58:../sudoku_2024.c ****     /* Recorrer la region desactivando el candidato de la lista */
  59:../sudoku_2024.c ****     row = row_start;
 3028              		.loc 1 59 0
 3029 021c 20301BE5 		ldr	r3, [fp, #-32]
 3030 0220 14300BE5 		str	r3, [fp, #-20]
  60:../sudoku_2024.c ****     while(row < (row_start + 3)){
 3031              		.loc 1 60 0
 3032 0224 2C0000EA 		b	.L8
 3033              	.L11:
 3034              	.LBB2:
  61:../sudoku_2024.c ****     	int col = col_start;
 3035              		.loc 1 61 0
 3036 0228 24301BE5 		ldr	r3, [fp, #-36]
 3037 022c 18300BE5 		str	r3, [fp, #-24]
  62:../sudoku_2024.c ****     	while(col < (col_start + 3)){
 3038              		.loc 1 62 0
 3039 0230 210000EA 		b	.L9
 3040              	.L10:
  63:../sudoku_2024.c ****     		cuadricula[row][col] &= ~(1 << displace);
 3041              		.loc 1 63 0
 3042 0234 14301BE5 		ldr	r3, [fp, #-20]
 3043 0238 8332A0E1 		mov	r3, r3, asl #5
 3044 023c 28201BE5 		ldr	r2, [fp, #-40]
 3045 0240 031082E0 		add	r1, r2, r3
 3046 0244 14301BE5 		ldr	r3, [fp, #-20]
 3047 0248 8332A0E1 		mov	r3, r3, asl #5
 3048 024c 28201BE5 		ldr	r2, [fp, #-40]
 3049 0250 032082E0 		add	r2, r2, r3
 3050 0254 18301BE5 		ldr	r3, [fp, #-24]
 3051 0258 8330A0E1 		mov	r3, r3, asl #1
 3052 025c 033082E0 		add	r3, r2, r3
 3053 0260 B030D3E1 		ldrh	r3, [r3, #0]
 3054 0264 0338A0E1 		mov	r3, r3, asl #16
 3055 0268 2328A0E1 		mov	r2, r3, lsr #16
 3056 026c 0100A0E3 		mov	r0, #1
 3057 0270 1C301BE5 		ldr	r3, [fp, #-28]
 3058 0274 1033A0E1 		mov	r3, r0, asl r3
 3059 0278 0338A0E1 		mov	r3, r3, asl #16
 3060 027c 2338A0E1 		mov	r3, r3, lsr #16
 3061 0280 0330E0E1 		mvn	r3, r3
 3062 0284 0338A0E1 		mov	r3, r3, asl #16
 3063 0288 2338A0E1 		mov	r3, r3, lsr #16
 3064 028c 033002E0 		and	r3, r2, r3
 3065 0290 0338A0E1 		mov	r3, r3, asl #16
 3066 0294 2338A0E1 		mov	r3, r3, lsr #16
 3067 0298 0338A0E1 		mov	r3, r3, asl #16
 3068 029c 2328A0E1 		mov	r2, r3, lsr #16
 3069 02a0 18301BE5 		ldr	r3, [fp, #-24]
 3070 02a4 8330A0E1 		mov	r3, r3, asl #1
 3071 02a8 033081E0 		add	r3, r1, r3
 3072 02ac B020C3E1 		strh	r2, [r3, #0]	@ movhi
  64:../sudoku_2024.c ****     		col++;
 3073              		.loc 1 64 0
 3074 02b0 18301BE5 		ldr	r3, [fp, #-24]
 3075 02b4 013083E2 		add	r3, r3, #1
 3076 02b8 18300BE5 		str	r3, [fp, #-24]
 3077              	.L9:
  62:../sudoku_2024.c ****     	while(col < (col_start + 3)){
 3078              		.loc 1 62 0 discriminator 1
 3079 02bc 24301BE5 		ldr	r3, [fp, #-36]
 3080 02c0 032083E2 		add	r2, r3, #3
 3081 02c4 18301BE5 		ldr	r3, [fp, #-24]
 3082 02c8 030052E1 		cmp	r2, r3
 3083 02cc D8FFFFCA 		bgt	.L10
  65:../sudoku_2024.c ****     	}
  66:../sudoku_2024.c ****     	row++;
 3084              		.loc 1 66 0
 3085 02d0 14301BE5 		ldr	r3, [fp, #-20]
 3086 02d4 013083E2 		add	r3, r3, #1
 3087 02d8 14300BE5 		str	r3, [fp, #-20]
 3088              	.L8:
 3089              	.LBE2:
  60:../sudoku_2024.c ****     while(row < (row_start + 3)){
 3090              		.loc 1 60 0 discriminator 1
 3091 02dc 20301BE5 		ldr	r3, [fp, #-32]
 3092 02e0 032083E2 		add	r2, r3, #3
 3093 02e4 14301BE5 		ldr	r3, [fp, #-20]
 3094 02e8 030052E1 		cmp	r2, r3
 3095 02ec CDFFFFCA 		bgt	.L11
  67:../sudoku_2024.c ****     }
  68:../sudoku_2024.c **** }
 3096              		.loc 1 68 0
 3097 02f0 0CD04BE2 		sub	sp, fp, #12
 3098 02f4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3099 02f8 1EFF2FE1 		bx	lr
 3100              	.L13:
 3101              		.align	2
 3102              	.L12:
 3103 02fc 56555555 		.word	1431655766
 3104              		.cfi_endproc
 3105              	.LFE3:
 3107              		.align	2
 3108              		.global	init_candidatos
 3110              	init_candidatos:
 3111              	.LFB4:
  69:../sudoku_2024.c **** 
  70:../sudoku_2024.c **** /* Recorrer la cuadricula inicializando los candidatos de las celdas */
  71:../sudoku_2024.c **** void
  72:../sudoku_2024.c **** init_candidatos(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]){
 3112              		.loc 1 72 0
 3113              		.cfi_startproc
 3114              		@ Function supports interworking.
 3115              		@ args = 0, pretend = 0, frame = 24
 3116              		@ frame_needed = 1, uses_anonymous_args = 0
 3117 0300 0DC0A0E1 		mov	ip, sp
 3118              	.LCFI6:
 3119              		.cfi_def_cfa_register 12
 3120 0304 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3121 0308 04B04CE2 		sub	fp, ip, #4
 3122              		.cfi_offset 14, -8
 3123              		.cfi_offset 13, -12
 3124              		.cfi_offset 11, -16
 3125              	.LCFI7:
 3126              		.cfi_def_cfa 11, 4
 3127 030c 18D04DE2 		sub	sp, sp, #24
 3128 0310 20000BE5 		str	r0, [fp, #-32]
  73:../sudoku_2024.c **** 	int row=0;
 3129              		.loc 1 73 0
 3130 0314 0030A0E3 		mov	r3, #0
 3131 0318 10300BE5 		str	r3, [fp, #-16]
  74:../sudoku_2024.c **** 	while(row < NUM_FILAS){
 3132              		.loc 1 74 0
 3133 031c 2C0000EA 		b	.L15
 3134              	.L19:
 3135              	.LBB3:
  75:../sudoku_2024.c **** 		int col=0;
 3136              		.loc 1 75 0
 3137 0320 0030A0E3 		mov	r3, #0
 3138 0324 14300BE5 		str	r3, [fp, #-20]
  76:../sudoku_2024.c **** 		while(col < NUM_COLUMNAS - 7){
 3139              		.loc 1 76 0
 3140 0328 230000EA 		b	.L16
 3141              	.L18:
 3142              	.LBB4:
  77:../sudoku_2024.c **** 
  78:../sudoku_2024.c **** 			int pista = cuadricula[row][col] & 0x8000;
 3143              		.loc 1 78 0
 3144 032c 10301BE5 		ldr	r3, [fp, #-16]
 3145 0330 8332A0E1 		mov	r3, r3, asl #5
 3146 0334 20201BE5 		ldr	r2, [fp, #-32]
 3147 0338 032082E0 		add	r2, r2, r3
 3148 033c 14301BE5 		ldr	r3, [fp, #-20]
 3149 0340 8330A0E1 		mov	r3, r3, asl #1
 3150 0344 033082E0 		add	r3, r2, r3
 3151 0348 B030D3E1 		ldrh	r3, [r3, #0]
 3152 034c 023903E2 		and	r3, r3, #32768
 3153 0350 18300BE5 		str	r3, [fp, #-24]
  79:../sudoku_2024.c **** 			if(pista == 0){
 3154              		.loc 1 79 0
 3155 0354 18301BE5 		ldr	r3, [fp, #-24]
 3156 0358 000053E3 		cmp	r3, #0
 3157 035c 1300001A 		bne	.L17
  80:../sudoku_2024.c **** 				cuadricula[row][col] |= 0x1FF0;
 3158              		.loc 1 80 0
 3159 0360 10301BE5 		ldr	r3, [fp, #-16]
 3160 0364 8332A0E1 		mov	r3, r3, asl #5
 3161 0368 20201BE5 		ldr	r2, [fp, #-32]
 3162 036c 031082E0 		add	r1, r2, r3
 3163 0370 10301BE5 		ldr	r3, [fp, #-16]
 3164 0374 8332A0E1 		mov	r3, r3, asl #5
 3165 0378 20201BE5 		ldr	r2, [fp, #-32]
 3166 037c 032082E0 		add	r2, r2, r3
 3167 0380 14301BE5 		ldr	r3, [fp, #-20]
 3168 0384 8330A0E1 		mov	r3, r3, asl #1
 3169 0388 033082E0 		add	r3, r2, r3
 3170 038c B030D3E1 		ldrh	r3, [r3, #0]
 3171 0390 7F3D83E3 		orr	r3, r3, #8128
 3172 0394 303083E3 		orr	r3, r3, #48
 3173 0398 0338A0E1 		mov	r3, r3, asl #16
 3174 039c 2328A0E1 		mov	r2, r3, lsr #16
 3175 03a0 14301BE5 		ldr	r3, [fp, #-20]
 3176 03a4 8330A0E1 		mov	r3, r3, asl #1
 3177 03a8 033081E0 		add	r3, r1, r3
 3178 03ac B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3179              	.L17:
  81:../sudoku_2024.c **** 			}
  82:../sudoku_2024.c **** 			col++;
 3180              		.loc 1 82 0
 3181 03b0 14301BE5 		ldr	r3, [fp, #-20]
 3182 03b4 013083E2 		add	r3, r3, #1
 3183 03b8 14300BE5 		str	r3, [fp, #-20]
 3184              	.L16:
 3185              	.LBE4:
  76:../sudoku_2024.c **** 		while(col < NUM_COLUMNAS - 7){
 3186              		.loc 1 76 0 discriminator 1
 3187 03bc 14301BE5 		ldr	r3, [fp, #-20]
 3188 03c0 080053E3 		cmp	r3, #8
 3189 03c4 D8FFFFDA 		ble	.L18
  83:../sudoku_2024.c **** 		}
  84:../sudoku_2024.c **** 		row++;
 3190              		.loc 1 84 0
 3191 03c8 10301BE5 		ldr	r3, [fp, #-16]
 3192 03cc 013083E2 		add	r3, r3, #1
 3193 03d0 10300BE5 		str	r3, [fp, #-16]
 3194              	.L15:
 3195              	.LBE3:
  74:../sudoku_2024.c **** 	while(row < NUM_FILAS){
 3196              		.loc 1 74 0 discriminator 1
 3197 03d4 10301BE5 		ldr	r3, [fp, #-16]
 3198 03d8 080053E3 		cmp	r3, #8
 3199 03dc CFFFFFDA 		ble	.L19
  85:../sudoku_2024.c **** 	}
  86:../sudoku_2024.c **** }
 3200              		.loc 1 86 0
 3201 03e0 0CD04BE2 		sub	sp, fp, #12
 3202 03e4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3203 03e8 1EFF2FE1 		bx	lr
 3204              		.cfi_endproc
 3205              	.LFE4:
 3207              		.align	2
 3208              		.global	propagar_if_value
 3210              	propagar_if_value:
 3211              	.LFB5:
  87:../sudoku_2024.c **** 
  88:../sudoku_2024.c **** // Recorrer la cuadricula aumentando la cantidad de celdas vacias (valor 0) y llamando a la funcion
  89:../sudoku_2024.c **** void
  90:../sudoku_2024.c **** propagar_if_value(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int *celdas_vacias){
 3212              		.loc 1 90 0
 3213              		.cfi_startproc
 3214              		@ Function supports interworking.
 3215              		@ args = 0, pretend = 0, frame = 24
 3216              		@ frame_needed = 1, uses_anonymous_args = 0
 3217 03ec 0DC0A0E1 		mov	ip, sp
 3218              	.LCFI8:
 3219              		.cfi_def_cfa_register 12
 3220 03f0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3221 03f4 04B04CE2 		sub	fp, ip, #4
 3222              		.cfi_offset 14, -8
 3223              		.cfi_offset 13, -12
 3224              		.cfi_offset 11, -16
 3225              	.LCFI9:
 3226              		.cfi_def_cfa 11, 4
 3227 03f8 18D04DE2 		sub	sp, sp, #24
 3228 03fc 20000BE5 		str	r0, [fp, #-32]
 3229 0400 24100BE5 		str	r1, [fp, #-36]
  91:../sudoku_2024.c **** 	int row=0;
 3230              		.loc 1 91 0
 3231 0404 0030A0E3 		mov	r3, #0
 3232 0408 10300BE5 		str	r3, [fp, #-16]
  92:../sudoku_2024.c **** 	while(row < NUM_FILAS){
 3233              		.loc 1 92 0
 3234 040c 250000EA 		b	.L21
 3235              	.L26:
 3236              	.LBB5:
  93:../sudoku_2024.c **** 		int col=0;
 3237              		.loc 1 93 0
 3238 0410 0030A0E3 		mov	r3, #0
 3239 0414 14300BE5 		str	r3, [fp, #-20]
  94:../sudoku_2024.c **** 		while(col < NUM_COLUMNAS - 7){
 3240              		.loc 1 94 0
 3241 0418 1C0000EA 		b	.L22
 3242              	.L25:
 3243              	.LBB6:
  95:../sudoku_2024.c **** 			uint8_t valor_actual = celda_leer_valor(cuadricula[row][col]);
 3244              		.loc 1 95 0
 3245 041c 10301BE5 		ldr	r3, [fp, #-16]
 3246 0420 8332A0E1 		mov	r3, r3, asl #5
 3247 0424 20201BE5 		ldr	r2, [fp, #-32]
 3248 0428 032082E0 		add	r2, r2, r3
 3249 042c 14301BE5 		ldr	r3, [fp, #-20]
 3250 0430 8330A0E1 		mov	r3, r3, asl #1
 3251 0434 033082E0 		add	r3, r2, r3
 3252 0438 B030D3E1 		ldrh	r3, [r3, #0]
 3253 043c 0300A0E1 		mov	r0, r3
 3254 0440 EEFEFFEB 		bl	celda_leer_valor
 3255 0444 0030A0E1 		mov	r3, r0
 3256 0448 15304BE5 		strb	r3, [fp, #-21]
  96:../sudoku_2024.c **** 			if(valor_actual == 0x0000){
 3257              		.loc 1 96 0
 3258 044c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3259 0450 000053E3 		cmp	r3, #0
 3260 0454 0500001A 		bne	.L23
  97:../sudoku_2024.c **** 				(*celdas_vacias)++;
 3261              		.loc 1 97 0
 3262 0458 24301BE5 		ldr	r3, [fp, #-36]
 3263 045c 003093E5 		ldr	r3, [r3, #0]
 3264 0460 012083E2 		add	r2, r3, #1
 3265 0464 24301BE5 		ldr	r3, [fp, #-36]
 3266 0468 002083E5 		str	r2, [r3, #0]
 3267 046c 040000EA 		b	.L24
 3268              	.L23:
  98:../sudoku_2024.c **** 			} else {
  99:../sudoku_2024.c **** 				sudoku_candidatos_propagar_c(cuadricula, row, col, valor_actual);
 3269              		.loc 1 99 0
 3270 0470 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3271 0474 20001BE5 		ldr	r0, [fp, #-32]
 3272 0478 10101BE5 		ldr	r1, [fp, #-16]
 3273 047c 14201BE5 		ldr	r2, [fp, #-20]
 3274 0480 FEFFFFEB 		bl	sudoku_candidatos_propagar_c
 3275              	.L24:
 100:../sudoku_2024.c **** 			}
 101:../sudoku_2024.c **** 			col++;
 3276              		.loc 1 101 0
 3277 0484 14301BE5 		ldr	r3, [fp, #-20]
 3278 0488 013083E2 		add	r3, r3, #1
 3279 048c 14300BE5 		str	r3, [fp, #-20]
 3280              	.L22:
 3281              	.LBE6:
  94:../sudoku_2024.c **** 		while(col < NUM_COLUMNAS - 7){
 3282              		.loc 1 94 0 discriminator 1
 3283 0490 14301BE5 		ldr	r3, [fp, #-20]
 3284 0494 080053E3 		cmp	r3, #8
 3285 0498 DFFFFFDA 		ble	.L25
 102:../sudoku_2024.c **** 		}
 103:../sudoku_2024.c **** 		row++;
 3286              		.loc 1 103 0
 3287 049c 10301BE5 		ldr	r3, [fp, #-16]
 3288 04a0 013083E2 		add	r3, r3, #1
 3289 04a4 10300BE5 		str	r3, [fp, #-16]
 3290              	.L21:
 3291              	.LBE5:
  92:../sudoku_2024.c **** 	while(row < NUM_FILAS){
 3292              		.loc 1 92 0 discriminator 1
 3293 04a8 10301BE5 		ldr	r3, [fp, #-16]
 3294 04ac 080053E3 		cmp	r3, #8
 3295 04b0 D6FFFFDA 		ble	.L26
 104:../sudoku_2024.c **** 	}
 105:../sudoku_2024.c **** }
 3296              		.loc 1 105 0
 3297 04b4 0CD04BE2 		sub	sp, fp, #12
 3298 04b8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3299 04bc 1EFF2FE1 		bx	lr
 3300              		.cfi_endproc
 3301              	.LFE5:
 3303              		.align	2
 3305              	sudoku_candidatos_init_c:
 3306              	.LFB6:
 106:../sudoku_2024.c **** 
 107:../sudoku_2024.c **** /* *****************************************************************************
 108:../sudoku_2024.c ****  * calcula todas las listas de candidatos (9x9)
 109:../sudoku_2024.c ****  * necesario tras borrar o cambiar un valor (listas corrompidas)
 110:../sudoku_2024.c ****  * retorna el numero de celdas vacias */
 111:../sudoku_2024.c **** static int
 112:../sudoku_2024.c **** sudoku_candidatos_init_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS])
 113:../sudoku_2024.c **** {
 3307              		.loc 1 113 0
 3308              		.cfi_startproc
 3309              		@ Function supports interworking.
 3310              		@ args = 0, pretend = 0, frame = 16
 3311              		@ frame_needed = 1, uses_anonymous_args = 0
 3312 04c0 0DC0A0E1 		mov	ip, sp
 3313              	.LCFI10:
 3314              		.cfi_def_cfa_register 12
 3315 04c4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3316 04c8 04B04CE2 		sub	fp, ip, #4
 3317              		.cfi_offset 14, -8
 3318              		.cfi_offset 13, -12
 3319              		.cfi_offset 11, -16
 3320              	.LCFI11:
 3321              		.cfi_def_cfa 11, 4
 3322 04cc 10D04DE2 		sub	sp, sp, #16
 3323 04d0 18000BE5 		str	r0, [fp, #-24]
 114:../sudoku_2024.c ****     uint8_t valor_inicial = celda_leer_valor(cuadricula[0][0]);
 3324              		.loc 1 114 0
 3325 04d4 18301BE5 		ldr	r3, [fp, #-24]
 3326 04d8 B030D3E1 		ldrh	r3, [r3, #0]
 3327 04dc 0300A0E1 		mov	r0, r3
 3328 04e0 C6FEFFEB 		bl	celda_leer_valor
 3329 04e4 0030A0E1 		mov	r3, r0
 3330 04e8 0D304BE5 		strb	r3, [fp, #-13]
 115:../sudoku_2024.c ****  	int celdas_vacias = 0;
 3331              		.loc 1 115 0
 3332 04ec 0030A0E3 		mov	r3, #0
 3333 04f0 14300BE5 		str	r3, [fp, #-20]
 116:../sudoku_2024.c **** 
 117:../sudoku_2024.c ****     init_candidatos(cuadricula);
 3334              		.loc 1 117 0
 3335 04f4 18001BE5 		ldr	r0, [fp, #-24]
 3336 04f8 FEFFFFEB 		bl	init_candidatos
 118:../sudoku_2024.c **** 
 119:../sudoku_2024.c ****  	char version_propagar = 'A';
 3337              		.loc 1 119 0
 3338 04fc 4130A0E3 		mov	r3, #65
 3339 0500 0E304BE5 		strb	r3, [fp, #-14]
 120:../sudoku_2024.c **** 
 121:../sudoku_2024.c ****     /* Tres configuraciones para *propagar* */
 122:../sudoku_2024.c ****  	if(version_propagar == 'C'){
 3340              		.loc 1 122 0
 3341 0504 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3342 0508 430053E3 		cmp	r3, #67
 3343 050c 0300001A 		bne	.L28
 123:../sudoku_2024.c ****     	propagar_if_value(cuadricula, &celdas_vacias);
 3344              		.loc 1 123 0
 3345 0510 14304BE2 		sub	r3, fp, #20
 3346 0514 18001BE5 		ldr	r0, [fp, #-24]
 3347 0518 0310A0E1 		mov	r1, r3
 3348 051c FEFFFFEB 		bl	propagar_if_value
 3349              	.L28:
 124:../sudoku_2024.c ****  	}
 125:../sudoku_2024.c **** 
 126:../sudoku_2024.c ****  	if(version_propagar == 'A'){
 3350              		.loc 1 126 0
 3351 0520 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3352 0524 410053E3 		cmp	r3, #65
 3353 0528 0600001A 		bne	.L29
 127:../sudoku_2024.c ****     	celdas_vacias = sudoku_candidatos_propagar_arm(cuadricula, 0, 0, valor_inicial);
 3354              		.loc 1 127 0
 3355 052c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3356 0530 18001BE5 		ldr	r0, [fp, #-24]
 3357 0534 0010A0E3 		mov	r1, #0
 3358 0538 0020A0E3 		mov	r2, #0
 3359 053c FEFFFFEB 		bl	sudoku_candidatos_propagar_arm
 3360 0540 0030A0E1 		mov	r3, r0
 3361 0544 14300BE5 		str	r3, [fp, #-20]
 3362              	.L29:
 128:../sudoku_2024.c ****  	}
 129:../sudoku_2024.c **** 
 130:../sudoku_2024.c ****     return celdas_vacias;
 3363              		.loc 1 130 0
 3364 0548 14301BE5 		ldr	r3, [fp, #-20]
 131:../sudoku_2024.c **** }
 3365              		.loc 1 131 0
 3366 054c 0300A0E1 		mov	r0, r3
 3367 0550 0CD04BE2 		sub	sp, fp, #12
 3368 0554 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3369 0558 1EFF2FE1 		bx	lr
 3370              		.cfi_endproc
 3371              	.LFE6:
 3373              		.align	2
 3375              	cuadricula_candidatos_verificar:
 3376              	.LFB7:
 132:../sudoku_2024.c **** 
 133:../sudoku_2024.c **** static void
 134:../sudoku_2024.c **** cuadricula_candidatos_verificar(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS],int row, int col, int *er
 3377              		.loc 1 134 0
 3378              		.cfi_startproc
 3379              		@ Function supports interworking.
 3380              		@ args = 0, pretend = 0, frame = 56
 3381              		@ frame_needed = 1, uses_anonymous_args = 0
 3382 055c 0DC0A0E1 		mov	ip, sp
 3383              	.LCFI12:
 3384              		.cfi_def_cfa_register 12
 3385 0560 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3386 0564 04B04CE2 		sub	fp, ip, #4
 3387              		.cfi_offset 14, -8
 3388              		.cfi_offset 13, -12
 3389              		.cfi_offset 11, -16
 3390              	.LCFI13:
 3391              		.cfi_def_cfa 11, 4
 3392 0568 38D04DE2 		sub	sp, sp, #56
 3393 056c 38000BE5 		str	r0, [fp, #-56]
 3394 0570 3C100BE5 		str	r1, [fp, #-60]
 3395 0574 40200BE5 		str	r2, [fp, #-64]
 3396 0578 44300BE5 		str	r3, [fp, #-68]
 135:../sudoku_2024.c **** 
 136:../sudoku_2024.c **** 	uint8_t valor = celda_leer_valor(cuadricula[row][col]);
 3397              		.loc 1 136 0
 3398 057c 3C301BE5 		ldr	r3, [fp, #-60]
 3399 0580 8332A0E1 		mov	r3, r3, asl #5
 3400 0584 38201BE5 		ldr	r2, [fp, #-56]
 3401 0588 032082E0 		add	r2, r2, r3
 3402 058c 40301BE5 		ldr	r3, [fp, #-64]
 3403 0590 8330A0E1 		mov	r3, r3, asl #1
 3404 0594 033082E0 		add	r3, r2, r3
 3405 0598 B030D3E1 		ldrh	r3, [r3, #0]
 3406 059c 0300A0E1 		mov	r0, r3
 3407 05a0 96FEFFEB 		bl	celda_leer_valor
 3408 05a4 0030A0E1 		mov	r3, r0
 3409 05a8 19304BE5 		strb	r3, [fp, #-25]
 137:../sudoku_2024.c **** 
 138:../sudoku_2024.c **** 	/* Si el valor es distinto de 0, revisa que se haya propagado correctamente (el candidato correspo
 139:../sudoku_2024.c **** 	if(valor != 0x0000){
 3410              		.loc 1 139 0
 3411 05ac 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 3412 05b0 000053E3 		cmp	r3, #0
 3413 05b4 A200000A 		beq	.L30
 3414              	.LBB7:
 140:../sudoku_2024.c **** 		int displace = 3 + (int)valor;
 3415              		.loc 1 140 0
 3416 05b8 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 3417 05bc 033083E2 		add	r3, r3, #3
 3418 05c0 20300BE5 		str	r3, [fp, #-32]
 141:../sudoku_2024.c **** 
 142:../sudoku_2024.c **** 		/* Verificar el valor en todas las columnas (Horizontal) */
 143:../sudoku_2024.c **** 		int j = 0;
 3419              		.loc 1 143 0
 3420 05c4 0030A0E3 		mov	r3, #0
 3421 05c8 10300BE5 		str	r3, [fp, #-16]
 144:../sudoku_2024.c **** 		while(j < NUM_COLUMNAS - 7){
 3422              		.loc 1 144 0
 3423 05cc 240000EA 		b	.L32
 3424              	.L34:
 3425              	.LBB8:
 145:../sudoku_2024.c **** 			uint8_t is_bit_set = cuadricula[row][j] & (1 << displace);
 3426              		.loc 1 145 0
 3427 05d0 3C301BE5 		ldr	r3, [fp, #-60]
 3428 05d4 8332A0E1 		mov	r3, r3, asl #5
 3429 05d8 38201BE5 		ldr	r2, [fp, #-56]
 3430 05dc 032082E0 		add	r2, r2, r3
 3431 05e0 10301BE5 		ldr	r3, [fp, #-16]
 3432 05e4 8330A0E1 		mov	r3, r3, asl #1
 3433 05e8 033082E0 		add	r3, r2, r3
 3434 05ec B030D3E1 		ldrh	r3, [r3, #0]
 3435 05f0 FF2003E2 		and	r2, r3, #255
 3436 05f4 0110A0E3 		mov	r1, #1
 3437 05f8 20301BE5 		ldr	r3, [fp, #-32]
 3438 05fc 1133A0E1 		mov	r3, r1, asl r3
 3439 0600 FF3003E2 		and	r3, r3, #255
 3440 0604 033002E0 		and	r3, r2, r3
 3441 0608 FF3003E2 		and	r3, r3, #255
 3442 060c 21304BE5 		strb	r3, [fp, #-33]
 146:../sudoku_2024.c **** 			if(is_bit_set){
 3443              		.loc 1 146 0
 3444 0610 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 3445 0614 000053E3 		cmp	r3, #0
 3446 0618 0E00000A 		beq	.L33
 147:../sudoku_2024.c **** 				activar_error(cuadricula[row][j]);
 3447              		.loc 1 147 0
 3448 061c 3C301BE5 		ldr	r3, [fp, #-60]
 3449 0620 8332A0E1 		mov	r3, r3, asl #5
 3450 0624 38201BE5 		ldr	r2, [fp, #-56]
 3451 0628 032082E0 		add	r2, r2, r3
 3452 062c 10301BE5 		ldr	r3, [fp, #-16]
 3453 0630 8330A0E1 		mov	r3, r3, asl #1
 3454 0634 033082E0 		add	r3, r2, r3
 3455 0638 B030D3E1 		ldrh	r3, [r3, #0]
 3456 063c 0300A0E1 		mov	r0, r3
 3457 0640 7CFEFFEB 		bl	activar_error
 148:../sudoku_2024.c **** 				(*errors)++;
 3458              		.loc 1 148 0
 3459 0644 44301BE5 		ldr	r3, [fp, #-68]
 3460 0648 003093E5 		ldr	r3, [r3, #0]
 3461 064c 012083E2 		add	r2, r3, #1
 3462 0650 44301BE5 		ldr	r3, [fp, #-68]
 3463 0654 002083E5 		str	r2, [r3, #0]
 3464              	.L33:
 149:../sudoku_2024.c **** 			}
 150:../sudoku_2024.c **** 			j++;
 3465              		.loc 1 150 0
 3466 0658 10301BE5 		ldr	r3, [fp, #-16]
 3467 065c 013083E2 		add	r3, r3, #1
 3468 0660 10300BE5 		str	r3, [fp, #-16]
 3469              	.L32:
 3470              	.LBE8:
 144:../sudoku_2024.c **** 		while(j < NUM_COLUMNAS - 7){
 3471              		.loc 1 144 0 discriminator 1
 3472 0664 10301BE5 		ldr	r3, [fp, #-16]
 3473 0668 080053E3 		cmp	r3, #8
 3474 066c D7FFFFDA 		ble	.L34
 151:../sudoku_2024.c **** 		}
 152:../sudoku_2024.c **** 
 153:../sudoku_2024.c **** 		/* Verificar el valor en todas las filas (Vertical) */
 154:../sudoku_2024.c **** 		int i = 0;
 3475              		.loc 1 154 0
 3476 0670 0030A0E3 		mov	r3, #0
 3477 0674 14300BE5 		str	r3, [fp, #-20]
 155:../sudoku_2024.c **** 		while(i < NUM_FILAS){
 3478              		.loc 1 155 0
 3479 0678 240000EA 		b	.L35
 3480              	.L37:
 3481              	.LBB9:
 156:../sudoku_2024.c **** 			uint8_t is_bit_set = cuadricula[i][col] & (1 << displace);
 3482              		.loc 1 156 0
 3483 067c 14301BE5 		ldr	r3, [fp, #-20]
 3484 0680 8332A0E1 		mov	r3, r3, asl #5
 3485 0684 38201BE5 		ldr	r2, [fp, #-56]
 3486 0688 032082E0 		add	r2, r2, r3
 3487 068c 40301BE5 		ldr	r3, [fp, #-64]
 3488 0690 8330A0E1 		mov	r3, r3, asl #1
 3489 0694 033082E0 		add	r3, r2, r3
 3490 0698 B030D3E1 		ldrh	r3, [r3, #0]
 3491 069c FF2003E2 		and	r2, r3, #255
 3492 06a0 0110A0E3 		mov	r1, #1
 3493 06a4 20301BE5 		ldr	r3, [fp, #-32]
 3494 06a8 1133A0E1 		mov	r3, r1, asl r3
 3495 06ac FF3003E2 		and	r3, r3, #255
 3496 06b0 033002E0 		and	r3, r2, r3
 3497 06b4 FF3003E2 		and	r3, r3, #255
 3498 06b8 22304BE5 		strb	r3, [fp, #-34]
 157:../sudoku_2024.c **** 			if(is_bit_set){
 3499              		.loc 1 157 0
 3500 06bc 22305BE5 		ldrb	r3, [fp, #-34]	@ zero_extendqisi2
 3501 06c0 000053E3 		cmp	r3, #0
 3502 06c4 0E00000A 		beq	.L36
 158:../sudoku_2024.c **** 				activar_error(cuadricula[i][col]);
 3503              		.loc 1 158 0
 3504 06c8 14301BE5 		ldr	r3, [fp, #-20]
 3505 06cc 8332A0E1 		mov	r3, r3, asl #5
 3506 06d0 38201BE5 		ldr	r2, [fp, #-56]
 3507 06d4 032082E0 		add	r2, r2, r3
 3508 06d8 40301BE5 		ldr	r3, [fp, #-64]
 3509 06dc 8330A0E1 		mov	r3, r3, asl #1
 3510 06e0 033082E0 		add	r3, r2, r3
 3511 06e4 B030D3E1 		ldrh	r3, [r3, #0]
 3512 06e8 0300A0E1 		mov	r0, r3
 3513 06ec 51FEFFEB 		bl	activar_error
 159:../sudoku_2024.c **** 				(*errors)++;
 3514              		.loc 1 159 0
 3515 06f0 44301BE5 		ldr	r3, [fp, #-68]
 3516 06f4 003093E5 		ldr	r3, [r3, #0]
 3517 06f8 012083E2 		add	r2, r3, #1
 3518 06fc 44301BE5 		ldr	r3, [fp, #-68]
 3519 0700 002083E5 		str	r2, [r3, #0]
 3520              	.L36:
 160:../sudoku_2024.c **** 			}
 161:../sudoku_2024.c **** 			i++;
 3521              		.loc 1 161 0
 3522 0704 14301BE5 		ldr	r3, [fp, #-20]
 3523 0708 013083E2 		add	r3, r3, #1
 3524 070c 14300BE5 		str	r3, [fp, #-20]
 3525              	.L35:
 3526              	.LBE9:
 155:../sudoku_2024.c **** 		while(i < NUM_FILAS){
 3527              		.loc 1 155 0 discriminator 1
 3528 0710 14301BE5 		ldr	r3, [fp, #-20]
 3529 0714 080053E3 		cmp	r3, #8
 3530 0718 D7FFFFDA 		ble	.L37
 162:../sudoku_2024.c **** 		}
 163:../sudoku_2024.c **** 
 164:../sudoku_2024.c **** 		/* Calcular la posicion inicial para seccion correspondiente a la ubicacion actual */
 165:../sudoku_2024.c **** 		int row_start = (row / 3) * 3;
 3531              		.loc 1 165 0
 3532 071c 3C301BE5 		ldr	r3, [fp, #-60]
 3533 0720 28219FE5 		ldr	r2, .L43
 3534 0724 9312C2E0 		smull	r1, r2, r3, r2
 3535 0728 C33FA0E1 		mov	r3, r3, asr #31
 3536 072c 022063E0 		rsb	r2, r3, r2
 3537 0730 0230A0E1 		mov	r3, r2
 3538 0734 8330A0E1 		mov	r3, r3, asl #1
 3539 0738 023083E0 		add	r3, r3, r2
 3540 073c 28300BE5 		str	r3, [fp, #-40]
 166:../sudoku_2024.c **** 		int col_start = (col / 3) * 3;
 3541              		.loc 1 166 0
 3542 0740 40301BE5 		ldr	r3, [fp, #-64]
 3543 0744 04219FE5 		ldr	r2, .L43
 3544 0748 9312C2E0 		smull	r1, r2, r3, r2
 3545 074c C33FA0E1 		mov	r3, r3, asr #31
 3546 0750 022063E0 		rsb	r2, r3, r2
 3547 0754 0230A0E1 		mov	r3, r2
 3548 0758 8330A0E1 		mov	r3, r3, asl #1
 3549 075c 023083E0 		add	r3, r3, r2
 3550 0760 2C300BE5 		str	r3, [fp, #-44]
 167:../sudoku_2024.c **** 
 168:../sudoku_2024.c **** 		/* Verificar valor en la seccion (cuadro 3x3) */
 169:../sudoku_2024.c **** 		i = row_start;
 3551              		.loc 1 169 0
 3552 0764 28301BE5 		ldr	r3, [fp, #-40]
 3553 0768 14300BE5 		str	r3, [fp, #-20]
 170:../sudoku_2024.c **** 		while(i < (row_start + 3)){
 3554              		.loc 1 170 0
 3555 076c 2F0000EA 		b	.L38
 3556              	.L42:
 3557              	.LBB10:
 171:../sudoku_2024.c **** 			int j = col_start;
 3558              		.loc 1 171 0
 3559 0770 2C301BE5 		ldr	r3, [fp, #-44]
 3560 0774 18300BE5 		str	r3, [fp, #-24]
 172:../sudoku_2024.c **** 			while(j < (col_start + 3)){
 3561              		.loc 1 172 0
 3562 0778 240000EA 		b	.L39
 3563              	.L41:
 3564              	.LBB11:
 173:../sudoku_2024.c **** 				uint8_t is_bit_set = cuadricula[i][j] & (1 << displace);
 3565              		.loc 1 173 0
 3566 077c 14301BE5 		ldr	r3, [fp, #-20]
 3567 0780 8332A0E1 		mov	r3, r3, asl #5
 3568 0784 38201BE5 		ldr	r2, [fp, #-56]
 3569 0788 032082E0 		add	r2, r2, r3
 3570 078c 18301BE5 		ldr	r3, [fp, #-24]
 3571 0790 8330A0E1 		mov	r3, r3, asl #1
 3572 0794 033082E0 		add	r3, r2, r3
 3573 0798 B030D3E1 		ldrh	r3, [r3, #0]
 3574 079c FF2003E2 		and	r2, r3, #255
 3575 07a0 0110A0E3 		mov	r1, #1
 3576 07a4 20301BE5 		ldr	r3, [fp, #-32]
 3577 07a8 1133A0E1 		mov	r3, r1, asl r3
 3578 07ac FF3003E2 		and	r3, r3, #255
 3579 07b0 033002E0 		and	r3, r2, r3
 3580 07b4 FF3003E2 		and	r3, r3, #255
 3581 07b8 2D304BE5 		strb	r3, [fp, #-45]
 174:../sudoku_2024.c **** 				if(is_bit_set){
 3582              		.loc 1 174 0
 3583 07bc 2D305BE5 		ldrb	r3, [fp, #-45]	@ zero_extendqisi2
 3584 07c0 000053E3 		cmp	r3, #0
 3585 07c4 0E00000A 		beq	.L40
 175:../sudoku_2024.c **** 					activar_error(cuadricula[i][j]);
 3586              		.loc 1 175 0
 3587 07c8 14301BE5 		ldr	r3, [fp, #-20]
 3588 07cc 8332A0E1 		mov	r3, r3, asl #5
 3589 07d0 38201BE5 		ldr	r2, [fp, #-56]
 3590 07d4 032082E0 		add	r2, r2, r3
 3591 07d8 18301BE5 		ldr	r3, [fp, #-24]
 3592 07dc 8330A0E1 		mov	r3, r3, asl #1
 3593 07e0 033082E0 		add	r3, r2, r3
 3594 07e4 B030D3E1 		ldrh	r3, [r3, #0]
 3595 07e8 0300A0E1 		mov	r0, r3
 3596 07ec 11FEFFEB 		bl	activar_error
 176:../sudoku_2024.c **** 					(*errors)++;
 3597              		.loc 1 176 0
 3598 07f0 44301BE5 		ldr	r3, [fp, #-68]
 3599 07f4 003093E5 		ldr	r3, [r3, #0]
 3600 07f8 012083E2 		add	r2, r3, #1
 3601 07fc 44301BE5 		ldr	r3, [fp, #-68]
 3602 0800 002083E5 		str	r2, [r3, #0]
 3603              	.L40:
 177:../sudoku_2024.c **** 				}
 178:../sudoku_2024.c **** 				j++;
 3604              		.loc 1 178 0
 3605 0804 18301BE5 		ldr	r3, [fp, #-24]
 3606 0808 013083E2 		add	r3, r3, #1
 3607 080c 18300BE5 		str	r3, [fp, #-24]
 3608              	.L39:
 3609              	.LBE11:
 172:../sudoku_2024.c **** 			while(j < (col_start + 3)){
 3610              		.loc 1 172 0 discriminator 1
 3611 0810 2C301BE5 		ldr	r3, [fp, #-44]
 3612 0814 032083E2 		add	r2, r3, #3
 3613 0818 18301BE5 		ldr	r3, [fp, #-24]
 3614 081c 030052E1 		cmp	r2, r3
 3615 0820 D5FFFFCA 		bgt	.L41
 179:../sudoku_2024.c **** 			}
 180:../sudoku_2024.c **** 			i++;
 3616              		.loc 1 180 0
 3617 0824 14301BE5 		ldr	r3, [fp, #-20]
 3618 0828 013083E2 		add	r3, r3, #1
 3619 082c 14300BE5 		str	r3, [fp, #-20]
 3620              	.L38:
 3621              	.LBE10:
 170:../sudoku_2024.c **** 		while(i < (row_start + 3)){
 3622              		.loc 1 170 0 discriminator 1
 3623 0830 28301BE5 		ldr	r3, [fp, #-40]
 3624 0834 032083E2 		add	r2, r3, #3
 3625 0838 14301BE5 		ldr	r3, [fp, #-20]
 3626 083c 030052E1 		cmp	r2, r3
 3627 0840 CAFFFFCA 		bgt	.L42
 3628              	.L30:
 3629              	.LBE7:
 181:../sudoku_2024.c **** 		}
 182:../sudoku_2024.c **** 	}
 183:../sudoku_2024.c **** }
 3630              		.loc 1 183 0
 3631 0844 0CD04BE2 		sub	sp, fp, #12
 3632 0848 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3633 084c 1EFF2FE1 		bx	lr
 3634              	.L44:
 3635              		.align	2
 3636              	.L43:
 3637 0850 56555555 		.word	1431655766
 3638              		.cfi_endproc
 3639              	.LFE7:
 3641              		.align	2
 3643              	verificar_lista_calculada:
 3644              	.LFB8:
 184:../sudoku_2024.c **** 
 185:../sudoku_2024.c **** /* Recorre la cuadricula y para cada celda llama a cuadricula_candidatos_verificar */
 186:../sudoku_2024.c **** static void
 187:../sudoku_2024.c **** verificar_lista_calculada(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]){
 3645              		.loc 1 187 0
 3646              		.cfi_startproc
 3647              		@ Function supports interworking.
 3648              		@ args = 0, pretend = 0, frame = 24
 3649              		@ frame_needed = 1, uses_anonymous_args = 0
 3650 0854 0DC0A0E1 		mov	ip, sp
 3651              	.LCFI14:
 3652              		.cfi_def_cfa_register 12
 3653 0858 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3654 085c 04B04CE2 		sub	fp, ip, #4
 3655              		.cfi_offset 14, -8
 3656              		.cfi_offset 13, -12
 3657              		.cfi_offset 11, -16
 3658              	.LCFI15:
 3659              		.cfi_def_cfa 11, 4
 3660 0860 18D04DE2 		sub	sp, sp, #24
 3661 0864 20000BE5 		str	r0, [fp, #-32]
 188:../sudoku_2024.c **** 	int errors = 0;
 3662              		.loc 1 188 0
 3663 0868 0030A0E3 		mov	r3, #0
 3664 086c 18300BE5 		str	r3, [fp, #-24]
 189:../sudoku_2024.c **** 	    int row = 0;
 3665              		.loc 1 189 0
 3666 0870 0030A0E3 		mov	r3, #0
 3667 0874 10300BE5 		str	r3, [fp, #-16]
 190:../sudoku_2024.c **** 	    while(row < NUM_FILAS){
 3668              		.loc 1 190 0
 3669 0878 100000EA 		b	.L46
 3670              	.L49:
 3671              	.LBB12:
 191:../sudoku_2024.c **** 			int col = 0;
 3672              		.loc 1 191 0
 3673 087c 0030A0E3 		mov	r3, #0
 3674 0880 14300BE5 		str	r3, [fp, #-20]
 192:../sudoku_2024.c **** 	    	while(col < NUM_COLUMNAS - 7){
 3675              		.loc 1 192 0
 3676 0884 070000EA 		b	.L47
 3677              	.L48:
 193:../sudoku_2024.c **** 	    		cuadricula_candidatos_verificar(cuadricula, row, col, &errors);
 3678              		.loc 1 193 0
 3679 0888 18304BE2 		sub	r3, fp, #24
 3680 088c 20001BE5 		ldr	r0, [fp, #-32]
 3681 0890 10101BE5 		ldr	r1, [fp, #-16]
 3682 0894 14201BE5 		ldr	r2, [fp, #-20]
 3683 0898 2FFFFFEB 		bl	cuadricula_candidatos_verificar
 194:../sudoku_2024.c **** 	    		col++;
 3684              		.loc 1 194 0
 3685 089c 14301BE5 		ldr	r3, [fp, #-20]
 3686 08a0 013083E2 		add	r3, r3, #1
 3687 08a4 14300BE5 		str	r3, [fp, #-20]
 3688              	.L47:
 192:../sudoku_2024.c **** 	    	while(col < NUM_COLUMNAS - 7){
 3689              		.loc 1 192 0 discriminator 1
 3690 08a8 14301BE5 		ldr	r3, [fp, #-20]
 3691 08ac 080053E3 		cmp	r3, #8
 3692 08b0 F4FFFFDA 		ble	.L48
 195:../sudoku_2024.c **** 	    	}
 196:../sudoku_2024.c **** 	    	row++;
 3693              		.loc 1 196 0
 3694 08b4 10301BE5 		ldr	r3, [fp, #-16]
 3695 08b8 013083E2 		add	r3, r3, #1
 3696 08bc 10300BE5 		str	r3, [fp, #-16]
 3697              	.L46:
 3698              	.LBE12:
 190:../sudoku_2024.c **** 	    while(row < NUM_FILAS){
 3699              		.loc 1 190 0 discriminator 1
 3700 08c0 10301BE5 		ldr	r3, [fp, #-16]
 3701 08c4 080053E3 		cmp	r3, #8
 3702 08c8 EBFFFFDA 		ble	.L49
 197:../sudoku_2024.c **** 	    }
 198:../sudoku_2024.c **** }
 3703              		.loc 1 198 0
 3704 08cc 0CD04BE2 		sub	sp, fp, #12
 3705 08d0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3706 08d4 1EFF2FE1 		bx	lr
 3707              		.cfi_endproc
 3708              	.LFE8:
 3710              		.align	2
 3711              		.global	sudoku9x9
 3713              	sudoku9x9:
 3714              	.LFB9:
 199:../sudoku_2024.c **** 
 200:../sudoku_2024.c **** /* *****************************************************************************
 201:../sudoku_2024.c ****  * Funciones publicas
 202:../sudoku_2024.c ****  * (pueden ser invocadas desde otro fichero) */
 203:../sudoku_2024.c **** 
 204:../sudoku_2024.c **** /* *******************************************cuadricula[NUM_FILAS][NUM_COLUMNAS]******************
 205:../sudoku_2024.c ****  * programa principal del juego que recibe el tablero,
 206:../sudoku_2024.c ****  * y la senyal de ready que indica que se han actualizado fila y columna */
 207:../sudoku_2024.c **** void
 208:../sudoku_2024.c **** sudoku9x9(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], char *ready)
 209:../sudoku_2024.c **** {
 3715              		.loc 1 209 0
 3716              		.cfi_startproc
 3717              		@ Function supports interworking.
 3718              		@ args = 0, pretend = 0, frame = 16
 3719              		@ frame_needed = 1, uses_anonymous_args = 0
 3720 08d8 0DC0A0E1 		mov	ip, sp
 3721              	.LCFI16:
 3722              		.cfi_def_cfa_register 12
 3723 08dc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3724 08e0 04B04CE2 		sub	fp, ip, #4
 3725              		.cfi_offset 14, -8
 3726              		.cfi_offset 13, -12
 3727              		.cfi_offset 11, -16
 3728              	.LCFI17:
 3729              		.cfi_def_cfa 11, 4
 3730 08e4 10D04DE2 		sub	sp, sp, #16
 3731 08e8 18000BE5 		str	r0, [fp, #-24]
 3732 08ec 1C100BE5 		str	r1, [fp, #-28]
 210:../sudoku_2024.c ****     int celdas_vacias;
 211:../sudoku_2024.c ****     char version_init = 'C';
 3733              		.loc 1 211 0
 3734 08f0 4330A0E3 		mov	r3, #67
 3735 08f4 0D304BE5 		strb	r3, [fp, #-13]
 212:../sudoku_2024.c **** 
 213:../sudoku_2024.c ****     // Dos configuraciones para *init*
 214:../sudoku_2024.c ****     if(version_init == 'C'){
 3736              		.loc 1 214 0
 3737 08f8 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3738 08fc 430053E3 		cmp	r3, #67
 3739 0900 0200001A 		bne	.L51
 215:../sudoku_2024.c ****     	celdas_vacias = sudoku_candidatos_init_c(cuadricula);
 3740              		.loc 1 215 0
 3741 0904 18001BE5 		ldr	r0, [fp, #-24]
 3742 0908 ECFEFFEB 		bl	sudoku_candidatos_init_c
 3743 090c 14000BE5 		str	r0, [fp, #-20]
 3744              	.L51:
 216:../sudoku_2024.c ****     }
 217:../sudoku_2024.c ****     if(version_init == 'A'){
 3745              		.loc 1 217 0
 3746 0910 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3747 0914 410053E3 		cmp	r3, #65
 3748 0918 0200001A 		bne	.L52
 218:../sudoku_2024.c ****     	celdas_vacias = sudoku_candidatos_init_arm(cuadricula);
 3749              		.loc 1 218 0
 3750 091c 18001BE5 		ldr	r0, [fp, #-24]
 3751 0920 FEFFFFEB 		bl	sudoku_candidatos_init_arm
 3752 0924 14000BE5 		str	r0, [fp, #-20]
 3753              	.L52:
 219:../sudoku_2024.c ****     }
 220:../sudoku_2024.c **** 
 221:../sudoku_2024.c ****     /* verificar que la lista de candidatos calculada es correcta */
 222:../sudoku_2024.c ****     verificar_lista_calculada(cuadricula);
 3754              		.loc 1 222 0
 3755 0928 18001BE5 		ldr	r0, [fp, #-24]
 3756 092c C8FFFFEB 		bl	verificar_lista_calculada
 223:../sudoku_2024.c ****     /* repetir para otras versiones (C optimizado, ARM, THUMB) */
 224:../sudoku_2024.c **** }
 3757              		.loc 1 224 0
 3758 0930 0CD04BE2 		sub	sp, fp, #12
 3759 0934 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3760 0938 1EFF2FE1 		bx	lr
 3761              		.cfi_endproc
 3762              	.LFE9:
 3764              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 sudoku_2024.c
C:\Users\Jorge\AppData\Local\Temp\ccNIvjF9.s:2817   .text:00000000 $a
C:\Users\Jorge\AppData\Local\Temp\ccNIvjF9.s:2819   .text:00000000 celda_leer_valor
C:\Users\Jorge\AppData\Local\Temp\ccNIvjF9.s:2854   .text:00000038 activar_error
C:\Users\Jorge\AppData\Local\Temp\ccNIvjF9.s:2888   .text:00000068 sudoku_candidatos_propagar_c
C:\Users\Jorge\AppData\Local\Temp\ccNIvjF9.s:3103   .text:000002fc $d
C:\Users\Jorge\AppData\Local\Temp\ccNIvjF9.s:3107   .text:00000300 $a
C:\Users\Jorge\AppData\Local\Temp\ccNIvjF9.s:3110   .text:00000300 init_candidatos
C:\Users\Jorge\AppData\Local\Temp\ccNIvjF9.s:3210   .text:000003ec propagar_if_value
C:\Users\Jorge\AppData\Local\Temp\ccNIvjF9.s:3305   .text:000004c0 sudoku_candidatos_init_c
C:\Users\Jorge\AppData\Local\Temp\ccNIvjF9.s:3375   .text:0000055c cuadricula_candidatos_verificar
C:\Users\Jorge\AppData\Local\Temp\ccNIvjF9.s:3637   .text:00000850 $d
C:\Users\Jorge\AppData\Local\Temp\ccNIvjF9.s:3641   .text:00000854 $a
C:\Users\Jorge\AppData\Local\Temp\ccNIvjF9.s:3643   .text:00000854 verificar_lista_calculada
C:\Users\Jorge\AppData\Local\Temp\ccNIvjF9.s:3713   .text:000008d8 sudoku9x9
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
sudoku_candidatos_propagar_arm
sudoku_candidatos_init_arm
