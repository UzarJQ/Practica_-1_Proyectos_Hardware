   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"sudoku_2024.c"
  21              	.Ltext0:
  22              		.file 1 "../sudoku_2024.c"
 2817              		.align	2
 2819              	celda_leer_valor:
 2820              	.LFB1:
   1:../sudoku_2024.c **** #include "sudoku_2024.h"
   2:../sudoku_2024.c **** #include <stdio.h>
   3:../sudoku_2024.c **** #include <stdlib.h>
   4:../sudoku_2024.c **** 
   5:../sudoku_2024.c **** //extern void
   6:../sudoku_2024.c **** //sudoku_candidatos_propagar_arm(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], uint8_t fila, uint8_t c
   7:../sudoku_2024.c **** //sudoku_candidatos_init_arm(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]);
   8:../sudoku_2024.c **** /* *****************************************************************************
   9:../sudoku_2024.c ****  * Funciones privadas (static)
  10:../sudoku_2024.c ****  * (no pueden ser invocadas desde otro fichero) */
  11:../sudoku_2024.c ****  
  12:../sudoku_2024.c **** /* modifica el valor almacenado en la celda indicada */
  13:../sudoku_2024.c **** static inline void
  14:../sudoku_2024.c **** celda_poner_valor(CELDA *celdaptr, uint8_t val)
  15:../sudoku_2024.c **** {
  16:../sudoku_2024.c ****     *celdaptr = (*celdaptr & 0xFFF0) | (val & 0x000F);
  17:../sudoku_2024.c **** }
  18:../sudoku_2024.c **** 
  19:../sudoku_2024.c **** /* extrae el valor almacenado en los 16 bits de la celda */
  20:../sudoku_2024.c **** static inline uint8_t
  21:../sudoku_2024.c **** celda_leer_valor(CELDA celda)
  22:../sudoku_2024.c **** {
 2821              		.loc 1 22 0
 2822              		.cfi_startproc
 2823              		@ Function supports interworking.
 2824              		@ args = 0, pretend = 0, frame = 8
 2825              		@ frame_needed = 1, uses_anonymous_args = 0
 2826 0000 0DC0A0E1 		mov	ip, sp
 2827              	.LCFI0:
 2828              		.cfi_def_cfa_register 12
 2829 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2830 0008 04B04CE2 		sub	fp, ip, #4
 2831              		.cfi_offset 14, -8
 2832              		.cfi_offset 13, -12
 2833              		.cfi_offset 11, -16
 2834              	.LCFI1:
 2835              		.cfi_def_cfa 11, 4
 2836 000c 08D04DE2 		sub	sp, sp, #8
 2837 0010 0030A0E1 		mov	r3, r0
 2838 0014 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  23:../sudoku_2024.c ****     return (celda & 0x000F);
 2839              		.loc 1 23 0
 2840 0018 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2841 001c FF3003E2 		and	r3, r3, #255
 2842 0020 0F3003E2 		and	r3, r3, #15
 2843 0024 FF3003E2 		and	r3, r3, #255
  24:../sudoku_2024.c **** }
 2844              		.loc 1 24 0
 2845 0028 0300A0E1 		mov	r0, r3
 2846 002c 0CD04BE2 		sub	sp, fp, #12
 2847 0030 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2848 0034 1EFF2FE1 		bx	lr
 2849              		.cfi_endproc
 2850              	.LFE1:
 2852              		.align	2
 2854              	activar_error:
 2855              	.LFB2:
  25:../sudoku_2024.c **** 
  26:../sudoku_2024.c **** /* Activa el bit de error en la celda indicada */
  27:../sudoku_2024.c **** static inline void
  28:../sudoku_2024.c **** activar_error(CELDA celda)
  29:../sudoku_2024.c **** {
 2856              		.loc 1 29 0
 2857              		.cfi_startproc
 2858              		@ Function supports interworking.
 2859              		@ args = 0, pretend = 0, frame = 8
 2860              		@ frame_needed = 1, uses_anonymous_args = 0
 2861 0038 0DC0A0E1 		mov	ip, sp
 2862              	.LCFI2:
 2863              		.cfi_def_cfa_register 12
 2864 003c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2865 0040 04B04CE2 		sub	fp, ip, #4
 2866              		.cfi_offset 14, -8
 2867              		.cfi_offset 13, -12
 2868              		.cfi_offset 11, -16
 2869              	.LCFI3:
 2870              		.cfi_def_cfa 11, 4
 2871 0044 08D04DE2 		sub	sp, sp, #8
 2872 0048 0030A0E1 		mov	r3, r0
 2873 004c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  30:../sudoku_2024.c **** 	celda = celda |= 0x4000;
 2874              		.loc 1 30 0
 2875 0050 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2876 0054 013983E3 		orr	r3, r3, #16384
 2877 0058 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  31:../sudoku_2024.c **** }
 2878              		.loc 1 31 0
 2879 005c 0CD04BE2 		sub	sp, fp, #12
 2880 0060 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2881 0064 1EFF2FE1 		bx	lr
 2882              		.cfi_endproc
 2883              	.LFE2:
 2885              		.align	2
 2886              		.global	sudoku_candidatos_propagar_c
 2888              	sudoku_candidatos_propagar_c:
 2889              	.LFB3:
  32:../sudoku_2024.c **** 
  33:../sudoku_2024.c **** /* Propaga el valor de una determinada celda para actualizar las listas de candidatos en su fila, c
  34:../sudoku_2024.c **** void
  35:../sudoku_2024.c **** sudoku_candidatos_propagar_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int fila, int columna, uint
  36:../sudoku_2024.c **** {
 2890              		.loc 1 36 0
 2891              		.cfi_startproc
 2892              		@ Function supports interworking.
 2893              		@ args = 0, pretend = 0, frame = 40
 2894              		@ frame_needed = 1, uses_anonymous_args = 0
 2895 0068 0DC0A0E1 		mov	ip, sp
 2896              	.LCFI4:
 2897              		.cfi_def_cfa_register 12
 2898 006c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2899 0070 04B04CE2 		sub	fp, ip, #4
 2900              		.cfi_offset 14, -8
 2901              		.cfi_offset 13, -12
 2902              		.cfi_offset 11, -16
 2903              	.LCFI5:
 2904              		.cfi_def_cfa 11, 4
 2905 0074 28D04DE2 		sub	sp, sp, #40
 2906 0078 28000BE5 		str	r0, [fp, #-40]
 2907 007c 2C100BE5 		str	r1, [fp, #-44]
 2908 0080 30200BE5 		str	r2, [fp, #-48]
 2909 0084 31304BE5 		strb	r3, [fp, #-49]
  37:../sudoku_2024.c **** 	int displace = 3 + (int)valor;
 2910              		.loc 1 37 0
 2911 0088 31305BE5 		ldrb	r3, [fp, #-49]	@ zero_extendqisi2
 2912 008c 033083E2 		add	r3, r3, #3
 2913 0090 1C300BE5 		str	r3, [fp, #-28]
  38:../sudoku_2024.c **** 
  39:../sudoku_2024.c ****     /* recorrer cada columna desactivando el candidato de la lista */
  40:../sudoku_2024.c ****     int col = 0;
 2914              		.loc 1 40 0
 2915 0094 0030A0E3 		mov	r3, #0
 2916 0098 10300BE5 		str	r3, [fp, #-16]
  41:../sudoku_2024.c ****     while(col < NUM_COLUMNAS - 7){
 2917              		.loc 1 41 0
 2918 009c 210000EA 		b	.L4
 2919              	.L5:
  42:../sudoku_2024.c ****     	cuadricula[fila][col] &= ~(1 << displace);	// Desactivar el candidato de la lista con una oper
 2920              		.loc 1 42 0
 2921 00a0 2C301BE5 		ldr	r3, [fp, #-44]
 2922 00a4 8332A0E1 		mov	r3, r3, asl #5
 2923 00a8 28201BE5 		ldr	r2, [fp, #-40]
 2924 00ac 031082E0 		add	r1, r2, r3
 2925 00b0 2C301BE5 		ldr	r3, [fp, #-44]
 2926 00b4 8332A0E1 		mov	r3, r3, asl #5
 2927 00b8 28201BE5 		ldr	r2, [fp, #-40]
 2928 00bc 032082E0 		add	r2, r2, r3
 2929 00c0 10301BE5 		ldr	r3, [fp, #-16]
 2930 00c4 8330A0E1 		mov	r3, r3, asl #1
 2931 00c8 033082E0 		add	r3, r2, r3
 2932 00cc B030D3E1 		ldrh	r3, [r3, #0]
 2933 00d0 0338A0E1 		mov	r3, r3, asl #16
 2934 00d4 2328A0E1 		mov	r2, r3, lsr #16
 2935 00d8 0100A0E3 		mov	r0, #1
 2936 00dc 1C301BE5 		ldr	r3, [fp, #-28]
 2937 00e0 1033A0E1 		mov	r3, r0, asl r3
 2938 00e4 0338A0E1 		mov	r3, r3, asl #16
 2939 00e8 2338A0E1 		mov	r3, r3, lsr #16
 2940 00ec 0330E0E1 		mvn	r3, r3
 2941 00f0 0338A0E1 		mov	r3, r3, asl #16
 2942 00f4 2338A0E1 		mov	r3, r3, lsr #16
 2943 00f8 033002E0 		and	r3, r2, r3
 2944 00fc 0338A0E1 		mov	r3, r3, asl #16
 2945 0100 2338A0E1 		mov	r3, r3, lsr #16
 2946 0104 0338A0E1 		mov	r3, r3, asl #16
 2947 0108 2328A0E1 		mov	r2, r3, lsr #16
 2948 010c 10301BE5 		ldr	r3, [fp, #-16]
 2949 0110 8330A0E1 		mov	r3, r3, asl #1
 2950 0114 033081E0 		add	r3, r1, r3
 2951 0118 B020C3E1 		strh	r2, [r3, #0]	@ movhi
  43:../sudoku_2024.c ****     	col++;
 2952              		.loc 1 43 0
 2953 011c 10301BE5 		ldr	r3, [fp, #-16]
 2954 0120 013083E2 		add	r3, r3, #1
 2955 0124 10300BE5 		str	r3, [fp, #-16]
 2956              	.L4:
  41:../sudoku_2024.c ****     while(col < NUM_COLUMNAS - 7){
 2957              		.loc 1 41 0 discriminator 1
 2958 0128 10301BE5 		ldr	r3, [fp, #-16]
 2959 012c 080053E3 		cmp	r3, #8
 2960 0130 DAFFFFDA 		ble	.L5
  44:../sudoku_2024.c ****     }
  45:../sudoku_2024.c **** 
  46:../sudoku_2024.c ****     /* recorrer cada fila desactivando el candidato de la lista */
  47:../sudoku_2024.c ****     int row = 0;
 2961              		.loc 1 47 0
 2962 0134 0030A0E3 		mov	r3, #0
 2963 0138 14300BE5 		str	r3, [fp, #-20]
  48:../sudoku_2024.c ****     while(row < NUM_FILAS){
 2964              		.loc 1 48 0
 2965 013c 210000EA 		b	.L6
 2966              	.L7:
  49:../sudoku_2024.c ****     	cuadricula[row][columna] &= ~(1 << displace);
 2967              		.loc 1 49 0
 2968 0140 14301BE5 		ldr	r3, [fp, #-20]
 2969 0144 8332A0E1 		mov	r3, r3, asl #5
 2970 0148 28201BE5 		ldr	r2, [fp, #-40]
 2971 014c 031082E0 		add	r1, r2, r3
 2972 0150 14301BE5 		ldr	r3, [fp, #-20]
 2973 0154 8332A0E1 		mov	r3, r3, asl #5
 2974 0158 28201BE5 		ldr	r2, [fp, #-40]
 2975 015c 032082E0 		add	r2, r2, r3
 2976 0160 30301BE5 		ldr	r3, [fp, #-48]
 2977 0164 8330A0E1 		mov	r3, r3, asl #1
 2978 0168 033082E0 		add	r3, r2, r3
 2979 016c B030D3E1 		ldrh	r3, [r3, #0]
 2980 0170 0338A0E1 		mov	r3, r3, asl #16
 2981 0174 2328A0E1 		mov	r2, r3, lsr #16
 2982 0178 0100A0E3 		mov	r0, #1
 2983 017c 1C301BE5 		ldr	r3, [fp, #-28]
 2984 0180 1033A0E1 		mov	r3, r0, asl r3
 2985 0184 0338A0E1 		mov	r3, r3, asl #16
 2986 0188 2338A0E1 		mov	r3, r3, lsr #16
 2987 018c 0330E0E1 		mvn	r3, r3
 2988 0190 0338A0E1 		mov	r3, r3, asl #16
 2989 0194 2338A0E1 		mov	r3, r3, lsr #16
 2990 0198 033002E0 		and	r3, r2, r3
 2991 019c 0338A0E1 		mov	r3, r3, asl #16
 2992 01a0 2338A0E1 		mov	r3, r3, lsr #16
 2993 01a4 0338A0E1 		mov	r3, r3, asl #16
 2994 01a8 2328A0E1 		mov	r2, r3, lsr #16
 2995 01ac 30301BE5 		ldr	r3, [fp, #-48]
 2996 01b0 8330A0E1 		mov	r3, r3, asl #1
 2997 01b4 033081E0 		add	r3, r1, r3
 2998 01b8 B020C3E1 		strh	r2, [r3, #0]	@ movhi
  50:../sudoku_2024.c ****     	row++;
 2999              		.loc 1 50 0
 3000 01bc 14301BE5 		ldr	r3, [fp, #-20]
 3001 01c0 013083E2 		add	r3, r3, #1
 3002 01c4 14300BE5 		str	r3, [fp, #-20]
 3003              	.L6:
  48:../sudoku_2024.c ****     while(row < NUM_FILAS){
 3004              		.loc 1 48 0 discriminator 1
 3005 01c8 14301BE5 		ldr	r3, [fp, #-20]
 3006 01cc 080053E3 		cmp	r3, #8
 3007 01d0 DAFFFFDA 		ble	.L7
  51:../sudoku_2024.c ****     }
  52:../sudoku_2024.c **** 
  53:../sudoku_2024.c **** 
  54:../sudoku_2024.c ****     /* Calcular la posicion inicial para cada region 3x3 correspondiente */
  55:../sudoku_2024.c ****     int row_start = (fila / 3) * 3;
 3008              		.loc 1 55 0
 3009 01d4 2C301BE5 		ldr	r3, [fp, #-44]
 3010 01d8 1C219FE5 		ldr	r2, .L12
 3011 01dc 9312C2E0 		smull	r1, r2, r3, r2
 3012 01e0 C33FA0E1 		mov	r3, r3, asr #31
 3013 01e4 022063E0 		rsb	r2, r3, r2
 3014 01e8 0230A0E1 		mov	r3, r2
 3015 01ec 8330A0E1 		mov	r3, r3, asl #1
 3016 01f0 023083E0 		add	r3, r3, r2
 3017 01f4 20300BE5 		str	r3, [fp, #-32]
  56:../sudoku_2024.c ****     int col_start = (columna / 3) * 3;
 3018              		.loc 1 56 0
 3019 01f8 30301BE5 		ldr	r3, [fp, #-48]
 3020 01fc F8209FE5 		ldr	r2, .L12
 3021 0200 9312C2E0 		smull	r1, r2, r3, r2
 3022 0204 C33FA0E1 		mov	r3, r3, asr #31
 3023 0208 022063E0 		rsb	r2, r3, r2
 3024 020c 0230A0E1 		mov	r3, r2
 3025 0210 8330A0E1 		mov	r3, r3, asl #1
 3026 0214 023083E0 		add	r3, r3, r2
 3027 0218 24300BE5 		str	r3, [fp, #-36]
  57:../sudoku_2024.c **** 
  58:../sudoku_2024.c ****     /* Recorrer la region desactivando el candidato de la lista */
  59:../sudoku_2024.c ****     row = row_start;
 3028              		.loc 1 59 0
 3029 021c 20301BE5 		ldr	r3, [fp, #-32]
 3030 0220 14300BE5 		str	r3, [fp, #-20]
  60:../sudoku_2024.c ****     while(row < (row_start + 3)){
 3031              		.loc 1 60 0
 3032 0224 2C0000EA 		b	.L8
 3033              	.L11:
 3034              	.LBB2:
  61:../sudoku_2024.c ****     	int col = col_start;
 3035              		.loc 1 61 0
 3036 0228 24301BE5 		ldr	r3, [fp, #-36]
 3037 022c 18300BE5 		str	r3, [fp, #-24]
  62:../sudoku_2024.c ****     	while(col < (col_start + 3)){
 3038              		.loc 1 62 0
 3039 0230 210000EA 		b	.L9
 3040              	.L10:
  63:../sudoku_2024.c ****     		cuadricula[row][col] &= ~(1 << displace);
 3041              		.loc 1 63 0
 3042 0234 14301BE5 		ldr	r3, [fp, #-20]
 3043 0238 8332A0E1 		mov	r3, r3, asl #5
 3044 023c 28201BE5 		ldr	r2, [fp, #-40]
 3045 0240 031082E0 		add	r1, r2, r3
 3046 0244 14301BE5 		ldr	r3, [fp, #-20]
 3047 0248 8332A0E1 		mov	r3, r3, asl #5
 3048 024c 28201BE5 		ldr	r2, [fp, #-40]
 3049 0250 032082E0 		add	r2, r2, r3
 3050 0254 18301BE5 		ldr	r3, [fp, #-24]
 3051 0258 8330A0E1 		mov	r3, r3, asl #1
 3052 025c 033082E0 		add	r3, r2, r3
 3053 0260 B030D3E1 		ldrh	r3, [r3, #0]
 3054 0264 0338A0E1 		mov	r3, r3, asl #16
 3055 0268 2328A0E1 		mov	r2, r3, lsr #16
 3056 026c 0100A0E3 		mov	r0, #1
 3057 0270 1C301BE5 		ldr	r3, [fp, #-28]
 3058 0274 1033A0E1 		mov	r3, r0, asl r3
 3059 0278 0338A0E1 		mov	r3, r3, asl #16
 3060 027c 2338A0E1 		mov	r3, r3, lsr #16
 3061 0280 0330E0E1 		mvn	r3, r3
 3062 0284 0338A0E1 		mov	r3, r3, asl #16
 3063 0288 2338A0E1 		mov	r3, r3, lsr #16
 3064 028c 033002E0 		and	r3, r2, r3
 3065 0290 0338A0E1 		mov	r3, r3, asl #16
 3066 0294 2338A0E1 		mov	r3, r3, lsr #16
 3067 0298 0338A0E1 		mov	r3, r3, asl #16
 3068 029c 2328A0E1 		mov	r2, r3, lsr #16
 3069 02a0 18301BE5 		ldr	r3, [fp, #-24]
 3070 02a4 8330A0E1 		mov	r3, r3, asl #1
 3071 02a8 033081E0 		add	r3, r1, r3
 3072 02ac B020C3E1 		strh	r2, [r3, #0]	@ movhi
  64:../sudoku_2024.c ****     		col++;
 3073              		.loc 1 64 0
 3074 02b0 18301BE5 		ldr	r3, [fp, #-24]
 3075 02b4 013083E2 		add	r3, r3, #1
 3076 02b8 18300BE5 		str	r3, [fp, #-24]
 3077              	.L9:
  62:../sudoku_2024.c ****     	while(col < (col_start + 3)){
 3078              		.loc 1 62 0 discriminator 1
 3079 02bc 24301BE5 		ldr	r3, [fp, #-36]
 3080 02c0 032083E2 		add	r2, r3, #3
 3081 02c4 18301BE5 		ldr	r3, [fp, #-24]
 3082 02c8 030052E1 		cmp	r2, r3
 3083 02cc D8FFFFCA 		bgt	.L10
  65:../sudoku_2024.c ****     	}
  66:../sudoku_2024.c ****     	row++;
 3084              		.loc 1 66 0
 3085 02d0 14301BE5 		ldr	r3, [fp, #-20]
 3086 02d4 013083E2 		add	r3, r3, #1
 3087 02d8 14300BE5 		str	r3, [fp, #-20]
 3088              	.L8:
 3089              	.LBE2:
  60:../sudoku_2024.c ****     while(row < (row_start + 3)){
 3090              		.loc 1 60 0 discriminator 1
 3091 02dc 20301BE5 		ldr	r3, [fp, #-32]
 3092 02e0 032083E2 		add	r2, r3, #3
 3093 02e4 14301BE5 		ldr	r3, [fp, #-20]
 3094 02e8 030052E1 		cmp	r2, r3
 3095 02ec CDFFFFCA 		bgt	.L11
  67:../sudoku_2024.c ****     }
  68:../sudoku_2024.c **** }
 3096              		.loc 1 68 0
 3097 02f0 0CD04BE2 		sub	sp, fp, #12
 3098 02f4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3099 02f8 1EFF2FE1 		bx	lr
 3100              	.L13:
 3101              		.align	2
 3102              	.L12:
 3103 02fc 56555555 		.word	1431655766
 3104              		.cfi_endproc
 3105              	.LFE3:
 3107              		.align	2
 3108              		.global	init_candidatos
 3110              	init_candidatos:
 3111              	.LFB4:
  69:../sudoku_2024.c **** 
  70:../sudoku_2024.c **** /* Recorrer la cuadricula inicializando los candidatos de las celdas */
  71:../sudoku_2024.c **** void
  72:../sudoku_2024.c **** init_candidatos(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]){
 3112              		.loc 1 72 0
 3113              		.cfi_startproc
 3114              		@ Function supports interworking.
 3115              		@ args = 0, pretend = 0, frame = 24
 3116              		@ frame_needed = 1, uses_anonymous_args = 0
 3117 0300 0DC0A0E1 		mov	ip, sp
 3118              	.LCFI6:
 3119              		.cfi_def_cfa_register 12
 3120 0304 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3121 0308 04B04CE2 		sub	fp, ip, #4
 3122              		.cfi_offset 14, -8
 3123              		.cfi_offset 13, -12
 3124              		.cfi_offset 11, -16
 3125              	.LCFI7:
 3126              		.cfi_def_cfa 11, 4
 3127 030c 18D04DE2 		sub	sp, sp, #24
 3128 0310 20000BE5 		str	r0, [fp, #-32]
  73:../sudoku_2024.c **** 	int row=0;
 3129              		.loc 1 73 0
 3130 0314 0030A0E3 		mov	r3, #0
 3131 0318 10300BE5 		str	r3, [fp, #-16]
  74:../sudoku_2024.c **** 	while(row < NUM_FILAS){
 3132              		.loc 1 74 0
 3133 031c 2C0000EA 		b	.L15
 3134              	.L19:
 3135              	.LBB3:
  75:../sudoku_2024.c **** 		int col=0;
 3136              		.loc 1 75 0
 3137 0320 0030A0E3 		mov	r3, #0
 3138 0324 14300BE5 		str	r3, [fp, #-20]
  76:../sudoku_2024.c **** 		while(col < NUM_COLUMNAS - 7){
 3139              		.loc 1 76 0
 3140 0328 230000EA 		b	.L16
 3141              	.L18:
 3142              	.LBB4:
  77:../sudoku_2024.c **** 
  78:../sudoku_2024.c **** 			int pista = cuadricula[row][col] & 0x8000;
 3143              		.loc 1 78 0
 3144 032c 10301BE5 		ldr	r3, [fp, #-16]
 3145 0330 8332A0E1 		mov	r3, r3, asl #5
 3146 0334 20201BE5 		ldr	r2, [fp, #-32]
 3147 0338 032082E0 		add	r2, r2, r3
 3148 033c 14301BE5 		ldr	r3, [fp, #-20]
 3149 0340 8330A0E1 		mov	r3, r3, asl #1
 3150 0344 033082E0 		add	r3, r2, r3
 3151 0348 B030D3E1 		ldrh	r3, [r3, #0]
 3152 034c 023903E2 		and	r3, r3, #32768
 3153 0350 18300BE5 		str	r3, [fp, #-24]
  79:../sudoku_2024.c **** 			if(pista == 0){
 3154              		.loc 1 79 0
 3155 0354 18301BE5 		ldr	r3, [fp, #-24]
 3156 0358 000053E3 		cmp	r3, #0
 3157 035c 1300001A 		bne	.L17
  80:../sudoku_2024.c **** 				cuadricula[row][col] |= 0x1FF0;
 3158              		.loc 1 80 0
 3159 0360 10301BE5 		ldr	r3, [fp, #-16]
 3160 0364 8332A0E1 		mov	r3, r3, asl #5
 3161 0368 20201BE5 		ldr	r2, [fp, #-32]
 3162 036c 031082E0 		add	r1, r2, r3
 3163 0370 10301BE5 		ldr	r3, [fp, #-16]
 3164 0374 8332A0E1 		mov	r3, r3, asl #5
 3165 0378 20201BE5 		ldr	r2, [fp, #-32]
 3166 037c 032082E0 		add	r2, r2, r3
 3167 0380 14301BE5 		ldr	r3, [fp, #-20]
 3168 0384 8330A0E1 		mov	r3, r3, asl #1
 3169 0388 033082E0 		add	r3, r2, r3
 3170 038c B030D3E1 		ldrh	r3, [r3, #0]
 3171 0390 7F3D83E3 		orr	r3, r3, #8128
 3172 0394 303083E3 		orr	r3, r3, #48
 3173 0398 0338A0E1 		mov	r3, r3, asl #16
 3174 039c 2328A0E1 		mov	r2, r3, lsr #16
 3175 03a0 14301BE5 		ldr	r3, [fp, #-20]
 3176 03a4 8330A0E1 		mov	r3, r3, asl #1
 3177 03a8 033081E0 		add	r3, r1, r3
 3178 03ac B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3179              	.L17:
  81:../sudoku_2024.c **** 			}
  82:../sudoku_2024.c **** 			col++;
 3180              		.loc 1 82 0
 3181 03b0 14301BE5 		ldr	r3, [fp, #-20]
 3182 03b4 013083E2 		add	r3, r3, #1
 3183 03b8 14300BE5 		str	r3, [fp, #-20]
 3184              	.L16:
 3185              	.LBE4:
  76:../sudoku_2024.c **** 		while(col < NUM_COLUMNAS - 7){
 3186              		.loc 1 76 0 discriminator 1
 3187 03bc 14301BE5 		ldr	r3, [fp, #-20]
 3188 03c0 080053E3 		cmp	r3, #8
 3189 03c4 D8FFFFDA 		ble	.L18
  83:../sudoku_2024.c **** 		}
  84:../sudoku_2024.c **** 		row++;
 3190              		.loc 1 84 0
 3191 03c8 10301BE5 		ldr	r3, [fp, #-16]
 3192 03cc 013083E2 		add	r3, r3, #1
 3193 03d0 10300BE5 		str	r3, [fp, #-16]
 3194              	.L15:
 3195              	.LBE3:
  74:../sudoku_2024.c **** 	while(row < NUM_FILAS){
 3196              		.loc 1 74 0 discriminator 1
 3197 03d4 10301BE5 		ldr	r3, [fp, #-16]
 3198 03d8 080053E3 		cmp	r3, #8
 3199 03dc CFFFFFDA 		ble	.L19
  85:../sudoku_2024.c **** 	}
  86:../sudoku_2024.c **** }
 3200              		.loc 1 86 0
 3201 03e0 0CD04BE2 		sub	sp, fp, #12
 3202 03e4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3203 03e8 1EFF2FE1 		bx	lr
 3204              		.cfi_endproc
 3205              	.LFE4:
 3207              		.align	2
 3208              		.global	propagar_if_value
 3210              	propagar_if_value:
 3211              	.LFB5:
  87:../sudoku_2024.c **** 
  88:../sudoku_2024.c **** // Recorrer la cuadricula aumentando la cantidad de celdas vacias (valor 0) y llamando a la funcion
  89:../sudoku_2024.c **** void
  90:../sudoku_2024.c **** propagar_if_value(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int *celdas_vacias){
 3212              		.loc 1 90 0
 3213              		.cfi_startproc
 3214              		@ Function supports interworking.
 3215              		@ args = 0, pretend = 0, frame = 24
 3216              		@ frame_needed = 1, uses_anonymous_args = 0
 3217 03ec 0DC0A0E1 		mov	ip, sp
 3218              	.LCFI8:
 3219              		.cfi_def_cfa_register 12
 3220 03f0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3221 03f4 04B04CE2 		sub	fp, ip, #4
 3222              		.cfi_offset 14, -8
 3223              		.cfi_offset 13, -12
 3224              		.cfi_offset 11, -16
 3225              	.LCFI9:
 3226              		.cfi_def_cfa 11, 4
 3227 03f8 18D04DE2 		sub	sp, sp, #24
 3228 03fc 20000BE5 		str	r0, [fp, #-32]
 3229 0400 24100BE5 		str	r1, [fp, #-36]
  91:../sudoku_2024.c **** 	char version_propagar = 'A';
 3230              		.loc 1 91 0
 3231 0404 4130A0E3 		mov	r3, #65
 3232 0408 15304BE5 		strb	r3, [fp, #-21]
  92:../sudoku_2024.c **** 	uint8_t valor_inicial = celda_leer_valor(cuadricula[0][0]);
 3233              		.loc 1 92 0
 3234 040c 20301BE5 		ldr	r3, [fp, #-32]
 3235 0410 B030D3E1 		ldrh	r3, [r3, #0]
 3236 0414 0300A0E1 		mov	r0, r3
 3237 0418 F8FEFFEB 		bl	celda_leer_valor
 3238 041c 0030A0E1 		mov	r3, r0
 3239 0420 16304BE5 		strb	r3, [fp, #-22]
  93:../sudoku_2024.c **** 
  94:../sudoku_2024.c **** 	if(version_propagar == 'A'){
 3240              		.loc 1 94 0
 3241 0424 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3242 0428 410053E3 		cmp	r3, #65
 3243 042c 0800001A 		bne	.L21
  95:../sudoku_2024.c **** 	    *celdas_vacias = sudoku_candidatos_propagar_arm(cuadricula, 0, 0, valor_inicial);
 3244              		.loc 1 95 0
 3245 0430 16305BE5 		ldrb	r3, [fp, #-22]	@ zero_extendqisi2
 3246 0434 20001BE5 		ldr	r0, [fp, #-32]
 3247 0438 0010A0E3 		mov	r1, #0
 3248 043c 0020A0E3 		mov	r2, #0
 3249 0440 FEFFFFEB 		bl	sudoku_candidatos_propagar_arm
 3250 0444 0020A0E1 		mov	r2, r0
 3251 0448 24301BE5 		ldr	r3, [fp, #-36]
 3252 044c 002083E5 		str	r2, [r3, #0]
 3253 0450 350000EA 		b	.L20
 3254              	.L21:
 3255              	.LBB5:
  96:../sudoku_2024.c **** 	 } else {
  97:../sudoku_2024.c **** 		int row=0;
 3256              		.loc 1 97 0
 3257 0454 0030A0E3 		mov	r3, #0
 3258 0458 10300BE5 		str	r3, [fp, #-16]
  98:../sudoku_2024.c **** 		while(row < NUM_FILAS){
 3259              		.loc 1 98 0
 3260 045c 2F0000EA 		b	.L23
 3261              	.L29:
 3262              	.LBB6:
  99:../sudoku_2024.c **** 			int col=0;
 3263              		.loc 1 99 0
 3264 0460 0030A0E3 		mov	r3, #0
 3265 0464 14300BE5 		str	r3, [fp, #-20]
 100:../sudoku_2024.c **** 			while(col < NUM_COLUMNAS - 7){
 3266              		.loc 1 100 0
 3267 0468 260000EA 		b	.L24
 3268              	.L28:
 3269              	.LBB7:
 101:../sudoku_2024.c **** 				uint8_t valor_actual = celda_leer_valor(cuadricula[row][col]);
 3270              		.loc 1 101 0
 3271 046c 10301BE5 		ldr	r3, [fp, #-16]
 3272 0470 8332A0E1 		mov	r3, r3, asl #5
 3273 0474 20201BE5 		ldr	r2, [fp, #-32]
 3274 0478 032082E0 		add	r2, r2, r3
 3275 047c 14301BE5 		ldr	r3, [fp, #-20]
 3276 0480 8330A0E1 		mov	r3, r3, asl #1
 3277 0484 033082E0 		add	r3, r2, r3
 3278 0488 B030D3E1 		ldrh	r3, [r3, #0]
 3279 048c 0300A0E1 		mov	r0, r3
 3280 0490 DAFEFFEB 		bl	celda_leer_valor
 3281 0494 0030A0E1 		mov	r3, r0
 3282 0498 17304BE5 		strb	r3, [fp, #-23]
 102:../sudoku_2024.c **** 				if(valor_actual == 0x0000){
 3283              		.loc 1 102 0
 3284 049c 17305BE5 		ldrb	r3, [fp, #-23]	@ zero_extendqisi2
 3285 04a0 000053E3 		cmp	r3, #0
 3286 04a4 0500001A 		bne	.L25
 103:../sudoku_2024.c **** 					(*celdas_vacias)++;
 3287              		.loc 1 103 0
 3288 04a8 24301BE5 		ldr	r3, [fp, #-36]
 3289 04ac 003093E5 		ldr	r3, [r3, #0]
 3290 04b0 012083E2 		add	r2, r3, #1
 3291 04b4 24301BE5 		ldr	r3, [fp, #-36]
 3292 04b8 002083E5 		str	r2, [r3, #0]
 3293 04bc 0E0000EA 		b	.L26
 3294              	.L25:
 104:../sudoku_2024.c **** 				} else {
 105:../sudoku_2024.c **** 					if(version_propagar == 'C'){
 3295              		.loc 1 105 0
 3296 04c0 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3297 04c4 430053E3 		cmp	r3, #67
 3298 04c8 0400001A 		bne	.L27
 106:../sudoku_2024.c **** 						sudoku_candidatos_propagar_c(cuadricula, row, col, valor_actual);
 3299              		.loc 1 106 0
 3300 04cc 17305BE5 		ldrb	r3, [fp, #-23]	@ zero_extendqisi2
 3301 04d0 20001BE5 		ldr	r0, [fp, #-32]
 3302 04d4 10101BE5 		ldr	r1, [fp, #-16]
 3303 04d8 14201BE5 		ldr	r2, [fp, #-20]
 3304 04dc FEFFFFEB 		bl	sudoku_candidatos_propagar_c
 3305              	.L27:
 107:../sudoku_2024.c **** 					}
 108:../sudoku_2024.c **** 					if(version_propagar == 'T'){
 3306              		.loc 1 108 0
 3307 04e0 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3308 04e4 540053E3 		cmp	r3, #84
 3309 04e8 0300001A 		bne	.L26
 109:../sudoku_2024.c **** 						sudoku_candidatos_propagar_thumb(cuadricula, 0, 0);
 3310              		.loc 1 109 0
 3311 04ec 20001BE5 		ldr	r0, [fp, #-32]
 3312 04f0 0010A0E3 		mov	r1, #0
 3313 04f4 0020A0E3 		mov	r2, #0
 3314 04f8 FEFFFFEB 		bl	sudoku_candidatos_propagar_thumb
 3315              	.L26:
 110:../sudoku_2024.c **** 					}
 111:../sudoku_2024.c **** 				}
 112:../sudoku_2024.c **** 				col++;
 3316              		.loc 1 112 0
 3317 04fc 14301BE5 		ldr	r3, [fp, #-20]
 3318 0500 013083E2 		add	r3, r3, #1
 3319 0504 14300BE5 		str	r3, [fp, #-20]
 3320              	.L24:
 3321              	.LBE7:
 100:../sudoku_2024.c **** 			while(col < NUM_COLUMNAS - 7){
 3322              		.loc 1 100 0 discriminator 1
 3323 0508 14301BE5 		ldr	r3, [fp, #-20]
 3324 050c 080053E3 		cmp	r3, #8
 3325 0510 D5FFFFDA 		ble	.L28
 113:../sudoku_2024.c **** 			}
 114:../sudoku_2024.c **** 			row++;
 3326              		.loc 1 114 0
 3327 0514 10301BE5 		ldr	r3, [fp, #-16]
 3328 0518 013083E2 		add	r3, r3, #1
 3329 051c 10300BE5 		str	r3, [fp, #-16]
 3330              	.L23:
 3331              	.LBE6:
  98:../sudoku_2024.c **** 		while(row < NUM_FILAS){
 3332              		.loc 1 98 0 discriminator 1
 3333 0520 10301BE5 		ldr	r3, [fp, #-16]
 3334 0524 080053E3 		cmp	r3, #8
 3335 0528 CCFFFFDA 		ble	.L29
 3336              	.L20:
 3337              	.LBE5:
 115:../sudoku_2024.c **** 		}
 116:../sudoku_2024.c **** 	}
 117:../sudoku_2024.c **** }
 3338              		.loc 1 117 0
 3339 052c 0CD04BE2 		sub	sp, fp, #12
 3340 0530 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3341 0534 1EFF2FE1 		bx	lr
 3342              		.cfi_endproc
 3343              	.LFE5:
 3345              		.align	2
 3347              	sudoku_candidatos_init_c:
 3348              	.LFB6:
 118:../sudoku_2024.c **** 
 119:../sudoku_2024.c **** /* *****************************************************************************
 120:../sudoku_2024.c ****  * calcula todas las listas de candidatos (9x9)
 121:../sudoku_2024.c ****  * necesario tras borrar o cambiar un valor (listas corrompidas)
 122:../sudoku_2024.c ****  * retorna el numero de celdas vacias */
 123:../sudoku_2024.c **** static int
 124:../sudoku_2024.c **** sudoku_candidatos_init_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS])
 125:../sudoku_2024.c **** {
 3349              		.loc 1 125 0
 3350              		.cfi_startproc
 3351              		@ Function supports interworking.
 3352              		@ args = 0, pretend = 0, frame = 16
 3353              		@ frame_needed = 1, uses_anonymous_args = 0
 3354 0538 0DC0A0E1 		mov	ip, sp
 3355              	.LCFI10:
 3356              		.cfi_def_cfa_register 12
 3357 053c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3358 0540 04B04CE2 		sub	fp, ip, #4
 3359              		.cfi_offset 14, -8
 3360              		.cfi_offset 13, -12
 3361              		.cfi_offset 11, -16
 3362              	.LCFI11:
 3363              		.cfi_def_cfa 11, 4
 3364 0544 10D04DE2 		sub	sp, sp, #16
 3365 0548 18000BE5 		str	r0, [fp, #-24]
 126:../sudoku_2024.c **** 
 127:../sudoku_2024.c ****  	int celdas_vacias = 0;
 3366              		.loc 1 127 0
 3367 054c 0030A0E3 		mov	r3, #0
 3368 0550 10300BE5 		str	r3, [fp, #-16]
 128:../sudoku_2024.c **** 
 129:../sudoku_2024.c ****     init_candidatos(cuadricula);
 3369              		.loc 1 129 0
 3370 0554 18001BE5 		ldr	r0, [fp, #-24]
 3371 0558 FEFFFFEB 		bl	init_candidatos
 130:../sudoku_2024.c **** 
 131:../sudoku_2024.c ****     propagar_if_value(cuadricula, &celdas_vacias);
 3372              		.loc 1 131 0
 3373 055c 10304BE2 		sub	r3, fp, #16
 3374 0560 18001BE5 		ldr	r0, [fp, #-24]
 3375 0564 0310A0E1 		mov	r1, r3
 3376 0568 FEFFFFEB 		bl	propagar_if_value
 132:../sudoku_2024.c **** 
 133:../sudoku_2024.c ****     return celdas_vacias;
 3377              		.loc 1 133 0
 3378 056c 10301BE5 		ldr	r3, [fp, #-16]
 134:../sudoku_2024.c **** }
 3379              		.loc 1 134 0
 3380 0570 0300A0E1 		mov	r0, r3
 3381 0574 0CD04BE2 		sub	sp, fp, #12
 3382 0578 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3383 057c 1EFF2FE1 		bx	lr
 3384              		.cfi_endproc
 3385              	.LFE6:
 3387              		.align	2
 3389              	cuadricula_candidatos_verificar:
 3390              	.LFB7:
 135:../sudoku_2024.c **** 
 136:../sudoku_2024.c **** static void
 137:../sudoku_2024.c **** cuadricula_candidatos_verificar(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS],int row, int col, int *er
 3391              		.loc 1 137 0
 3392              		.cfi_startproc
 3393              		@ Function supports interworking.
 3394              		@ args = 0, pretend = 0, frame = 56
 3395              		@ frame_needed = 1, uses_anonymous_args = 0
 3396 0580 0DC0A0E1 		mov	ip, sp
 3397              	.LCFI12:
 3398              		.cfi_def_cfa_register 12
 3399 0584 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3400 0588 04B04CE2 		sub	fp, ip, #4
 3401              		.cfi_offset 14, -8
 3402              		.cfi_offset 13, -12
 3403              		.cfi_offset 11, -16
 3404              	.LCFI13:
 3405              		.cfi_def_cfa 11, 4
 3406 058c 38D04DE2 		sub	sp, sp, #56
 3407 0590 38000BE5 		str	r0, [fp, #-56]
 3408 0594 3C100BE5 		str	r1, [fp, #-60]
 3409 0598 40200BE5 		str	r2, [fp, #-64]
 3410 059c 44300BE5 		str	r3, [fp, #-68]
 138:../sudoku_2024.c **** 
 139:../sudoku_2024.c **** 	uint8_t valor = celda_leer_valor(cuadricula[row][col]);
 3411              		.loc 1 139 0
 3412 05a0 3C301BE5 		ldr	r3, [fp, #-60]
 3413 05a4 8332A0E1 		mov	r3, r3, asl #5
 3414 05a8 38201BE5 		ldr	r2, [fp, #-56]
 3415 05ac 032082E0 		add	r2, r2, r3
 3416 05b0 40301BE5 		ldr	r3, [fp, #-64]
 3417 05b4 8330A0E1 		mov	r3, r3, asl #1
 3418 05b8 033082E0 		add	r3, r2, r3
 3419 05bc B030D3E1 		ldrh	r3, [r3, #0]
 3420 05c0 0300A0E1 		mov	r0, r3
 3421 05c4 8DFEFFEB 		bl	celda_leer_valor
 3422 05c8 0030A0E1 		mov	r3, r0
 3423 05cc 19304BE5 		strb	r3, [fp, #-25]
 140:../sudoku_2024.c **** 
 141:../sudoku_2024.c **** 	/* Si el valor es distinto de 0, revisa que se haya propagado correctamente (el candidato correspo
 142:../sudoku_2024.c **** 	if(valor != 0x0000){
 3424              		.loc 1 142 0
 3425 05d0 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 3426 05d4 000053E3 		cmp	r3, #0
 3427 05d8 A200000A 		beq	.L31
 3428              	.LBB8:
 143:../sudoku_2024.c **** 		int displace = 3 + (int)valor;
 3429              		.loc 1 143 0
 3430 05dc 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 3431 05e0 033083E2 		add	r3, r3, #3
 3432 05e4 20300BE5 		str	r3, [fp, #-32]
 144:../sudoku_2024.c **** 
 145:../sudoku_2024.c **** 		/* Verificar el valor en todas las columnas (Horizontal) */
 146:../sudoku_2024.c **** 		int j = 0;
 3433              		.loc 1 146 0
 3434 05e8 0030A0E3 		mov	r3, #0
 3435 05ec 10300BE5 		str	r3, [fp, #-16]
 147:../sudoku_2024.c **** 		while(j < NUM_COLUMNAS - 7){
 3436              		.loc 1 147 0
 3437 05f0 240000EA 		b	.L33
 3438              	.L35:
 3439              	.LBB9:
 148:../sudoku_2024.c **** 			uint8_t is_bit_set = cuadricula[row][j] & (1 << displace);
 3440              		.loc 1 148 0
 3441 05f4 3C301BE5 		ldr	r3, [fp, #-60]
 3442 05f8 8332A0E1 		mov	r3, r3, asl #5
 3443 05fc 38201BE5 		ldr	r2, [fp, #-56]
 3444 0600 032082E0 		add	r2, r2, r3
 3445 0604 10301BE5 		ldr	r3, [fp, #-16]
 3446 0608 8330A0E1 		mov	r3, r3, asl #1
 3447 060c 033082E0 		add	r3, r2, r3
 3448 0610 B030D3E1 		ldrh	r3, [r3, #0]
 3449 0614 FF2003E2 		and	r2, r3, #255
 3450 0618 0110A0E3 		mov	r1, #1
 3451 061c 20301BE5 		ldr	r3, [fp, #-32]
 3452 0620 1133A0E1 		mov	r3, r1, asl r3
 3453 0624 FF3003E2 		and	r3, r3, #255
 3454 0628 033002E0 		and	r3, r2, r3
 3455 062c FF3003E2 		and	r3, r3, #255
 3456 0630 21304BE5 		strb	r3, [fp, #-33]
 149:../sudoku_2024.c **** 			if(is_bit_set){
 3457              		.loc 1 149 0
 3458 0634 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 3459 0638 000053E3 		cmp	r3, #0
 3460 063c 0E00000A 		beq	.L34
 150:../sudoku_2024.c **** 				activar_error(cuadricula[row][j]);
 3461              		.loc 1 150 0
 3462 0640 3C301BE5 		ldr	r3, [fp, #-60]
 3463 0644 8332A0E1 		mov	r3, r3, asl #5
 3464 0648 38201BE5 		ldr	r2, [fp, #-56]
 3465 064c 032082E0 		add	r2, r2, r3
 3466 0650 10301BE5 		ldr	r3, [fp, #-16]
 3467 0654 8330A0E1 		mov	r3, r3, asl #1
 3468 0658 033082E0 		add	r3, r2, r3
 3469 065c B030D3E1 		ldrh	r3, [r3, #0]
 3470 0660 0300A0E1 		mov	r0, r3
 3471 0664 73FEFFEB 		bl	activar_error
 151:../sudoku_2024.c **** 				(*errors)++;
 3472              		.loc 1 151 0
 3473 0668 44301BE5 		ldr	r3, [fp, #-68]
 3474 066c 003093E5 		ldr	r3, [r3, #0]
 3475 0670 012083E2 		add	r2, r3, #1
 3476 0674 44301BE5 		ldr	r3, [fp, #-68]
 3477 0678 002083E5 		str	r2, [r3, #0]
 3478              	.L34:
 152:../sudoku_2024.c **** 			}
 153:../sudoku_2024.c **** 			j++;
 3479              		.loc 1 153 0
 3480 067c 10301BE5 		ldr	r3, [fp, #-16]
 3481 0680 013083E2 		add	r3, r3, #1
 3482 0684 10300BE5 		str	r3, [fp, #-16]
 3483              	.L33:
 3484              	.LBE9:
 147:../sudoku_2024.c **** 		while(j < NUM_COLUMNAS - 7){
 3485              		.loc 1 147 0 discriminator 1
 3486 0688 10301BE5 		ldr	r3, [fp, #-16]
 3487 068c 080053E3 		cmp	r3, #8
 3488 0690 D7FFFFDA 		ble	.L35
 154:../sudoku_2024.c **** 		}
 155:../sudoku_2024.c **** 
 156:../sudoku_2024.c **** 		/* Verificar el valor en todas las filas (Vertical) */
 157:../sudoku_2024.c **** 		int i = 0;
 3489              		.loc 1 157 0
 3490 0694 0030A0E3 		mov	r3, #0
 3491 0698 14300BE5 		str	r3, [fp, #-20]
 158:../sudoku_2024.c **** 		while(i < NUM_FILAS){
 3492              		.loc 1 158 0
 3493 069c 240000EA 		b	.L36
 3494              	.L38:
 3495              	.LBB10:
 159:../sudoku_2024.c **** 			uint8_t is_bit_set = cuadricula[i][col] & (1 << displace);
 3496              		.loc 1 159 0
 3497 06a0 14301BE5 		ldr	r3, [fp, #-20]
 3498 06a4 8332A0E1 		mov	r3, r3, asl #5
 3499 06a8 38201BE5 		ldr	r2, [fp, #-56]
 3500 06ac 032082E0 		add	r2, r2, r3
 3501 06b0 40301BE5 		ldr	r3, [fp, #-64]
 3502 06b4 8330A0E1 		mov	r3, r3, asl #1
 3503 06b8 033082E0 		add	r3, r2, r3
 3504 06bc B030D3E1 		ldrh	r3, [r3, #0]
 3505 06c0 FF2003E2 		and	r2, r3, #255
 3506 06c4 0110A0E3 		mov	r1, #1
 3507 06c8 20301BE5 		ldr	r3, [fp, #-32]
 3508 06cc 1133A0E1 		mov	r3, r1, asl r3
 3509 06d0 FF3003E2 		and	r3, r3, #255
 3510 06d4 033002E0 		and	r3, r2, r3
 3511 06d8 FF3003E2 		and	r3, r3, #255
 3512 06dc 22304BE5 		strb	r3, [fp, #-34]
 160:../sudoku_2024.c **** 			if(is_bit_set){
 3513              		.loc 1 160 0
 3514 06e0 22305BE5 		ldrb	r3, [fp, #-34]	@ zero_extendqisi2
 3515 06e4 000053E3 		cmp	r3, #0
 3516 06e8 0E00000A 		beq	.L37
 161:../sudoku_2024.c **** 				activar_error(cuadricula[i][col]);
 3517              		.loc 1 161 0
 3518 06ec 14301BE5 		ldr	r3, [fp, #-20]
 3519 06f0 8332A0E1 		mov	r3, r3, asl #5
 3520 06f4 38201BE5 		ldr	r2, [fp, #-56]
 3521 06f8 032082E0 		add	r2, r2, r3
 3522 06fc 40301BE5 		ldr	r3, [fp, #-64]
 3523 0700 8330A0E1 		mov	r3, r3, asl #1
 3524 0704 033082E0 		add	r3, r2, r3
 3525 0708 B030D3E1 		ldrh	r3, [r3, #0]
 3526 070c 0300A0E1 		mov	r0, r3
 3527 0710 48FEFFEB 		bl	activar_error
 162:../sudoku_2024.c **** 				(*errors)++;
 3528              		.loc 1 162 0
 3529 0714 44301BE5 		ldr	r3, [fp, #-68]
 3530 0718 003093E5 		ldr	r3, [r3, #0]
 3531 071c 012083E2 		add	r2, r3, #1
 3532 0720 44301BE5 		ldr	r3, [fp, #-68]
 3533 0724 002083E5 		str	r2, [r3, #0]
 3534              	.L37:
 163:../sudoku_2024.c **** 			}
 164:../sudoku_2024.c **** 			i++;
 3535              		.loc 1 164 0
 3536 0728 14301BE5 		ldr	r3, [fp, #-20]
 3537 072c 013083E2 		add	r3, r3, #1
 3538 0730 14300BE5 		str	r3, [fp, #-20]
 3539              	.L36:
 3540              	.LBE10:
 158:../sudoku_2024.c **** 		while(i < NUM_FILAS){
 3541              		.loc 1 158 0 discriminator 1
 3542 0734 14301BE5 		ldr	r3, [fp, #-20]
 3543 0738 080053E3 		cmp	r3, #8
 3544 073c D7FFFFDA 		ble	.L38
 165:../sudoku_2024.c **** 		}
 166:../sudoku_2024.c **** 
 167:../sudoku_2024.c **** 		/* Calcular la posicion inicial para seccion correspondiente a la ubicacion actual */
 168:../sudoku_2024.c **** 		int row_start = (row / 3) * 3;
 3545              		.loc 1 168 0
 3546 0740 3C301BE5 		ldr	r3, [fp, #-60]
 3547 0744 28219FE5 		ldr	r2, .L44
 3548 0748 9312C2E0 		smull	r1, r2, r3, r2
 3549 074c C33FA0E1 		mov	r3, r3, asr #31
 3550 0750 022063E0 		rsb	r2, r3, r2
 3551 0754 0230A0E1 		mov	r3, r2
 3552 0758 8330A0E1 		mov	r3, r3, asl #1
 3553 075c 023083E0 		add	r3, r3, r2
 3554 0760 28300BE5 		str	r3, [fp, #-40]
 169:../sudoku_2024.c **** 		int col_start = (col / 3) * 3;
 3555              		.loc 1 169 0
 3556 0764 40301BE5 		ldr	r3, [fp, #-64]
 3557 0768 04219FE5 		ldr	r2, .L44
 3558 076c 9312C2E0 		smull	r1, r2, r3, r2
 3559 0770 C33FA0E1 		mov	r3, r3, asr #31
 3560 0774 022063E0 		rsb	r2, r3, r2
 3561 0778 0230A0E1 		mov	r3, r2
 3562 077c 8330A0E1 		mov	r3, r3, asl #1
 3563 0780 023083E0 		add	r3, r3, r2
 3564 0784 2C300BE5 		str	r3, [fp, #-44]
 170:../sudoku_2024.c **** 
 171:../sudoku_2024.c **** 		/* Verificar valor en la seccion (cuadro 3x3) */
 172:../sudoku_2024.c **** 		i = row_start;
 3565              		.loc 1 172 0
 3566 0788 28301BE5 		ldr	r3, [fp, #-40]
 3567 078c 14300BE5 		str	r3, [fp, #-20]
 173:../sudoku_2024.c **** 		while(i < (row_start + 3)){
 3568              		.loc 1 173 0
 3569 0790 2F0000EA 		b	.L39
 3570              	.L43:
 3571              	.LBB11:
 174:../sudoku_2024.c **** 			int j = col_start;
 3572              		.loc 1 174 0
 3573 0794 2C301BE5 		ldr	r3, [fp, #-44]
 3574 0798 18300BE5 		str	r3, [fp, #-24]
 175:../sudoku_2024.c **** 			while(j < (col_start + 3)){
 3575              		.loc 1 175 0
 3576 079c 240000EA 		b	.L40
 3577              	.L42:
 3578              	.LBB12:
 176:../sudoku_2024.c **** 				uint8_t is_bit_set = cuadricula[i][j] & (1 << displace);
 3579              		.loc 1 176 0
 3580 07a0 14301BE5 		ldr	r3, [fp, #-20]
 3581 07a4 8332A0E1 		mov	r3, r3, asl #5
 3582 07a8 38201BE5 		ldr	r2, [fp, #-56]
 3583 07ac 032082E0 		add	r2, r2, r3
 3584 07b0 18301BE5 		ldr	r3, [fp, #-24]
 3585 07b4 8330A0E1 		mov	r3, r3, asl #1
 3586 07b8 033082E0 		add	r3, r2, r3
 3587 07bc B030D3E1 		ldrh	r3, [r3, #0]
 3588 07c0 FF2003E2 		and	r2, r3, #255
 3589 07c4 0110A0E3 		mov	r1, #1
 3590 07c8 20301BE5 		ldr	r3, [fp, #-32]
 3591 07cc 1133A0E1 		mov	r3, r1, asl r3
 3592 07d0 FF3003E2 		and	r3, r3, #255
 3593 07d4 033002E0 		and	r3, r2, r3
 3594 07d8 FF3003E2 		and	r3, r3, #255
 3595 07dc 2D304BE5 		strb	r3, [fp, #-45]
 177:../sudoku_2024.c **** 				if(is_bit_set){
 3596              		.loc 1 177 0
 3597 07e0 2D305BE5 		ldrb	r3, [fp, #-45]	@ zero_extendqisi2
 3598 07e4 000053E3 		cmp	r3, #0
 3599 07e8 0E00000A 		beq	.L41
 178:../sudoku_2024.c **** 					activar_error(cuadricula[i][j]);
 3600              		.loc 1 178 0
 3601 07ec 14301BE5 		ldr	r3, [fp, #-20]
 3602 07f0 8332A0E1 		mov	r3, r3, asl #5
 3603 07f4 38201BE5 		ldr	r2, [fp, #-56]
 3604 07f8 032082E0 		add	r2, r2, r3
 3605 07fc 18301BE5 		ldr	r3, [fp, #-24]
 3606 0800 8330A0E1 		mov	r3, r3, asl #1
 3607 0804 033082E0 		add	r3, r2, r3
 3608 0808 B030D3E1 		ldrh	r3, [r3, #0]
 3609 080c 0300A0E1 		mov	r0, r3
 3610 0810 08FEFFEB 		bl	activar_error
 179:../sudoku_2024.c **** 					(*errors)++;
 3611              		.loc 1 179 0
 3612 0814 44301BE5 		ldr	r3, [fp, #-68]
 3613 0818 003093E5 		ldr	r3, [r3, #0]
 3614 081c 012083E2 		add	r2, r3, #1
 3615 0820 44301BE5 		ldr	r3, [fp, #-68]
 3616 0824 002083E5 		str	r2, [r3, #0]
 3617              	.L41:
 180:../sudoku_2024.c **** 				}
 181:../sudoku_2024.c **** 				j++;
 3618              		.loc 1 181 0
 3619 0828 18301BE5 		ldr	r3, [fp, #-24]
 3620 082c 013083E2 		add	r3, r3, #1
 3621 0830 18300BE5 		str	r3, [fp, #-24]
 3622              	.L40:
 3623              	.LBE12:
 175:../sudoku_2024.c **** 			while(j < (col_start + 3)){
 3624              		.loc 1 175 0 discriminator 1
 3625 0834 2C301BE5 		ldr	r3, [fp, #-44]
 3626 0838 032083E2 		add	r2, r3, #3
 3627 083c 18301BE5 		ldr	r3, [fp, #-24]
 3628 0840 030052E1 		cmp	r2, r3
 3629 0844 D5FFFFCA 		bgt	.L42
 182:../sudoku_2024.c **** 			}
 183:../sudoku_2024.c **** 			i++;
 3630              		.loc 1 183 0
 3631 0848 14301BE5 		ldr	r3, [fp, #-20]
 3632 084c 013083E2 		add	r3, r3, #1
 3633 0850 14300BE5 		str	r3, [fp, #-20]
 3634              	.L39:
 3635              	.LBE11:
 173:../sudoku_2024.c **** 		while(i < (row_start + 3)){
 3636              		.loc 1 173 0 discriminator 1
 3637 0854 28301BE5 		ldr	r3, [fp, #-40]
 3638 0858 032083E2 		add	r2, r3, #3
 3639 085c 14301BE5 		ldr	r3, [fp, #-20]
 3640 0860 030052E1 		cmp	r2, r3
 3641 0864 CAFFFFCA 		bgt	.L43
 3642              	.L31:
 3643              	.LBE8:
 184:../sudoku_2024.c **** 		}
 185:../sudoku_2024.c **** 	}
 186:../sudoku_2024.c **** }
 3644              		.loc 1 186 0
 3645 0868 0CD04BE2 		sub	sp, fp, #12
 3646 086c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3647 0870 1EFF2FE1 		bx	lr
 3648              	.L45:
 3649              		.align	2
 3650              	.L44:
 3651 0874 56555555 		.word	1431655766
 3652              		.cfi_endproc
 3653              	.LFE7:
 3655              		.align	2
 3657              	verificar_lista_calculada:
 3658              	.LFB8:
 187:../sudoku_2024.c **** 
 188:../sudoku_2024.c **** /* Recorre la cuadricula y para cada celda llama a cuadricula_candidatos_verificar */
 189:../sudoku_2024.c **** static void
 190:../sudoku_2024.c **** verificar_lista_calculada(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS]){
 3659              		.loc 1 190 0
 3660              		.cfi_startproc
 3661              		@ Function supports interworking.
 3662              		@ args = 0, pretend = 0, frame = 24
 3663              		@ frame_needed = 1, uses_anonymous_args = 0
 3664 0878 0DC0A0E1 		mov	ip, sp
 3665              	.LCFI14:
 3666              		.cfi_def_cfa_register 12
 3667 087c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3668 0880 04B04CE2 		sub	fp, ip, #4
 3669              		.cfi_offset 14, -8
 3670              		.cfi_offset 13, -12
 3671              		.cfi_offset 11, -16
 3672              	.LCFI15:
 3673              		.cfi_def_cfa 11, 4
 3674 0884 18D04DE2 		sub	sp, sp, #24
 3675 0888 20000BE5 		str	r0, [fp, #-32]
 191:../sudoku_2024.c **** 	int errors = 0;
 3676              		.loc 1 191 0
 3677 088c 0030A0E3 		mov	r3, #0
 3678 0890 18300BE5 		str	r3, [fp, #-24]
 192:../sudoku_2024.c **** 	    int row = 0;
 3679              		.loc 1 192 0
 3680 0894 0030A0E3 		mov	r3, #0
 3681 0898 10300BE5 		str	r3, [fp, #-16]
 193:../sudoku_2024.c **** 	    while(row < NUM_FILAS){
 3682              		.loc 1 193 0
 3683 089c 100000EA 		b	.L47
 3684              	.L50:
 3685              	.LBB13:
 194:../sudoku_2024.c **** 			int col = 0;
 3686              		.loc 1 194 0
 3687 08a0 0030A0E3 		mov	r3, #0
 3688 08a4 14300BE5 		str	r3, [fp, #-20]
 195:../sudoku_2024.c **** 	    	while(col < NUM_COLUMNAS - 7){
 3689              		.loc 1 195 0
 3690 08a8 070000EA 		b	.L48
 3691              	.L49:
 196:../sudoku_2024.c **** 	    		cuadricula_candidatos_verificar(cuadricula, row, col, &errors);
 3692              		.loc 1 196 0
 3693 08ac 18304BE2 		sub	r3, fp, #24
 3694 08b0 20001BE5 		ldr	r0, [fp, #-32]
 3695 08b4 10101BE5 		ldr	r1, [fp, #-16]
 3696 08b8 14201BE5 		ldr	r2, [fp, #-20]
 3697 08bc 2FFFFFEB 		bl	cuadricula_candidatos_verificar
 197:../sudoku_2024.c **** 	    		col++;
 3698              		.loc 1 197 0
 3699 08c0 14301BE5 		ldr	r3, [fp, #-20]
 3700 08c4 013083E2 		add	r3, r3, #1
 3701 08c8 14300BE5 		str	r3, [fp, #-20]
 3702              	.L48:
 195:../sudoku_2024.c **** 	    	while(col < NUM_COLUMNAS - 7){
 3703              		.loc 1 195 0 discriminator 1
 3704 08cc 14301BE5 		ldr	r3, [fp, #-20]
 3705 08d0 080053E3 		cmp	r3, #8
 3706 08d4 F4FFFFDA 		ble	.L49
 198:../sudoku_2024.c **** 	    	}
 199:../sudoku_2024.c **** 	    	row++;
 3707              		.loc 1 199 0
 3708 08d8 10301BE5 		ldr	r3, [fp, #-16]
 3709 08dc 013083E2 		add	r3, r3, #1
 3710 08e0 10300BE5 		str	r3, [fp, #-16]
 3711              	.L47:
 3712              	.LBE13:
 193:../sudoku_2024.c **** 	    while(row < NUM_FILAS){
 3713              		.loc 1 193 0 discriminator 1
 3714 08e4 10301BE5 		ldr	r3, [fp, #-16]
 3715 08e8 080053E3 		cmp	r3, #8
 3716 08ec EBFFFFDA 		ble	.L50
 200:../sudoku_2024.c **** 	    }
 201:../sudoku_2024.c **** }
 3717              		.loc 1 201 0
 3718 08f0 0CD04BE2 		sub	sp, fp, #12
 3719 08f4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3720 08f8 1EFF2FE1 		bx	lr
 3721              		.cfi_endproc
 3722              	.LFE8:
 3724              		.align	2
 3725              		.global	sudoku9x9
 3727              	sudoku9x9:
 3728              	.LFB9:
 202:../sudoku_2024.c **** 
 203:../sudoku_2024.c **** /* *****************************************************************************
 204:../sudoku_2024.c ****  * Funciones publicas
 205:../sudoku_2024.c ****  * (pueden ser invocadas desde otro fichero) */
 206:../sudoku_2024.c **** 
 207:../sudoku_2024.c **** /* *******************************************cuadricula[NUM_FILAS][NUM_COLUMNAS]******************
 208:../sudoku_2024.c ****  * programa principal del juego que recibe el tablero,
 209:../sudoku_2024.c ****  * y la senyal de ready que indica que se han actualizado fila y columna */
 210:../sudoku_2024.c **** void
 211:../sudoku_2024.c **** sudoku9x9(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], char *ready)
 212:../sudoku_2024.c **** {
 3729              		.loc 1 212 0
 3730              		.cfi_startproc
 3731              		@ Function supports interworking.
 3732              		@ args = 0, pretend = 0, frame = 16
 3733              		@ frame_needed = 1, uses_anonymous_args = 0
 3734 08fc 0DC0A0E1 		mov	ip, sp
 3735              	.LCFI16:
 3736              		.cfi_def_cfa_register 12
 3737 0900 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3738 0904 04B04CE2 		sub	fp, ip, #4
 3739              		.cfi_offset 14, -8
 3740              		.cfi_offset 13, -12
 3741              		.cfi_offset 11, -16
 3742              	.LCFI17:
 3743              		.cfi_def_cfa 11, 4
 3744 0908 10D04DE2 		sub	sp, sp, #16
 3745 090c 18000BE5 		str	r0, [fp, #-24]
 3746 0910 1C100BE5 		str	r1, [fp, #-28]
 213:../sudoku_2024.c ****     int celdas_vacias;
 214:../sudoku_2024.c ****     char version_init = 'C';
 3747              		.loc 1 214 0
 3748 0914 4330A0E3 		mov	r3, #67
 3749 0918 0D304BE5 		strb	r3, [fp, #-13]
 215:../sudoku_2024.c **** 
 216:../sudoku_2024.c ****     // Dos configuraciones para *init*
 217:../sudoku_2024.c ****     if(version_init == 'C'){
 3750              		.loc 1 217 0
 3751 091c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3752 0920 430053E3 		cmp	r3, #67
 3753 0924 0200001A 		bne	.L52
 218:../sudoku_2024.c ****     	celdas_vacias = sudoku_candidatos_init_c(cuadricula);
 3754              		.loc 1 218 0
 3755 0928 18001BE5 		ldr	r0, [fp, #-24]
 3756 092c 01FFFFEB 		bl	sudoku_candidatos_init_c
 3757 0930 14000BE5 		str	r0, [fp, #-20]
 3758              	.L52:
 219:../sudoku_2024.c ****     }
 220:../sudoku_2024.c ****     if(version_init == 'A'){
 3759              		.loc 1 220 0
 3760 0934 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3761 0938 410053E3 		cmp	r3, #65
 3762 093c 0200001A 		bne	.L53
 221:../sudoku_2024.c ****     	celdas_vacias = sudoku_candidatos_init_arm(cuadricula);
 3763              		.loc 1 221 0
 3764 0940 18001BE5 		ldr	r0, [fp, #-24]
 3765 0944 FEFFFFEB 		bl	sudoku_candidatos_init_arm
 3766 0948 14000BE5 		str	r0, [fp, #-20]
 3767              	.L53:
 222:../sudoku_2024.c ****     }
 223:../sudoku_2024.c **** 
 224:../sudoku_2024.c ****     /* verificar que la lista de candidatos calculada es correcta */
 225:../sudoku_2024.c ****     verificar_lista_calculada(cuadricula);
 3768              		.loc 1 225 0
 3769 094c 18001BE5 		ldr	r0, [fp, #-24]
 3770 0950 C8FFFFEB 		bl	verificar_lista_calculada
 226:../sudoku_2024.c ****     /* repetir para otras versiones (C optimizado, ARM, THUMB) */
 227:../sudoku_2024.c **** }
 3771              		.loc 1 227 0
 3772 0954 0CD04BE2 		sub	sp, fp, #12
 3773 0958 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3774 095c 1EFF2FE1 		bx	lr
 3775              		.cfi_endproc
 3776              	.LFE9:
 3778              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 sudoku_2024.c
C:\Users\Jorge\AppData\Local\Temp\ccBFFGES.s:2817   .text:00000000 $a
C:\Users\Jorge\AppData\Local\Temp\ccBFFGES.s:2819   .text:00000000 celda_leer_valor
C:\Users\Jorge\AppData\Local\Temp\ccBFFGES.s:2854   .text:00000038 activar_error
C:\Users\Jorge\AppData\Local\Temp\ccBFFGES.s:2888   .text:00000068 sudoku_candidatos_propagar_c
C:\Users\Jorge\AppData\Local\Temp\ccBFFGES.s:3103   .text:000002fc $d
C:\Users\Jorge\AppData\Local\Temp\ccBFFGES.s:3107   .text:00000300 $a
C:\Users\Jorge\AppData\Local\Temp\ccBFFGES.s:3110   .text:00000300 init_candidatos
C:\Users\Jorge\AppData\Local\Temp\ccBFFGES.s:3210   .text:000003ec propagar_if_value
C:\Users\Jorge\AppData\Local\Temp\ccBFFGES.s:3347   .text:00000538 sudoku_candidatos_init_c
C:\Users\Jorge\AppData\Local\Temp\ccBFFGES.s:3389   .text:00000580 cuadricula_candidatos_verificar
C:\Users\Jorge\AppData\Local\Temp\ccBFFGES.s:3651   .text:00000874 $d
C:\Users\Jorge\AppData\Local\Temp\ccBFFGES.s:3655   .text:00000878 $a
C:\Users\Jorge\AppData\Local\Temp\ccBFFGES.s:3657   .text:00000878 verificar_lista_calculada
C:\Users\Jorge\AppData\Local\Temp\ccBFFGES.s:3727   .text:000008fc sudoku9x9
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
sudoku_candidatos_propagar_arm
sudoku_candidatos_propagar_thumb
sudoku_candidatos_init_arm
