   1              	# 1 "../init_b.asm"
   1              	.text
   0              	
   0              	
   0              	
   2              	
   3              	#        ENTRY                  /*  mark the first instruction to call */
   4              	.global start
   5              	.global sudoku_candidatos_propagar_arm
   6              	.global sudoku_candidatos_init_arm
   7              	
   8              	################################################################################
   9              	.arm
  10              	sudoku_candidatos_init_arm:
  11 0000 00582DE9 		push {r11, r12, lr}
  12              	    @ r0 = cuadricula
  13              	    @ r1 = fila
  14              	    @ r2 = columna
  15              	    @ r3 = valor actual
  16              	    @ r4 = desplazamiento fila
  17              	    @ r5 = desplazamiento columna
  18              	    @ r6 = 0x1FF0 lista de candidatos
  19              	    @ r7 = desplazamiento total
  20              	
  21 0004 0010A0E3 	    mov r1, #0
  22 0008 1F6CA0E3 	    mov r6, #0x1F00               	@ Cargar parte alta de (0x1F00)
  23 000c F06086E3 	    orr r6, r6, #0x00F0           	@ Combinar parte baja (0x00F0) para obtener 0x1FF0
  24              	
  25              	init_fila:
  26 0010 090051E3 	    cmp r1, #9
  27 0014 0F0000AA 	    bge fin_init_fila
  28              	
  29 0018 8142A0E1 	    lsl r4, r1, #5					@ Desplazamiento a siguiente fila (r1 * 32 bytes)
  30              	
  31 001c 0020A0E3 	    mov r2, #0
  32              	init_columna:
  33 0020 090052E3 	    cmp r2, #9
  34 0024 090000AA 	    bge fin_init_columna
  35              	
  36 0028 8250A0E1 	    lsl r5, r2, #1					@ Desplazamiento a siguiente columna (r2 * 2 bytes)
  37              	
  38 002c 057084E0 	    add r7, r4, r5        			@ Desplazamiento total (fila + columna)
  39              	
  40 0030 B73090E1 	    ldrh r3, [r0, r7]
  41              	
  42 0034 028903E2 	   	and r8, r3, #0x8000				@ Objeter valor de la pista
  43 0038 020958E3 		cmp r8, #0x8000					@ Si pista == 1 se omite la inicializacion de candidatos
  44 003c 010000AA 	    bge skip_init
  45              	
  46 0040 063083E1 	    orr r3, r3, r6        			@ celda |= 0x1FF0 - Activar todos los candidatos
  47 0044 B73080E1 	    strh r3, [r0, r7]
  48              	
  49              	skip_init:
  50 0048 012082E2 	    add r2, r2, #1
  51 004c F3FFFFEA 	    b init_columna
  52              	
  53              	fin_init_columna:
  54 0050 011081E2 	    add r1, r1, #1
  55 0054 EDFFFFEA 	    b init_fila
  56              	
  57              	fin_init_fila:
  58 0058 0010A0E3 		mov r1, #0
  59 005c 0020A0E3 		mov r2, #0
  60              	
  61 0060 FEFFFFEB 		bl sudoku_candidatos_propagar_arm
  62 0064 FFFFFFEA 		b fin_init
  63              	fin_init:
  64 0068 0058BDE8 		pop {r11, r12, lr}
  65 006c 1EFF2FE1 	    bx lr
  66              	
  67              	
  68              	@ Recorre la cuadricula llamando a las funciones de propagacion (fila, columna y region) SI la celd
  69              	sudoku_candidatos_propagar_arm:
  70 0070 21582DE9 		push {r0, r5, r11, r12, lr}
  71              		@ r0 = cuadricula
  72              		@ r1 = indice fila
  73              		@ r2 = indice columna
  74              		@ r3 = valor actual celda
  75              		@ r4 = desplazamiento de la fila
  76              		@ r5 = desplazamiento de la columna
  77              		@ r6 = bit desplazado (se usara para desactivar los candidatos)
  78              		@ r7 = desplazamiento total (r4 + r5)
  79              		@ r10 = contador de celdas vacias
  80              		@ r8-r12 = registros de trabajo
  81 0074 00A0A0E3 		mov r10, #0
  82              	loop_i:
  83 0078 090051E3 		cmp r1, #9
  84 007c 190000AA 		bge loop_i_end
  85              	
  86 0080 8142A0E1 		lsl r4, r1, #5						@ Desplazamiento a siguiente fila (r1 * 32 bytes)
  87              	
  88 0084 0020A0E3 		mov r2, #0
  89              	loop_j:
  90 0088 090052E3 		cmp r2, #9
  91 008c 130000AA 		bge loop_j_end						@ Comprobar si se ha llegado a la ultima columna
  92              	
  93 0090 8250A0E1 		lsl r5, r2, #1						@ Desplazamiento a siguiente columna (r2 * 2 bytes)
  94              	
  95 0094 057084E0 		add r7, r4, r5						@ Desplazamiento total (fila + columna)
  96 0098 B73090E1 		ldrh r3, [r0, r7]
  97              	
  98 009c 0F3003E2 		and r3, r3, #0xF					@ Objeter valor actual de la celda (celda_leer_valor)
  99 00a0 000053E3 		cmp r3, #0							@ Si valor == 0 se aumentan las celdas vacias y se omite la propagacion
 100 00a4 0900000A 		beq empty_cell
 101              	
 102 00a8 038083E2 		add r8, r3, #3						@ r8 = displace = (3 + r3)
 103 00ac 0160A0E3 		mov r6, #1
 104 00b0 1668A0E1 		lsl r6, r6, r8						@ desplazar bit a la izquierda r8 posiciones
 105              	
 106 00b4 06442DE9 		push {r1, r2, r10, lr}				@ Backup de indices de fila y columna, y el contador de celdas vacias
 107              	
 108 00b8 0D0000EB 		bl arm_update_row_candidates		@ Actualizar filas
 109              	
 110 00bc 170000EB 		bl arm_update_column_candidates		@ Actualizar columnas
 111              	
 112 00c0 210000EB 		bl arm_calc_region_indexes				@ Calcular indices de la region
 113 00c4 330000EB 		bl arm_update_region_candidates		@ Actualizar region
 114 00c8 0644BDE8 		pop {r1, r2, r10, lr}				@ Restaurar valor de los indices y las celdas vacias
 115              	
 116 00cc 010000EA 		b next_column
 117              	
 118              	empty_cell:
 119 00d0 01A08AE2 		add r10, r10, #1
 120 00d4 FFFFFFEA 		b next_column
 121              	
 122              	next_column:
 123 00d8 012082E2 		add r2, r2, #1
 124 00dc E9FFFFEA 		b loop_j
 125              	loop_j_end:
 126 00e0 011081E2 		add r1, r1, #1
 127 00e4 E3FFFFEA 		b loop_i
 128              	loop_i_end:
 129 00e8 2158BDE8 		pop {r0, r5, r11, r12, lr}			@ Restaurar valor de los punteros a funciones y cuadricula
 130 00ec 0A00A0E1 		mov r0, r10							@ Almacenar el contador de celdas vacias en r0 para devolverse como resultado de
 131 00f0 1EFF2FE1 		bx lr								@ Devolver el control a la funcion en C
 132              	
 133              	
 134              	arm_update_row_candidates:
 135 00f4 0080A0E3 	    mov r8, #0
 136              	fila_loop:
 137 00f8 090058E3 	    cmp r8, #9
 138 00fc 060000AA 	    bge fin_fila
 139              	
 140 0100 8892A0E1 	    lsl r9, r8, #5               		@ Desplazar la fila (r8 * 32)
 141 0104 05A089E0 	    add r10, r9, r5               		@ r10 = desplazamiento total = fila + columna (columna fija par
 142              	
 143 0108 BA3090E1 	    ldrh r3, [r0, r10]
 144              	
 145 010c 0630C3E1 	    bic r3, r3, r6               		@ celda &= ~(1 << displace) - Actualizar el bit candidato
 146 0110 BA3080E1 	    strh r3, [r0, r10]
 147              	
 148 0114 018088E2 	    add r8, r8, #1
 149 0118 F6FFFFEA 	    b fila_loop
 150              	
 151              	fin_fila:
 152 011c 1EFF2FE1 	    bx lr
 153              	
 154              	arm_update_column_candidates:
 155 0120 0080A0E3 	    mov r8, #0
 156              	col_loop:
 157 0124 090058E3 	    cmp r8, #9
 158 0128 060000AA 	    bge fin_col
 159              	
 160 012c 8890A0E1 	    lsl r9, r8, #1               		@ Desplazar la columna (r8 * 2)
 161 0130 09A084E0 	    add r10, r4, r9               		@ r10 = desplazamiento total = fila + columna (fila fija para r
 162              	
 163 0134 BA3090E1 	    ldrh r3, [r0, r10]
 164              	
 165 0138 0630C3E1 	    bic r3, r3, r6               		@ celda &= ~(1 << displace) - Actualizar bit candidato
 166 013c BA3080E1 	    strh r3, [r0, r10]
 167              	
 168 0140 018088E2 	    add r8, r8, #1
 169 0144 F6FFFFEA 	    b col_loop
 170              	
 171              	fin_col:
 172 0148 1EFF2FE1 	    bx lr
 173              	
 174              	
 175              	arm_calc_region_indexes:
 176 014c 0280A0E1 		mov r8, r2
 177 0150 0090A0E3 		mov r9, #0
 178              	col_index:
 179 0154 030058E3 		cmp r8, #3
 180 0158 020000BA 		blt col_index_end					@ Si es menor a 3, termina el calculo de columna
 181              	
 182 015c 038048E2 		sub r8, r8, #3						@ Restas sucesivas para determinar la region de la celda (1°,2° o 3° region ho
 183 0160 039089E2 		add r9, r9, #3						@ Aumentar #3 para ubicarse al inicio de la region correspondiente
 184 0164 FAFFFFEA 		b col_index
 185              	col_index_end:
 186 0168 0920A0E1 		mov r2, r9							@ Guardar el indice calculado en r1 (fila)
 187              	
 188 016c 0180A0E1 		mov r8, r1
 189 0170 0090A0E3 		mov r9, #0
 190              	row_index:
 191 0174 030058E3 		cmp r8, #3
 192 0178 020000BA 		blt row_index_end					@ Si es menor a 3, termina el calculo de fila
 193              	
 194 017c 038048E2 		sub r8, r8, #3						@ Restas sucesivas para determinar la region de la celda (1°,2° o 3° region ve
 195 0180 039089E2 		add r9, r9, #3						@ Aumentar #3 para ubicarse al inicio de la region correspondiente
 196 0184 FAFFFFEA 		b row_index
 197              	row_index_end:
 198 0188 0910A0E1 		mov r1, r9							@ Guardar el indice calculado en r2 (columna)
 199              	
 200 018c 038081E2 		add r8, r1, #3						@ r8 = Limite superior de la fila
 201 0190 039082E2 		add r9, r2, #3						@ r9 = Limite superior de la columna
 202              	
 203 0194 1EFF2FE1 		bx lr
 204              	
 205              	arm_update_region_candidates:
 206              		@ r0 = cuadricula
 207              		@ r1 = indice inicial region (fila)
 208              		@ r2 = indice inicial region (columna)
 209              		@ r3 = valor_celda
 210              		@ r6 = bit e desactivacion desplazado
 211              		@ r8 = limite max region (fila)
 212              		@ r9 = limite max region (columna)
 213              	
 214              	region_row_loop:
 215 0198 080051E1 		cmp r1, r8
 216 019c 0C0000AA 		bge end_of_region
 217              	
 218              	region_col_loop:
 219 01a0 090052E1 		cmp r2, r9
 220 01a4 070000AA 		bge end_of_column
 221              	
 222 01a8 81A2A0E1 		lsl r10, r1, #5						@ Desplazamiento fila (r1 * 32)
 223 01ac 82B0A0E1 		lsl r11, r2, #1						@ Desplazamiento columna (r2 * 2)
 224 01b0 0BC08AE0 		add r12, r10, r11					@ Desplazamiento total de la celda (fila + columna)
 225              	
 226 01b4 BC3090E1 		ldrh r3, [r0, r12]
 227 01b8 0630C3E1 		bic r3, r3, r6						@ celda &= ~(1 << displace)
 228 01bc BC3080E1 		strh r3, [r0, r12]
 229 01c0 012082E2 		add r2, r2, #1
 230 01c4 F5FFFFEA 		b region_col_loop
 231              	
 232              	end_of_column:
 233 01c8 011081E2 		add r1, r1, #1
 234 01cc 032042E2 		sub r2, r2, #3
 235 01d0 F0FFFFEA 		b region_row_loop
 236              	
 237              	end_of_region:
 238 01d4 1EFF2FE1 		bx lr
 239              	
 240              	start:
 241              	.arm    /* indicates that we are using the ARM instruction set */
 242              	
 243              	#------standard initial code
 244              	# --- Setup interrupt / exception vectors
 245 01d8 FFFFFFEA 	      B       Reset_Handler
 246              	/* In this version we do not use the following handlers */
 247              	################################################################################
 248              	#-----------Undefined_Handler:
 249              	#      B       Undefined_Handler
 250              	#----------SWI_Handler:
 251              	#      B       SWI_Handler
 252              	#----------Prefetch_Handler:
 253              	#      B       Prefetch_Handler
 254              	#----------Abort_Handler:
 255              	#      B       Abort_Handler
 256              	#         NOP      /* Reserved vector */
 257              	#----------IRQ_Handler:
 258              	#      B       IRQ_Handler
 259              	#----------FIQ_Handler:
 260              	#      B       FIQ_Handler
 261              	
 262              	################################################################################
 263              	# Reset Handler:
 264              	# the processor starts executing this code after system reset
 265              	################################################################################
 266              	Reset_Handler:
 267              	#
 268 01dc 01D9A0E3 	        MOV     sp, #0x4000      /*  set up stack pointer (r13) */
 269              	#
 270              	#  USING A .C FUNCTION
 271              	#
 272              	# FUNCTION CALL the parameters are stored in r0 and r1
 273              	# If there are 4 or less parameters when calling a C function the compiler
 274              	# assumes that they have been stored in r0-r3.
 275              	# If there are more parameters you have to store them in the data stack
 276              	# using the stack pointer
 277              	# function __c_copy is in copy.c
 278 01e0 0C009FE5 	        LDR     r0, =cuadricula  /*  puntero a la @ inicial de la cuadricula */
 279              	
 280              	.extern     sudoku9x9
 281 01e4 0C509FE5 	        ldr         r5, = sudoku9x9
 282 01e8 0FE0A0E1 	        mov         lr, pc
 283 01ec 15FF2FE1 	        bx          r5
 284              	
 285              	stop:
 286 01f0 FEFFFFEA 	        B       stop        /*  end of program */
 287              	
 288              	################################################################################
 289              	.data
 290              	.ltorg     
 291              	.align 5    /* guarantees 32-byte alignment (2^5) */
 292              	
 293              	# huecos para cuadrar
 294              	cuadricula:
 295              	     /* 9 filas de 16 entradas para facilitar la visualizacion, 16 bits por celda */
 296 0000 05800000 	    .hword   0x8005,0x0000,0x0000,0x8003,0x0000,0x0000,0x0000,0x0000,0x0000,0, 0,0,0,0,0,0
 296      00000380 
 296      00000000 
 296      00000000 
 296      00000000 
 297 0020 00000000 	    .hword   0x0000,0x0000,0x0000,0x0000,0x8009,0x0000,0x0000,0x0000,0x8005,0,0,0,0,0,0,0
 297      00000000 
 297      09800000 
 297      00000000 
 297      05800000 
 298 0040 00000980 	    .hword   0x0000,0x8009,0x8006,0x8007,0x0000,0x8005,0x0000,0x8003,0x0000,0,0,0,0,0,0,0
 298      06800780 
 298      00000580 
 298      00000380 
 298      00000000 
 299 0060 00000880 	    .hword   0x0000,0x8008,0x0000,0x8009,0x0000,0x0000,0x8006,0x0000,0x0000,0,0,0,0,0,0,0
 299      00000980 
 299      00000000 
 299      06800000 
 299      00000000 
 300 0080 00000000 	    .hword   0x0000,0x0000,0x8005,0x8008,0x8006,0x8001,0x8004,0x0000,0x0000,0,0,0,0,0,0,0
 300      05800880 
 300      06800180 
 300      04800000 
 300      00000000 
 301 00a0 00000000 	    .hword   0x0000,0x0000,0x8004,0x8002,0x0000,0x8003,0x0000,0x8007,0x0000,0,0,0,0,0,0,0
 301      04800280 
 301      00000380 
 301      00000780 
 301      00000000 
 302 00c0 00000780 	    .hword   0x0000,0x8007,0x0000,0x8005,0x0000,0x8009,0x8002,0x8006,0x0000,0,0,0,0,0,0,0
 302      00000580 
 302      00000980 
 302      02800680 
 302      00000000 
 303 00e0 06800000 	    .hword   0x8006,0x0000,0x0000,0x0000,0x8008,0x0000,0x0000,0x0000,0x0000,0,0,0,0,0,0,0
 303      00000000 
 303      08800000 
 303      00000000 
 303      00000000 
 304 0100 00000000 	    .hword   0x0000,0x0000,0x0000,0x0000,0x0000,0x8002,0x0000,0x0000,0x8001,0,0,0,0,0,0,0
 304      00000000 
 304      00000280 
 304      00000000 
 304      01800000 
 305              	.end
DEFINED SYMBOLS
       ../init_b.asm:240    .text:000001d8 start
       ../init_b.asm:69     .text:00000070 sudoku_candidatos_propagar_arm
       ../init_b.asm:10     .text:00000000 sudoku_candidatos_init_arm
       ../init_b.asm:11     .text:00000000 $a
       ../init_b.asm:25     .text:00000010 init_fila
       ../init_b.asm:57     .text:00000058 fin_init_fila
       ../init_b.asm:32     .text:00000020 init_columna
       ../init_b.asm:53     .text:00000050 fin_init_columna
       ../init_b.asm:49     .text:00000048 skip_init
       ../init_b.asm:63     .text:00000068 fin_init
       ../init_b.asm:82     .text:00000078 loop_i
       ../init_b.asm:128    .text:000000e8 loop_i_end
       ../init_b.asm:89     .text:00000088 loop_j
       ../init_b.asm:125    .text:000000e0 loop_j_end
       ../init_b.asm:118    .text:000000d0 empty_cell
       ../init_b.asm:134    .text:000000f4 arm_update_row_candidates
       ../init_b.asm:154    .text:00000120 arm_update_column_candidates
       ../init_b.asm:175    .text:0000014c arm_calc_region_indexes
       ../init_b.asm:205    .text:00000198 arm_update_region_candidates
       ../init_b.asm:122    .text:000000d8 next_column
       ../init_b.asm:136    .text:000000f8 fila_loop
       ../init_b.asm:151    .text:0000011c fin_fila
       ../init_b.asm:156    .text:00000124 col_loop
       ../init_b.asm:171    .text:00000148 fin_col
       ../init_b.asm:178    .text:00000154 col_index
       ../init_b.asm:185    .text:00000168 col_index_end
       ../init_b.asm:190    .text:00000174 row_index
       ../init_b.asm:197    .text:00000188 row_index_end
       ../init_b.asm:214    .text:00000198 region_row_loop
       ../init_b.asm:237    .text:000001d4 end_of_region
       ../init_b.asm:218    .text:000001a0 region_col_loop
       ../init_b.asm:232    .text:000001c8 end_of_column
       ../init_b.asm:266    .text:000001dc Reset_Handler
       ../init_b.asm:294    .data:00000000 cuadricula
       ../init_b.asm:285    .text:000001f0 stop
       ../init_b.asm:291    .data:00000000 $d
       ../init_b.asm:289    .text:000001f4 $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
sudoku9x9
